{"ast":null,"code":"import { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n\n    if (isSymbolNode(node)) {\n      var value = scope[node.name];\n\n      if (isNode(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n\n      return new FunctionNode(node.name, _args);\n    }\n\n    return node;\n  }\n\n  return resolve;\n});","map":{"version":3,"names":["isFunctionNode","isNode","isOperatorNode","isParenthesisNode","isSymbolNode","factory","name","dependencies","createResolve","_ref","parse","FunctionNode","OperatorNode","ParenthesisNode","resolve","node","scope","value","String","args","map","arg","op","fn","implicit","content","_args"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/Numerproject-main/node_modules/mathjs/lib/esm/function/algebra/simplify/resolve.js"],"sourcesContent":["import { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n\n    if (isSymbolNode(node)) {\n      var value = scope[node.name];\n\n      if (isNode(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n\n      return new FunctionNode(node.name, _args);\n    }\n\n    return node;\n  }\n\n  return resolve;\n});"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,MAAzB,EAAiCC,cAAjC,EAAiDC,iBAAjD,EAAoEC,YAApE,QAAwF,sBAAxF;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,cAAV,EAA0B,cAA1B,EAA0C,iBAA1C,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;EAC9E,IAAI;IACFC,KADE;IAEFC,YAFE;IAGFC,YAHE;IAIFC;EAJE,IAKAJ,IALJ;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,SAASK,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;IAC5B,IAAI,CAACA,KAAL,EAAY;MACV,OAAOD,IAAP;IACD;;IAED,IAAIX,YAAY,CAACW,IAAD,CAAhB,EAAwB;MACtB,IAAIE,KAAK,GAAGD,KAAK,CAACD,IAAI,CAACT,IAAN,CAAjB;;MAEA,IAAIL,MAAM,CAACgB,KAAD,CAAV,EAAmB;QACjB,OAAOH,OAAO,CAACG,KAAD,EAAQD,KAAR,CAAd;MACD,CAFD,MAEO,IAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;QACpC,OAAOP,KAAK,CAACQ,MAAM,CAACD,KAAD,CAAP,CAAZ;MACD;IACF,CARD,MAQO,IAAIf,cAAc,CAACa,IAAD,CAAlB,EAA0B;MAC/B,IAAII,IAAI,GAAGJ,IAAI,CAACI,IAAL,CAAUC,GAAV,CAAc,UAAUC,GAAV,EAAe;QACtC,OAAOP,OAAO,CAACO,GAAD,EAAML,KAAN,CAAd;MACD,CAFU,CAAX;MAGA,OAAO,IAAIJ,YAAJ,CAAiBG,IAAI,CAACO,EAAtB,EAA0BP,IAAI,CAACQ,EAA/B,EAAmCJ,IAAnC,EAAyCJ,IAAI,CAACS,QAA9C,CAAP;IACD,CALM,MAKA,IAAIrB,iBAAiB,CAACY,IAAD,CAArB,EAA6B;MAClC,OAAO,IAAIF,eAAJ,CAAoBC,OAAO,CAACC,IAAI,CAACU,OAAN,EAAeT,KAAf,CAA3B,CAAP;IACD,CAFM,MAEA,IAAIhB,cAAc,CAACe,IAAD,CAAlB,EAA0B;MAC/B,IAAIW,KAAK,GAAGX,IAAI,CAACI,IAAL,CAAUC,GAAV,CAAc,UAAUC,GAAV,EAAe;QACvC,OAAOP,OAAO,CAACO,GAAD,EAAML,KAAN,CAAd;MACD,CAFW,CAAZ;;MAIA,OAAO,IAAIL,YAAJ,CAAiBI,IAAI,CAACT,IAAtB,EAA4BoB,KAA5B,CAAP;IACD;;IAED,OAAOX,IAAP;EACD;;EAED,OAAOD,OAAP;AACD,CAzDgD,CAA1C"},"metadata":{},"sourceType":"module"}