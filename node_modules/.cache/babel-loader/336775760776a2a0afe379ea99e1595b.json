{"ast":null,"code":"/**\r\n * Radar chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport { RadarSeries } from \"../series/RadarSeries\";\nimport { Container } from \"../../core/Container\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { registry } from \"../../core/Registry\";\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar RadarChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(RadarChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadarChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"RadarChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return RadarChartDataItem;\n}(XYChartDataItem);\n\nexport { RadarChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\n\nvar RadarChart =\n/** @class */\nfunction (_super) {\n  __extends(RadarChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadarChart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines X axis renderer type.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererCircular;\n    /**\r\n     * Defines Y axis renderer type.\r\n     */\n\n    _this._axisRendererY = AxisRendererRadial;\n    /**\r\n     * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.innerRadiusModifyer = 1;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.mr = 1;\n    _this.className = \"RadarChart\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.radius = percent(80);\n    _this.innerRadius = 0;\n\n    var radarContainer = _this.plotContainer.createChild(Container);\n\n    radarContainer.shouldClone = false;\n    radarContainer.layout = \"absolute\";\n    radarContainer.align = \"center\";\n    radarContainer.valign = \"middle\";\n    _this.seriesContainer.parent = radarContainer;\n    _this.radarContainer = radarContainer;\n    _this.bulletsContainer.parent = radarContainer;\n    _this.axisBulletsContainer = radarContainer;\n    _this._cursorContainer = radarContainer;\n\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false); // need this for the chart to change radius if legend is removed/disabled\n\n\n    _this._bulletMask = radarContainer.createChild(Circle);\n    _this._bulletMask.shouldClone = false;\n    _this._bulletMask.element = _this.paper.add(\"path\");\n    _this._bulletMask.opacity = 0; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  RadarChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Radar chart\");\n    }\n  };\n  /**\r\n   * Decorates Axis with required properties for this chart.\r\n   *\r\n   * @param axis  Axis\r\n   */\n\n\n  RadarChart.prototype.processAxis = function (axis) {\n    _super.prototype.processAxis.call(this, axis);\n\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = renderer;\n    renderer.breakContainer.parent = renderer;\n    axis.parent = this.radarContainer;\n    renderer.toBack();\n  };\n  /**\r\n   * Updates all X axes after range change event.\r\n   */\n\n\n  RadarChart.prototype.handleXAxisRangeChange = function () {\n    _super.prototype.handleXAxisRangeChange.call(this);\n\n    $iter.each(this.yAxes.iterator(), function (axis) {\n      axis.invalidate();\n    });\n  };\n  /**\r\n   * Updates all Y axes after range change event.\r\n   */\n\n\n  RadarChart.prototype.handleYAxisRangeChange = function () {\n    _super.prototype.handleYAxisRangeChange.call(this);\n\n    $iter.each(this.xAxes.iterator(), function (axis) {\n      axis.invalidate();\n    });\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  RadarChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up cursor\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"RadarCursor\";\n      } // Set up series\n\n\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"RadarSeries\";\n        }\n      } // Set up axes\n\n      /*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n          for (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n              config.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n          }\r\n      }\r\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n          for (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n              config.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n          }\r\n      }*/\n\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Does calculations before drawing the chart.\r\n   */\n\n\n  RadarChart.prototype.beforeDraw = function () {\n    _super.prototype.beforeDraw.call(this);\n\n    var plotContainer = this.plotContainer;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    var wr = plotContainer.innerWidth / rect.width;\n    var hr = plotContainer.innerHeight / rect.height;\n    var innerRadius = this.innerRadius;\n\n    if (innerRadius instanceof Percent) {\n      var value = innerRadius.value;\n      var mr = Math.min(wr, hr);\n      this.mr = mr;\n      value = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\n      innerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\n      this.innerRadiusModifyer = value / innerRadius.value;\n      innerRadius = percent(value * 100);\n    } // @todo handle this when innerRadius set in pixels (do it for pie also)\n\n\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\n    var diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\n    var radius = diameter / 2;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    this._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\n    this._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\n    $iter.each(this.xAxes.iterator(), function (axis) {\n      if (axis.renderer.useChartAngles) {\n        axis.renderer.startAngle = startAngle;\n        axis.renderer.endAngle = endAngle;\n      }\n\n      axis.width = diameter;\n      axis.height = diameter; //axis.renderer.width = diameter;\n      //axis.renderer.height = diameter;\n\n      axis.renderer.pixelRadiusReal = radius; //axis.renderer.innerRadius = innerRadius;\n    });\n    $iter.each(this.yAxes.iterator(), function (axis) {\n      axis.renderer.startAngle = startAngle;\n      axis.renderer.endAngle = endAngle;\n      axis.width = diameter;\n      axis.height = diameter; //axis.renderer.width = diameter;\n      //axis.renderer.height = diameter;\n\n      axis.renderer.pixelRadiusReal = radius; //axis.renderer.innerRadius = innerRadius;\n    });\n    var cursor = this.cursor;\n\n    if (cursor) {\n      cursor.width = diameter;\n      cursor.height = diameter;\n      cursor.startAngle = startAngle;\n      cursor.endAngle = endAngle;\n    }\n\n    this.radarContainer.definedBBox = {\n      x: radius * rect.x,\n      y: radius * rect.y,\n      width: radius * rect.width,\n      height: radius * rect.height\n    };\n    this.radarContainer.validatePosition();\n  };\n  /**\r\n   * Creates and returns a new Series, suitable for RadarChart.\r\n   *\r\n   * @return New Series\r\n   */\n\n\n  RadarChart.prototype.createSeries = function () {\n    return new RadarSeries();\n  };\n\n  Object.defineProperty(RadarChart.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n     * top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the radial axis start horizontally to\r\n     * the right, as opposed to vertical.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarChart.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n     * where it has started, forming a full 360 circle. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to end the circle somewhere else.\r\n     *\r\n     * E.g. setting this to 180 will make the radar face end at horizontal line\r\n     * to the left off the center.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarChart.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the Radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarChart.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Inner radius in pixels\r\n     */\n    get: function () {\n      return this._pixelInnerRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarChart.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * If set in Percent, it will be relative to `radius`. (outer radius)\r\n     *\r\n     * @param value Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis Axis\r\n   */\n\n  RadarChart.prototype.updateXAxis = function (renderer) {\n    //do not call super!\n    if (renderer) {\n      renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis Axis\r\n   */\n\n\n  RadarChart.prototype.updateYAxis = function (renderer) {\n    // do not call super!\n    if (renderer) {\n      renderer.processRenderer();\n    }\n  };\n\n  return RadarChart;\n}(XYChart);\n\nexport { RadarChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/RadarChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic mr: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\t\tthis.axisBulletsContainer = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\r\n\t\t\tthis.mr = mr;\r\n\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif (axis.renderer.useChartAngles) {\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}