{"ast":null,"code":"/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AMElement } from \"./AMElement\";\nimport { Group } from \"./Group\";\nimport { SVGContainer } from \"./SVGContainer\";\nimport * as $dom from \"../utils/DOM\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\n\nvar Paper =\n/** @class */\nfunction () {\n  /**\r\n   * Creates main `<svg>` container and related elements.\r\n   *\r\n   * @param container A reference to HTML element to create `<svg>` in\r\n   */\n  function Paper(container, id) {\n    // Store container reference\n    this.container = container;\n    this.id = id; // Create SVG element\n\n    var svg = document.createElementNS($dom.SVGNS, \"svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\n    svg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\n    svg.setAttribute(\"role\", \"group\");\n    this.container.appendChild(svg); // Add description\n    //let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\n    //desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\n    //svg.appendChild(desc);\n    // Add defs\n\n    this.defs = document.createElementNS($dom.SVGNS, \"defs\");\n    svg.appendChild(this.defs); // Set width and height to fit container\n\n    svg.style.width = \"100%\";\n    svg.style.height = \"100%\";\n    svg.style.overflow = \"visible\"; // Store variable\n\n    this.svg = svg;\n  }\n  /**\r\n   * Creates and returns a new element. Does not attach it to Paper yet.\r\n   *\r\n   * @param elementName  Element name\r\n   * @return New element\r\n   */\n\n\n  Paper.prototype.add = function (elementName) {\n    return new AMElement(elementName);\n  };\n  /**\r\n   * Creates and returns a new Group element. Does not attach it to Paper.\r\n   *\r\n   * @param groupName  Element name\r\n   * @return New Group\r\n   */\n\n\n  Paper.prototype.addGroup = function (groupName) {\n    return new Group(groupName);\n  };\n  /**\r\n   * Appends an element to Paper.\r\n   *\r\n   * @param element Element to append\r\n   */\n\n\n  Paper.prototype.append = function (element) {\n    if (element) {\n      this.svg.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Appends an element to `<defs>` block of the Paper.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Paper.prototype.appendDef = function (element) {\n    if (element) {\n      this.defs.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Creates and returns new `<foreignObject>` element. Does not append it to\r\n   * Paper.\r\n   *\r\n   * @return A foreignObject element\r\n   */\n\n\n  Paper.prototype.foreignObject = function () {\n    var element = new AMElement(\"foreignObject\"); //this.append(element);\n\n    return element;\n  };\n  /**\r\n   * Checks if browser supports `<foreignObject>` elements.\r\n   *\r\n   * @return Supports `foreignObject`?\r\n   */\n\n\n  Paper.prototype.supportsForeignObject = function () {\n    return document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\n  };\n\n  return Paper;\n}();\n\nexport { Paper };\nvar ghostPaper = null;\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport function getGhostPaper() {\n  if (ghostPaper === null) {\n    // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\n    var ghostDiv = document.createElement(\"div\");\n    ghostDiv.hidden = true;\n    ghostDiv.style.width = \"1px\";\n    ghostDiv.style.height = \"1px\";\n    ghostDiv.style.position = \"absolute\";\n    ghostDiv.style.zIndex = \"-1000000\";\n    document.body.appendChild(ghostDiv);\n    var ghostSvgContainer = new SVGContainer(ghostDiv, true);\n    ghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\n  }\n\n  return ghostPaper;\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/rendering/Paper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\nimport { Group } from \"./Group\";\r\nimport { SVGContainer } from \"./SVGContainer\";\r\nimport * as $dom from \"../utils/DOM\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents available SVG elements that can be added to paper.\r\n *\r\n * @todo Review if we can remove commented out methods\r\n */\r\nexport type SVGElementNames = \"a\" | \"altGlyph\" | \"altGlyphDef\" | \"altGlyphItem\" | \"animate\" | \"animateColor\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"color-profile\" | \"cursor\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"feConvolveMatrix\" | \"filter\" | \"font\" | \"font-face\" | \"font-face-format\" | \"font-face-name\" | \"font-face-src\" | \"font-face-uri\" | \"foreignObject\" | \"g\" | \"glyph\" | \"glyphRef\" | \"hkern\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"missing-glyph\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"script\" | \"set\" | \"stop\" | \"style\" | \"svg\" | \"switch\" | \"symbol\" | \"text\" | \"textPath\" | \"title\" | \"tref\" | \"tspan\" | \"use\" | \"view\" | \"vkern\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\r\nexport class Paper {\r\n\r\n\t/**\r\n\t * A reference `<svg>` element.\r\n\t */\r\n\tpublic svg: SVGSVGElement;\r\n\r\n\t/**\r\n\t * A reference to the HTML container the `<svg>` element is placed in.\r\n\t */\r\n\tpublic container: HTMLElement;\r\n\r\n\t/**\r\n\t * A reference to the `<defs>` element.\r\n\t */\r\n\tpublic defs: SVGDefsElement;\r\n\r\n\t/**\r\n\t * An id of the element.\r\n\t */\r\n\tpublic id: string;\r\n\r\n\t/**\r\n\t * Creates main `<svg>` container and related elements.\r\n\t *\r\n\t * @param container A reference to HTML element to create `<svg>` in\r\n\t */\r\n\tconstructor(container: HTMLElement, id: string) {\r\n\r\n\t\t// Store container reference\r\n\t\tthis.container = container;\r\n\t\tthis.id = id;\r\n\r\n\t\t// Create SVG element\r\n\t\tlet svg = <SVGSVGElement>document.createElementNS($dom.SVGNS, \"svg\");\r\n\t\tsvg.setAttribute(\"version\", \"1.1\");\r\n\t\tsvg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\r\n\t\tsvg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\r\n\t\tsvg.setAttribute(\"role\", \"group\");\r\n\t\tthis.container.appendChild(svg);\r\n\r\n\t\t// Add description\r\n\t\t//let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\r\n\t\t//desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\r\n\t\t//svg.appendChild(desc);\r\n\r\n\t\t// Add defs\r\n\t\tthis.defs = <SVGDefsElement>document.createElementNS($dom.SVGNS, \"defs\");\r\n\t\tsvg.appendChild(this.defs);\r\n\r\n\t\t// Set width and height to fit container\r\n\t\tsvg.style.width = \"100%\";\r\n\t\tsvg.style.height = \"100%\";\r\n\t\tsvg.style.overflow = \"visible\";\r\n\r\n\t\t// Store variable\r\n\t\tthis.svg = svg;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new element. Does not attach it to Paper yet.\r\n\t *\r\n\t * @param elementName  Element name\r\n\t * @return New element\r\n\t */\r\n\tpublic add(elementName: SVGElementNames): AMElement {\r\n\t\treturn new AMElement(elementName);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Group element. Does not attach it to Paper.\r\n\t *\r\n\t * @param groupName  Element name\r\n\t * @return New Group\r\n\t */\r\n\tpublic addGroup(groupName: SVGElementNames): Group {\r\n\t\treturn new Group(groupName);\r\n\t}\r\n\r\n\t/**\r\n\t * Appends an element to Paper.\r\n\t *\r\n\t * @param element Element to append\r\n\t */\r\n\tpublic append(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.svg.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends an element to `<defs>` block of the Paper.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic appendDef(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.defs.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns new `<foreignObject>` element. Does not append it to\r\n\t * Paper.\r\n\t *\r\n\t * @return A foreignObject element\r\n\t */\r\n\tpublic foreignObject(): AMElement {\r\n\t\tlet element = new AMElement(\"foreignObject\");\r\n\t\t//this.append(element);\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if browser supports `<foreignObject>` elements.\r\n\t *\r\n\t * @return Supports `foreignObject`?\r\n\t */\r\n\tpublic supportsForeignObject(): boolean {\r\n\t\treturn document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\r\n\t}\r\n\r\n}\r\n\r\n\r\nlet ghostPaper: Paper | null = null;\r\n\r\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function getGhostPaper(): Paper {\r\n\tif (ghostPaper === null) {\r\n\t\t// ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\r\n\t\tlet ghostDiv: HTMLDivElement = document.createElement(\"div\");\r\n\t\tghostDiv.hidden = true;\r\n\t\tghostDiv.style.width = \"1px\";\r\n\t\tghostDiv.style.height = \"1px\";\r\n\t\tghostDiv.style.position = \"absolute\";\r\n\t\tghostDiv.style.zIndex = \"-1000000\";\r\n\t\tdocument.body.appendChild(ghostDiv);\r\n\t\tlet ghostSvgContainer = new SVGContainer(ghostDiv, true);\r\n\t\tghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\r\n\r\n\t}\r\n\r\n\treturn ghostPaper;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}