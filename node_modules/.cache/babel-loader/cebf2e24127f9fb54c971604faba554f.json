{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererY3D =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererY3D, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererY3D() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRendererY3D\";\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY3D.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n\n    if (grid.element) {\n      var dx = this.chart.dx3D || 0;\n      var dy = this.chart.dy3D || 0;\n      var w = this.getWidth();\n      grid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: dx,\n        y: dy\n      }) + $path.lineTo({\n        x: w + dx,\n        y: dy\n      });\n    }\n\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY3D.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var dx = this.chart.dx3D || 0;\n    var dy = this.chart.dy3D || 0;\n    var w = this.getWidth();\n    this.baseGrid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: w,\n      y: 0\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    });\n  };\n\n  Object.defineProperty(AxisRendererY3D.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * Chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (chart) {\n      if (chart) {\n        this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invoked when 3D-related settings change, like depth or angle.\r\n   *\r\n   * @param event Event\r\n   */\n\n  AxisRendererY3D.prototype.handle3DChanged = function (event) {\n    if (event.property == \"depth\" || event.property == \"angle\") {\n      this.invalidate();\n    }\n  };\n\n  return AxisRendererY3D;\n}(AxisRendererY);\n\nexport { AxisRendererY3D };","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/AxisRendererY3D.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}