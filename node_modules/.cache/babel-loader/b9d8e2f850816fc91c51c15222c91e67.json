{"ast":null,"code":"/**\r\n * Interaction manages all aspects of user interaction - mouse move,\r\n * click, hover, drag events, touch gestures.\r\n *\r\n * [[InteractionObject]] elements that want to use certain events, must attach event\r\n * listeners to Interaction instance.\r\n *\r\n * Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n * those elements to handle interaction information received via event triggers.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObjectEvents } from \"../Base\";\nimport { List } from \"../utils/List\";\nimport { Animation } from \"../utils/Animation\";\nimport { MultiDisposer } from \"../utils/Disposer\";\nimport { InteractionObject } from \"./InteractionObject\";\nimport { InteractionKeyboardObject } from \"./InteractionKeyboardObject\";\nimport { Dictionary } from \"../utils/Dictionary\";\nimport { Inertia } from \"./Inertia\";\nimport { addEventListener } from \"../utils/DOM\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport { system } from \"./../System\";\nimport { options } from \"./../Options\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $math from \"../utils/Math\";\nimport * as $array from \"../utils/Array\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $iter from \"../utils/Iterator\";\nimport * as $type from \"../utils/Type\";\nimport * as $time from \"../utils/Time\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n* Interaction manages all aspects of user interaction - mouse move,\r\n* click, hover, drag events, touch gestures.\r\n*\r\n* [[InteractionObject]] elements that want to use certain events, must attach event\r\n* listeners to Interaction instance.\r\n*\r\n* Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n* those elements to handle interaction information received via event triggers.\r\n*\r\n* @see {@link IInteractionEvents} for a list of available events\r\n*/\n\nvar Interaction =\n/** @class */\nfunction (_super) {\n  __extends(Interaction, _super);\n  /**\r\n   * Constructor. Sets up universal document-wide move events to handle stuff\r\n   * outside particular chart container.\r\n   */\n\n\n  function Interaction() {\n    var _this = // Call super\n    _super.call(this) || this;\n    /**\r\n     * An indicator of global events were already initialized.\r\n     */\n\n\n    _this._globalEventsAdded = false;\n    /**\r\n     * Holds which mouse event listeners to use.\r\n     */\n\n    _this._pointerEvents = {\n      \"pointerdown\": \"mousedown\",\n      \"pointerup\": \"mouseup\",\n      \"pointermove\": \"mousemove\",\n      \"pointercancel\": \"mouseup\",\n      \"pointerover\": \"mouseover\",\n      \"pointerout\": \"mouseout\",\n      \"wheel\": \"wheel\"\n    };\n    /**\r\n     * Indicates if Interaction should use only \"pointer\" type events, like\r\n     * \"pointermove\", available in all modern browsers, ignoring \"legacy\"\r\n     * events, like \"touchmove\".\r\n     */\n\n    _this._usePointerEventsOnly = false;\n    /**\r\n     * Use only touch events (for touch only devices such as tablets and phones)\r\n     */\n\n    _this._useTouchEventsOnly = false;\n    /**\r\n     * Add special hover events. Normally, touch device tap will also simulate\r\n     * hover event. On some devices (ahem iOS) we want to prevent that so that\r\n     * over/out events are not duplicated.\r\n     */\n\n    _this._addHoverEvents = true;\n    /**\r\n     * Indicates if passive mode options is supported by this browser.\r\n     */\n\n    _this._passiveSupported = false;\n    /**\r\n     * Holds list of delayed events\r\n     */\n\n    _this._delayedEvents = {\n      out: []\n    };\n    /**\r\n     * List of objects that current have a pointer hovered over them.\r\n     */\n\n    _this.overObjects = new List();\n    /**\r\n     * List of objects that currently has a pressed pointer.\r\n     */\n\n    _this.downObjects = new List();\n    /**\r\n     * List of objects that need mouse position to be reported to them.\r\n     */\n\n    _this.trackedObjects = new List();\n    /**\r\n     * List of objects that are currently being dragged.\r\n     */\n\n    _this.transformedObjects = new List();\n    /**\r\n     * Holds all known pointers.\r\n     */\n\n    _this.pointers = new Dictionary();\n    /**\r\n     * Inertia options that need to be applied to after element drag, if it's\r\n     * `inert = true`.\r\n     *\r\n     * This is just a default, which can and probably will be overridden by\r\n     * actual elements.\r\n     */\n\n    _this.inertiaOptions = new Dictionary();\n    /**\r\n     * Default options for click events. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n\n    _this.hitOptions = {\n      \"doubleHitTime\": 300,\n      //\"delayFirstHit\": false,\n      \"hitTolerance\": 10,\n      \"noFocus\": true\n    };\n    /**\r\n     * Default options for hover events. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n\n    _this.hoverOptions = {\n      \"touchOutBehavior\": \"leave\",\n      \"touchOutDelay\": 1000\n    };\n    /**\r\n     * Default options for detecting a swipe gesture. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n\n    _this.swipeOptions = {\n      \"time\": 500,\n      \"verticalThreshold\": 75,\n      \"horizontalThreshold\": 30\n    };\n    /**\r\n     * Default options for keyboard operations. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n\n    _this.keyboardOptions = {\n      \"speed\": 0.1,\n      \"accelleration\": 1.2,\n      \"accellerationDelay\": 2000\n    };\n    /**\r\n     * Default options for keyboard operations. These can be overridden in\r\n     * [[InteractionObject]].\r\n     *\r\n     * @since 4.5.14\r\n     */\n\n    _this.mouseOptions = {\n      \"sensitivity\": 1\n    }; // Set class name\n\n    _this.className = \"Interaction\"; // Create InteractionObject for <body>\n\n    _this.body = _this.getInteraction(document.body);\n\n    _this._disposers.push(_this.body); // Detect browser capabilities and determine what event listeners to use\n\n\n    if (window.hasOwnProperty(\"PointerEvent\")) {\n      // IE10+/Edge without touch controls enabled\n      _this._pointerEvents.pointerdown = \"pointerdown\";\n      _this._pointerEvents.pointerup = \"pointerup\";\n      _this._pointerEvents.pointermove = \"pointermove\";\n      _this._pointerEvents.pointercancel = \"pointercancel\";\n      _this._pointerEvents.pointerover = \"pointerover\";\n      _this._pointerEvents.pointerout = \"pointerout\"; //this._usePointerEventsOnly = true;\n    } else if (window.hasOwnProperty(\"MSPointerEvent\")) {\n      // IE9\n      _this._pointerEvents.pointerdown = \"MSPointerDown\";\n      _this._pointerEvents.pointerup = \"MSPointerUp\";\n      _this._pointerEvents.pointermove = \"MSPointerMove\";\n      _this._pointerEvents.pointercancel = \"MSPointerUp\";\n      _this._pointerEvents.pointerover = \"MSPointerOver\";\n      _this._pointerEvents.pointerout = \"MSPointerOut\"; //this._usePointerEventsOnly = true;\n    } else if (typeof matchMedia !== \"undefined\" && matchMedia('(pointer:fine)').matches) {\n      // This is only for Safari as it does not support PointerEvent\n      // Do nothing and let it use regular `mouse*` events\n      // Hi Apple ;)\n      // Additionally disable hover events for iOS devices\n      if ('ontouchstart' in window) {\n        _this._addHoverEvents = false;\n        _this._useTouchEventsOnly = true;\n      }\n    } else if (window.navigator.userAgent.match(/MSIE /)) {\n      // Oh looky, an MSIE that does not support PointerEvent. Hi granpa IE9!\n      _this._usePointerEventsOnly = true;\n    } else if (_this.fullFF()) {\n      // Old FF, let's use regular events.\n      // (Newer FFs would be detected by the PointerEvent availability check)\n      _this._usePointerEventsOnly = true;\n    } else {\n      // Uses defaults for normal browsers\n      // We also assume that this must be a touch device that does not have\n      // any pointer events\n      _this._useTouchEventsOnly = true;\n    } // Detect if device has a mouse\n    // This is turning out to be not reliable\n    // @todo remove\n\n    /*if (!window.navigator.msPointerEnabled && (typeof matchMedia !== \"undefined\") && !matchMedia('(pointer:fine)').matches && !this.fullFF()) {\r\n        this._useTouchEventsOnly = true;\r\n    }*/\n    // Detect proper mouse wheel events\n\n\n    if (\"onwheel\" in document.createElement(\"div\")) {\n      // Modern browsers\n      _this._pointerEvents.wheel = \"wheel\";\n    } else if ($type.hasValue(document.onmousewheel)) {\n      // Webkit and IE support at least \"mousewheel\"\n      _this._pointerEvents.wheel = \"mousewheel\";\n    } // Set up default inertia options\n\n\n    _this.inertiaOptions.setKey(\"move\", {\n      \"time\": 100,\n      \"duration\": 500,\n      \"factor\": 1,\n      \"easing\": $ease.polyOut3\n    });\n\n    _this.inertiaOptions.setKey(\"resize\", {\n      \"time\": 100,\n      \"duration\": 500,\n      \"factor\": 1,\n      \"easing\": $ease.polyOut3\n    }); // Set the passive mode support\n\n\n    _this._passiveSupported = Interaction.passiveSupported; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * This is a nasty detection for Firefox. The reason why we have is that\r\n   * Firefox ESR version does not support matchMedia correctly.\r\n   *\r\n   * On iOS, Firefox uses different userAgent, so we don't have to detect iOS.\r\n   *\r\n   * @return Full Firefox?\r\n   */\n\n\n  Interaction.prototype.fullFF = function () {\n    return window.navigator.userAgent.match(/Firefox/) && !window.navigator.userAgent.match(/Android/);\n  };\n\n  Interaction.prototype.debug = function () {};\n  /**\r\n   * ==========================================================================\r\n   * Processing\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Sets up global events.\r\n   *\r\n   * We need this so that we can track drag movement beyond chart's container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.addGlobalEvents = function () {\n    var _this = this;\n\n    if (!this._globalEventsAdded) {\n      if (!this._useTouchEventsOnly) {\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointerdown, function (ev) {\n          _this.handleGlobalPointerDown(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointermove, function (ev) {\n          _this.handleGlobalPointerMove(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointerup, function (ev) {\n          _this.handleGlobalPointerUp(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointercancel, function (ev) {\n          _this.handleGlobalPointerUp(ev, true);\n        }));\n\n        this._disposers.push(addEventListener(document, \"mouseenter\", function (ev) {\n          if (!$type.hasValue(ev.relatedTarget) && (ev.buttons == 0 || ev.which == 0)) {\n            _this.handleDocumentLeave(ev);\n          }\n        }));\n      } // No need to duplicate events for hubrid systems that support both\n      // pointer events and touch events. Touch events are need only for\n      // some touch-only systems, like Mobile Safari.\n\n\n      if (!this._usePointerEventsOnly) {\n        this._disposers.push(addEventListener(document, \"touchstart\", function (ev) {\n          _this.handleGlobalTouchStart(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, \"touchmove\", function (ev) {\n          _this.handleGlobalTouchMove(ev);\n        }));\n\n        this._disposers.push(addEventListener(document, \"touchend\", function (ev) {\n          _this.handleGlobalTouchEnd(ev);\n        }));\n      }\n\n      this._disposers.push(addEventListener(document, \"keydown\", function (ev) {\n        _this.handleGlobalKeyDown(ev);\n      }));\n\n      this._disposers.push(addEventListener(document, \"keyup\", function (ev) {\n        _this.handleGlobalKeyUp(ev);\n      }));\n\n      this._globalEventsAdded = true;\n    }\n  };\n  /**\r\n   * Sets if [[InteractionObject]] is clickable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n\n\n  Interaction.prototype.processClickable = function (io) {\n    // Add or remove touch events\n    this.processTouchable(io);\n  };\n  /**\r\n   * Sets if [[InteractionObject]] will display context menu when right-clicked.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n\n\n  Interaction.prototype.processContextMenu = function (io) {\n    if (io.contextMenuDisabled) {\n      if (!io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\n        io.eventDisposers.setKey(\"contextMenuDisabled\", addEventListener(io.element, \"contextmenu\", function (e) {\n          e.preventDefault();\n        }));\n      }\n    } else {\n      if (io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\n        io.eventDisposers.getKey(\"contextMenuDisabled\").dispose();\n      }\n    }\n  };\n  /**\r\n   * Sets if [[InteractionObject]] is hoverable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n\n\n  Interaction.prototype.processHoverable = function (io) {\n    var _this = this;\n\n    if (io.hoverable || io.trackable) {\n      // Add global events\n      this.addGlobalEvents(); // Add hover styles\n\n      this.applyCursorOverStyle(io); // Add local events\n\n      if (!io.eventDisposers.hasKey(\"hoverable\") && this._addHoverEvents) {\n        io.eventDisposers.setKey(\"hoverable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.pointerout, function (e) {\n          return _this.handlePointerOut(io, e);\n        }), addEventListener(io.element, this._pointerEvents.pointerover, function (e) {\n          return _this.handlePointerOver(io, e);\n        })]));\n      }\n\n      if (io.trackable) {//sprite.addEventListener(\"touchmove\", this.handleTouchMove, false, this);\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"hoverable\");\n\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"hoverable\");\n      }\n    } // Add or remove touch events\n\n\n    this.processTouchable(io);\n  };\n  /**\r\n   * Sets up [[InteractionObject]] as movable. Movable can be any\r\n   * transformation, e.g. drag, swipe, resize, track.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processMovable = function (io) {\n    // Add unified events\n    if (io.draggable || io.swipeable || io.trackable || io.resizable) {\n      // Prep the element\n      if (!this.isGlobalElement(io) && !io.isTouchProtected) {\n        this.prepElement(io);\n      } // Add hover styles\n\n\n      this.applyCursorOverStyle(io);\n    } // Add or remove touch events\n\n\n    this.processTouchable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is trackable and sets relative events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processTrackable = function (io) {\n    this.processHoverable(io);\n    this.processMovable(io);\n\n    if (io.trackable) {\n      this.trackedObjects.moveValue(io);\n    } else {\n      this.trackedObjects.removeValue(io);\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is draggable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processDraggable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is swipeable and sets relative events.\r\n   *\r\n   * A swipe event is triggered when a horizontal drag of 75px or more (and\r\n   * less than 30px vertically) occurs within 700 milliseconds. This can be\r\n   * overridden in sprites [[swipeOptions]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processSwipeable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is resizable and attaches required events\r\n   * to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processResizable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is supposed to capture mouse wheel events\r\n   * and prepares it to catch those events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processWheelable = function (io) {\n    var _this = this;\n\n    if (io.wheelable) {\n      //io.hoverable = true;\n      if (!io.eventDisposers.hasKey(\"wheelable\")) {\n        io.eventDisposers.setKey(\"wheelable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.wheel, function (e) {\n          return _this.handleMouseWheel(io, e);\n        }, this._passiveSupported ? {\n          passive: false\n        } : false), io.events.on(\"out\", function (e) {\n          if (io.wheelable) {\n            _this.unlockWheel();\n          }\n        }), io.events.on(\"over\", function (e) {\n          if (io.wheelable) {\n            _this.lockWheel();\n          }\n        })]));\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"wheelable\");\n\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"wheelable\");\n      }\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is focusable. A focusable element is an\r\n   * element that will be highlighted when users presses TAB key. If the\r\n   * element is focusable, this function will attach relative focus/blur\r\n   * events to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processFocusable = function (io) {\n    var _this = this;\n\n    if (io.focusable === true && io.tabindex > -1 && !this._useTouchEventsOnly) {\n      if (!io.eventDisposers.hasKey(\"focusable\")) {\n        io.eventDisposers.setKey(\"focusable\", new MultiDisposer([addEventListener(io.element, \"focus\", function (e) {\n          return _this.handleFocus(io, e);\n        }), addEventListener(io.element, \"blur\", function (e) {\n          return _this.handleBlur(io, e);\n        }), addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n          return _this.handleFocusBlur(io, e);\n        }), addEventListener(io.element, \"touchstart\", function (e) {\n          return _this.handleFocusBlur(io, e);\n        }, this._passiveSupported ? {\n          passive: false\n        } : false)]));\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"focusable\");\n\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"focusable\");\n      }\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is \"touchable\". It means any interaction\r\n   * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n\n\n  Interaction.prototype.processTouchable = function (io) {\n    var _this = this; // Add unified events\n\n\n    if (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable) {\n      // Add global events\n      this.addGlobalEvents(); // Add local events\n\n      if (!io.eventDisposers.hasKey(\"touchable\")) {\n        if (!this._useTouchEventsOnly && !this._usePointerEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n            return _this.handlePointerDown(io, e);\n          }), addEventListener(io.element, \"touchstart\", function (e) {\n            return _this.handleTouchDown(io, e);\n          }, this._passiveSupported ? {\n            passive: false\n          } : false)]));\n        } else if (!this._useTouchEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n            return _this.handlePointerDown(io, e);\n          }));\n        } else if (!this._usePointerEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, \"touchstart\", function (e) {\n            return _this.handleTouchDown(io, e);\n          }, this._passiveSupported ? {\n            passive: false\n          } : false));\n        }\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"touchable\");\n\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"touchable\");\n      }\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Non-pointer events\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Dispatches \"focus\" event when element gains focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handleFocus = function (io, ev) {\n    if (!io.focusable) {\n      ev.preventDefault();\n      return;\n    }\n\n    io.isFocused = true;\n\n    if (io.events.isEnabled(\"focus\") && !system.isPaused) {\n      var imev = {\n        type: \"focus\",\n        target: io,\n        event: ev\n      };\n      io.events.dispatchImmediately(\"focus\", imev);\n    }\n  };\n  /**\r\n   * Used by regular click events to prevent focus if \"noFocus\" is set.\r\n   *\r\n   * This should not be called by \"focus\" handlers.\r\n   *\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handleFocusBlur = function (io, ev) {\n    if (io.focusable !== false && this.getHitOption(io, \"noFocus\")) {\n      io.events.once(\"focus\", function () {\n        io.events.disableType(\"blur\");\n        $dom.blur();\n\n        if (io.sprite) {\n          io.sprite.handleBlur();\n        }\n\n        io.events.enableType(\"blur\");\n      });\n    }\n  };\n  /**\r\n   * Dispatches \"blur\" event when element loses focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handleBlur = function (io, ev) {\n    if (!io.focusable) {\n      ev.preventDefault();\n      return;\n    }\n\n    io.isFocused = false;\n\n    if (io.events.isEnabled(\"blur\") && !system.isPaused) {\n      var imev = {\n        type: \"blur\",\n        target: io,\n        event: ev\n      };\n      io.events.dispatchImmediately(\"blur\", imev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Global keyboard-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Checks if there is an item that has currently focus and that they key is\r\n   * one of the directional keys. If both of the conditions are true, it\r\n   * creates an object to simulate movement of dragable element with keyboard.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An original keyboard event\r\n   */\n\n\n  Interaction.prototype.handleGlobalKeyDown = function (ev) {\n    if (this.focusedObject) {\n      if (keyboard.isKey(ev, \"esc\")) {\n        // ESC removes focus\n        $dom.blur();\n      } else if (this.focusedObject.draggable && keyboard.isKey(ev, [\"up\", \"down\", \"left\", \"right\"])) {\n        // Prevent scrolling of the document\n        ev.preventDefault(); // Get focused object\n\n        var io = this.focusedObject; // Get particular key\n\n        var disposerKey = \"interactionKeyboardObject\"; // If such disposer already exists we know the event is going on so we\n        // just move on\n\n        if (io.eventDisposers.hasKey(disposerKey)) {\n          return;\n        } // Create a keyboard mover\n\n\n        var ko = new InteractionKeyboardObject(io, ev);\n        io.eventDisposers.setKey(disposerKey, ko);\n\n        switch (keyboard.getEventKey(ev)) {\n          case \"up\":\n            ko.directionY = -1;\n            break;\n\n          case \"down\":\n            ko.directionY = 1;\n            break;\n\n          case \"left\":\n            ko.directionX = -1;\n            break;\n\n          case \"right\":\n            ko.directionX = 1;\n            break;\n        }\n      }\n    }\n  };\n  /**\r\n   * Dispatches related events when the keyboard key is realeasd.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An original keyboard event\r\n   */\n\n\n  Interaction.prototype.handleGlobalKeyUp = function (ev) {\n    var disposerKey = \"interactionKeyboardObject\";\n\n    if (this.focusedObject) {\n      var disposer = this.focusedObject.eventDisposers.getKey(disposerKey);\n\n      if (disposer != null) {\n        // Prevent scrolling of the document\n        ev.preventDefault(); // Dispose stuff\n\n        disposer.dispose();\n        this.focusedObject.eventDisposers.removeKey(disposerKey);\n      } // Does focused object have \"hit\" event?\n\n\n      if (keyboard.isKey(ev, \"enter\") && this.focusedObject.sprite && !this.focusedObject.sprite.events.isEnabled(\"toggled\")) {\n        if (this.focusedObject.sprite.events.isEnabled(\"hit\")) {\n          this.focusedObject.dispatchImmediately(\"hit\");\n        } else if (this.focusedObject.sprite.showTooltipOn == \"hit\") {\n          this.focusedObject.dispatchImmediately(\"up\");\n        }\n      }\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Global pointer-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Handler for a global \"pointermove\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalPointerMove = function (ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev); // Update current point position\n\n    pointer.point = this.getPointerPoint(ev); // Prepare and fire global event\n\n    if (this.events.isEnabled(\"track\") && !system.isPaused) {\n      var imev = {\n        type: \"track\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"track\", imev);\n    } // Track\n\n\n    this.addBreadCrumb(pointer, pointer.point); // Process further\n\n    this.handleGlobalMove(pointer, ev);\n  };\n  /**\r\n   * Handler for a global \"pointerdown\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalPointerDown = function (ev) {\n    // Remove delayed hovers\n    this.processDelayed(); // Get pointer\n\n    var pointer = this.getPointer(ev); // Prepare and fire global event\n\n    if (this.events.isEnabled(\"down\") && !system.isPaused) {\n      var imev = {\n        type: \"down\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"down\", imev);\n    }\n  };\n  /**\r\n   * Prevents touch action from firing.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n\n  Interaction.prototype.preventTouchAction = function (ev) {\n    if (!ev.defaultPrevented) {\n      ev.preventDefault();\n    }\n  };\n  /**\r\n   * Handler for a global \"pointerup\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalPointerUp = function (ev, cancelled) {\n    if (cancelled === void 0) {\n      cancelled = false;\n    } // Get pointer\n\n\n    var pointer = this.getPointer(ev); // Prepare and fire global event\n\n    if (this.events.isEnabled(\"up\") && !system.isPaused) {\n      var imev = {\n        type: \"up\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"up\", imev);\n    } // Process further\n\n\n    this.handleGlobalUp(pointer, ev, cancelled);\n  };\n  /**\r\n  * ==========================================================================\r\n  * Global touch-related even handlers\r\n  * ==========================================================================\r\n  */\n\n  /**\r\n   * Handler for a global \"touchmove\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalTouchMove = function (ev) {\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]); // Update current point position\n\n      pointer.point = this.getPointerPoint(ev.changedTouches[i]); // Prepare and fire global event\n\n      if (this.events.isEnabled(\"track\") && !system.isPaused) {\n        var imev = {\n          type: \"track\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"track\", imev);\n      } // Track\n\n\n      this.addBreadCrumb(pointer, pointer.point); // Process further\n\n      this.handleGlobalMove(pointer, ev);\n    }\n  };\n  /**\r\n   * Handler for a global \"touchstart\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalTouchStart = function (ev) {\n    // Remove delayed hovers\n    this.processDelayed(); // Process each changed touch point\n\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]); // Prepare and fire global event\n\n      if (!this._usePointerEventsOnly && this.events.isEnabled(\"down\") && !system.isPaused) {\n        var imev = {\n          type: \"down\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"down\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handler for a global \"touchend\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n\n  Interaction.prototype.handleGlobalTouchEnd = function (ev) {\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]); // Prepare and fire global event\n\n      if (this.events.isEnabled(\"up\") && !system.isPaused) {\n        var imev = {\n          type: \"up\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"up\", imev);\n      } // Handle element-related events\n\n\n      this.handleGlobalUp(pointer, ev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Element-specific pointer-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Handles event when pointer is over [[InteractionObject]] and button is\r\n   * pressed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handlePointerDown = function (io, ev) {\n    // Stop further propagation so we don't get multiple triggers on hybrid\n    // devices (both mouse and touch capabilities)\n    //ev.preventDefault();\n    //ev.stopPropagation();\n    //if (ev.defaultPrevented) {\n    //}\n    // Get pointer\n    var pointer = this.getPointer(ev); // Ignore if it's anything but mouse's primary button\n\n    if (!pointer.touch && ev.which != 1 && ev.which != 3) {\n      return;\n    } // Set mouse button\n\n\n    pointer.button = ev.which; // Reset pointer\n\n    this.resetPointer(pointer, ev); // Process down\n\n    this.handleDown(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when [[InteractionObject]] is hovered by a mouse pointer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handlePointerOver = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev); // Process down\n\n    this.handleOver(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when [[InteractionObject]] loses hover from a mouse pointer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handlePointerOut = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev); // Process down\n\n    this.handleOut(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when mouse wheel is crolled over the [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel\r\n   */\n\n\n  Interaction.prototype.handleMouseWheel = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev); // Update current point position\n\n    pointer.point = this.getPointerPoint(ev); // Init delta values\n\n    var deltaX = 0,\n        deltaY = 0; // Set up modifier\n    // This is needed because FireFox reports wheel deltas in \"lines\" instead\n    // of pixels so we have to approximate pixel value\n\n    var mod = 1;\n\n    if (ev.deltaMode == 1) {\n      mod = 50;\n    } // Adjust configurable sensitivity\n\n\n    mod *= this.getMouseOption(io, \"sensitivity\"); // Calculate deltas\n\n    if (ev instanceof WheelEvent) {\n      deltaX = Math.round(-1 * ev.wheelDeltaX || ev.deltaX) * mod;\n      deltaY = Math.round(-1 * ev.wheelDeltaY || ev.deltaY) * mod;\n    } else {\n      throw new Error(\"Invalid event type\");\n    } // Handle the event\n\n\n    this.handleWheel(io, pointer, deltaX, deltaY, ev);\n  };\n  /**\r\n   * ==========================================================================\r\n   * Element-specific touch-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n    * Handles an event when an [[InteractionObject]] is touched on a touch\r\n    * device.\r\n    *\r\n    * @ignore Exclude from docs\r\n    * @param io  Element\r\n    * @param ev  Original event\r\n    */\n\n\n  Interaction.prototype.handleTouchDown = function (io, ev) {\n    // Stop further propagation so we don't get multiple triggers on hybrid\n    // devices (both mouse and touch capabilities)\n    //this.maybePreventDefault(io, ev);\n    //return;\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]);\n      this.maybePreventDefault(io, ev, pointer); // Reset pointer\n\n      this.resetPointer(pointer, ev.changedTouches[i]); // Process down\n\n      this.handleDown(io, pointer, ev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Universal handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Handles click/tap. Checks for doublehit.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleHit = function (io, pointer, ev) {\n    // Check if this is a double-hit\n    var now = $time.getTime();\n\n    if (io.lastHit && io.lastHit >= now - this.getHitOption(io, \"doubleHitTime\")) {\n      // Yup - it's a double-hit\n      // Cancel the hit\n      //clearTimeout(io.lastHitPointer.hitTimeout);\n      // If it happened too fast it probably means that hybrid device just\n      // generated two events for the same tap\n      if (now - io.lastHit < 100) {\n        // Ignore\n        return;\n      } // Clear last hit\n\n\n      io.lastHit = undefined;\n      io.lastHitPointer = undefined; // Dispatch event\n\n      if (io.events.isEnabled(\"doublehit\") && !system.isPaused) {\n        var imev = {\n          type: \"doublehit\",\n          target: io,\n          point: pointer.point,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"doublehit\", imev);\n      }\n    } else {\n      // Log last hit\n      io.lastHit = now;\n      io.lastHitPointer = pointer;\n\n      if (pointer.button === 3) {\n        // Execute HIT now\n        if (io.events.isEnabled(\"rightclick\") && !system.isPaused) {\n          var imev = {\n            type: \"rightclick\",\n            target: io,\n            event: ev\n          };\n          io.events.dispatchImmediately(\"rightclick\", imev);\n        }\n      } else {\n        if (io.events.isEnabled(\"hit\") && !system.isPaused) {\n          var imev = {\n            type: \"hit\",\n            target: io,\n            event: ev,\n            point: pointer.point,\n            touch: pointer.touch\n          };\n          io.events.dispatchImmediately(\"hit\", imev);\n        }\n      }\n    }\n  };\n  /**\r\n   * Handles pointer hovering over [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   * @param soft     Invoked by helper function\r\n   */\n\n\n  Interaction.prototype.handleOver = function (io, pointer, ev, soft) {\n    if (soft === void 0) {\n      soft = false;\n    }\n\n    if (!io.hoverable) {\n      return;\n    }\n\n    var hoversPaused = false;\n\n    if (this.shouldCancelHovers(pointer) && this.areTransformed() && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\n      hoversPaused = true;\n      this.cancelAllHovers(ev);\n    } // Remove any delayed outs\n\n\n    this.processDelayed(); // Add pointer\n\n    io.overPointers.moveValue(pointer); // Check if object is not yet hovered\n\n    if (!io.isRealHover) {\n      // Set element as hovered\n      if (!hoversPaused) {\n        io.isHover = true;\n        io.isRealHover = true;\n        this.overObjects.moveValue(io);\n      } // Generate body track event. This is needed so that if element loads\n      // under unmoved mouse cursor, we still need all the actions that are\n      // required to happen to kick in.\n\n\n      this.handleTrack(this.body, pointer, ev, true); // Event\n\n      if (io.events.isEnabled(\"over\") && !system.isPaused && !hoversPaused) {\n        var imev = {\n          type: \"over\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"over\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles when [[InteractionObject]] is no longer hovered.\r\n   *\r\n   * If `soft = true`, this means that method is being invoked by some other\r\n   * code, not hard \"out\" function, like `handleUp` which implies we need to\r\n   * run additional checks before unhovering the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   * @param soft     Invoked by helper function\r\n   * @param force    Force imediate out\r\n   */\n\n\n  Interaction.prototype.handleOut = function (io, pointer, ev, soft, force) {\n    var _this = this;\n\n    if (soft === void 0) {\n      soft = false;\n    }\n\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!io.hoverable) {\n      return;\n    } // Remove pointer\n\n\n    io.overPointers.removeValue(pointer); // Check if element is still hovered\n\n    if (io.isHover && (!io.hasDelayedOut || force)) {\n      // Should we run additional checks?\n      if (soft && io.overPointers.length) {\n        // There are still pointers hovering - don't do anything else and\n        // wait until either no over pointers are there or we get a hard out\n        // event.\n        return;\n      } // Should we delay \"out\" if this is happening on a touch device?\n\n\n      if (pointer.touch && !force && !this.old(pointer)) {\n        // This is a touch pointer, and it hasn't moved, let's pretend\n        // the object is still hovered, and act as per \"behavior\" setting\n        var behavior = this.getHoverOption(io, \"touchOutBehavior\");\n\n        if (behavior == \"leave\") {\n          // Set to \"leave\", so we do not execute any \"out\" event.\n          // It will be handled by any other interaction that happens\n          // afterwards.\n          this._delayedEvents.out.push({\n            type: \"out\",\n            io: io,\n            pointer: pointer,\n            event: ev,\n            keepUntil: $time.getTime() + 500\n          });\n\n          io.hasDelayedOut = true;\n          return;\n        } else if (behavior == \"delay\" && this.getHoverOption(io, \"touchOutDelay\")) {\n          this._delayedEvents.out.push({\n            type: \"out\",\n            io: io,\n            pointer: pointer,\n            event: ev,\n            keepUntil: $time.getTime() + 500,\n            timeout: this.setTimeout(function () {\n              _this.handleOut(io, pointer, ev, true);\n            }, this.getHoverOption(io, \"touchOutDelay\"))\n          });\n\n          return;\n        } else {// Nothing for \"remove\" - that's how it works \"out-of-the-box\"\n        }\n      } // Set element as not hovered\n\n\n      io.isHover = false;\n      this.overObjects.removeValue(io); // Invoke event\n\n      if (!io.isDisposed() && io.events.isEnabled(\"out\") && !system.isPaused) {\n        var imev = {\n          type: \"out\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"out\", imev);\n      } // Reset object from lefover delayed outs, pointers\n\n\n      io.overPointers.clear();\n      io.hasDelayedOut = false; // @todo (clean delayed)\n    }\n  };\n  /**\r\n   * Processes dalyed events, such as \"out\" event that was initiated for\r\n   * elements by touch.\r\n   */\n\n\n  Interaction.prototype.processDelayed = function () {\n    var delayedEvent;\n\n    while (true) {\n      delayedEvent = this._delayedEvents.out.pop();\n\n      if (!delayedEvent) {\n        break;\n      }\n\n      if (delayedEvent.timeout) {\n        delayedEvent.timeout.dispose();\n      }\n\n      this.handleOut(delayedEvent.io, delayedEvent.pointer, delayedEvent.event, false, true);\n    }\n  };\n  /**\r\n   * Performs tasks on pointer down.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleDown = function (io, pointer, ev) {\n    // Need to prevent default event from happening on transformable objects\n    this.maybePreventDefault(io, ev, pointer); // Stop inertia animations if they're currently being played out\n\n    if (io.inert) {\n      this.stopInertia(io);\n    } // Trigger hover because some touch devices won't trigger over events\n    // on their own\n\n\n    this.handleOver(io, pointer, ev, true); // Add pointer to list\n\n    io.downPointers.moveValue(pointer); // Apply styles if necessary\n\n    this.applyCursorDownStyle(io, pointer); // Check if object is already down\n\n    if (!io.isDown) {\n      // Lose focus if needed\n      if (io.focusable !== false && this.getHitOption(io, \"noFocus\") && this.focusedObject) {\n        $dom.blur();\n      } // Set object as hovered\n\n\n      io.isDown = true;\n      this.downObjects.moveValue(io); // Prep object for dragging and/or resizing\n\n      if (io.draggable) {\n        this.processDragStart(io, pointer, ev);\n      }\n\n      if (io.resizable) {\n        this.processResizeStart(io, pointer, ev);\n      }\n    } // Dispatch \"down\" event\n\n\n    if (io.events.isEnabled(\"down\") && !system.isPaused) {\n      var imev = {\n        type: \"down\",\n        target: io,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"down\", imev);\n    }\n  };\n  /**\r\n   * Performs tasks on pointer up.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleGlobalUp = function (pointer, ev, cancelled) {\n    var _this = this;\n\n    if (cancelled === void 0) {\n      cancelled = false;\n    }\n\n    var sorted = this.downObjects.values.slice();\n    sorted.sort(function (x, y) {\n      if (x && y) {\n        var pos = x.element.compareDocumentPosition(y.element);\n\n        if (pos & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n          return 1;\n        } else if (pos & Node.DOCUMENT_POSITION_CONTAINS) {\n          return -1;\n        } else {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    }); // Process all down objects\n\n    $array.each(sorted, function (io) {\n      // Check if this particular pointer is pressing down\n      // on object\n      if (io && io.downPointers.contains(pointer)) {\n        _this.handleUp(io, pointer, ev, cancelled);\n      }\n    });\n  };\n  /**\r\n   * Simulates all pointers being up once mouse leaves document area.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleDocumentLeave = function (ev) {\n    var _this = this; // Process all down objects\n\n\n    $iter.each(this.downObjects.backwards().iterator(), function (io) {\n      io.downPointers.each(function (pointer) {\n        _this.handleUp(io, pointer, ev);\n      });\n    });\n  };\n  /**\r\n   * Handles when [[InteractionObject]] is no longer hovered.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleUp = function (io, pointer, ev, cancelled) {\n    if (cancelled === void 0) {\n      cancelled = false;\n    } // Restore cursor style\n\n\n    this.restoreCursorDownStyle(io, pointer); // Remove pointer from the list\n\n    io.downPointers.removeValue(pointer); // Trigger out because some touch devices won't trigger out events\n    // on their own\n\n    if (pointer.touch || this._useTouchEventsOnly) {\n      this.handleOut(io, pointer, ev, true);\n    } // Check if object still down\n\n\n    if (io.isDown) {\n      // Check if there are no other pointers hovering this element\n      if (io.downPointers.length == 0) {\n        // Set element as no longer down\n        io.isDown = false;\n        this.downObjects.removeValue(io);\n      } // Dispatch \"up\" event\n\n\n      if (io.events.isEnabled(\"up\") && !system.isPaused) {\n        var imev = {\n          type: \"up\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"up\", imev);\n      } // Check if this was not a cancelled event.\n      // If event was canelled (which might happen if gesture resulted in\n      // navigation or page scroll) there's no point in triggering hit and\n      // other actions.\n\n\n      if (!cancelled) {\n        // Handle swiping-related stuff\n        if (io.swipeable && this.swiped(io, pointer)) {\n          // Swiped - nothing else should happen\n          this.handleSwipe(io, pointer, ev);\n        } else {\n          // Check if it maybe a click\n          if (io.clickable && !this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\n            this.handleHit(io, pointer, ev);\n          } // Handle inertia\n\n\n          if (io.inert && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\n            this.handleInertia(io, pointer);\n          } else if (io.draggable) {\n            this.processDragStop(io, pointer, ev);\n          }\n\n          if (io.resizable) {\n            this.processResizeStop(io, pointer, ev);\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Checks if event needs to be prevented on draggable and such items, so that\r\n   * touch gestures like navigation and scroll do not kick in.\r\n   *\r\n   * @param io  Object\r\n   * @param ev  Event\r\n   */\n\n\n  Interaction.prototype.maybePreventDefault = function (io, ev, pointer) {\n    if ($type.hasValue(ev) && (io.draggable || io.swipeable || io.trackable || io.resizable) && !this.isGlobalElement(io) && ev.cancelable !== false && (!io.isTouchProtected || !pointer || !pointer.touch)) {\n      ev.preventDefault();\n    }\n  };\n  /**\r\n   * Cancels all hovers on all currently hovered objects.\r\n   *\r\n   * @param  pointer  Pointer\r\n   * @param  ev       Event\r\n   */\n\n\n  Interaction.prototype.cancelAllHovers = function (ev) {\n    var _this = this; //this.overObjects.each((io) => {\n\n\n    $iter.each(this.overObjects.backwards().iterator(), function (io) {\n      if (io) {\n        var pointer = io.overPointers.getIndex(0);\n\n        _this.handleOut(io, pointer, ev, true, true);\n      }\n    });\n  };\n  /**\r\n   * Checks if hovers should be cancelled on transform as per global options.\r\n   * @param   pointer  Pointer\r\n   * @return           Cancel?\r\n   */\n\n\n  Interaction.prototype.shouldCancelHovers = function (pointer) {\n    return options.disableHoverOnTransform == \"always\" || options.disableHoverOnTransform == \"touch\" && pointer.touch;\n  };\n  /**\r\n   * Handles pointer move.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleGlobalMove = function (pointer, ev) {\n    var _this = this; // Process hovered elements\n    // We check if the element became unhovered without reporting the mouseout\n    // event. (it happens in some cases)\n\n\n    if (!pointer.touch) {\n      var target_1 = $dom.eventTarget(pointer.lastEvent);\n      $iter.each(this.overObjects.backwards().iterator(), function (io) {\n        // Is this pointer relevant to element?\n        if (io && io.overPointers.contains(pointer) && io.hoverable) {\n          // Check if the element is still hovered\n          var reset = false;\n\n          if (io.element && pointer.lastEvent) {\n            if (!$dom.contains(io.element, target_1)) {\n              reset = true;\n            }\n          } else {\n            reset = true;\n          }\n\n          if (reset) {\n            _this.handleOut(io, pointer, ev, true);\n          }\n        }\n      });\n    } // Process down elements\n\n\n    $iter.each(this.transformedObjects.backwards().iterator(), function (io) {\n      // Is this pointer relevant to element?\n      if (io.downPointers.contains(pointer) && // Swipe still happening?\n      !(io.swipeable && _this.swiping(io, pointer)) && (io.draggable || io.resizable)) {\n        _this.handleTransform(io, ev);\n      }\n    }); // Process tracked elements\n\n    $iter.each(this.trackedObjects.backwards().iterator(), function (io) {\n      // Is this pointer relevant to element?\n      if (!io.overPointers.contains(pointer)) {\n        _this.handleTrack(io, pointer, ev);\n      }\n    });\n  };\n  /**\r\n   * Handles reporting of pointer movement.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io        Element\r\n   * @param pointer    Pointer\r\n   * @param ev         Original event\r\n   * @param skipCheck  Sould we skip check if cursor actually moved\r\n   */\n\n\n  Interaction.prototype.handleTrack = function (io, pointer, ev, skipCheck) {\n    if (skipCheck === void 0) {\n      skipCheck = false;\n    } // Do nothing if the cursor did not actually move\n\n\n    if (!skipCheck && !this.moved(pointer, 0)) {\n      return;\n    } // Initiate TRACK event\n\n\n    if (io.events.isEnabled(\"track\") && !system.isPaused) {\n      var imev = {\n        type: \"track\",\n        target: io,\n        event: ev,\n        point: pointer.point,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"track\", imev);\n    }\n  };\n  /**\r\n   * Handles swipe action.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleSwipe = function (io, pointer, ev) {\n    // We pass in InteractionEvent with shift in mouse coordinates\n    // between when the drag started and ended\n    if (io.events.isEnabled(\"swipe\") && !system.isPaused) {\n      var imev = {\n        type: \"swipe\",\n        target: io,\n        event: ev,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"swipe\", imev);\n    }\n\n    if (pointer.startPoint.x < pointer.point.x) {\n      if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\n        var imev = {\n          type: \"swiperight\",\n          target: io,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"swiperight\", imev);\n      }\n    } else {\n      if (io.events.isEnabled(\"swipeleft\") && !system.isPaused) {\n        var imev = {\n          type: \"swipeleft\",\n          target: io,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"swipeleft\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles event triggering for wheel rotation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param deltaX   Horizontal shift\r\n   * @param deltaY   Vertical shift\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.handleWheel = function (io, pointer, deltaX, deltaY, ev) {\n    var shift = {\n      x: deltaX,\n      y: deltaY\n    }; // Trigger generic WHEEL event\n\n    if (io.events.isEnabled(\"wheel\") && !system.isPaused) {\n      io.events.dispatchImmediately(\"wheel\", {\n        type: \"wheel\",\n        target: io,\n        event: ev,\n        point: pointer.point,\n        shift: shift\n      });\n    } // Trigger direction-specific events\n    // Horizontal\n\n\n    if (deltaX < 0) {\n      if (io.events.isEnabled(\"wheelleft\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelleft\", {\n          type: \"wheelleft\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    } else if (deltaX > 0) {\n      if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelright\", {\n          type: \"wheelright\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      } // Vertical\n\n    } else if (deltaY < 0) {\n      if (io.events.isEnabled(\"wheelup\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelup\", {\n          type: \"wheelup\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    } else if (deltaY > 0) {\n      if (io.events.isEnabled(\"wheeldown\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheeldown\", {\n          type: \"wheeldown\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    }\n  };\n  /**\r\n   * Initiates inertia checking sub-routines for different movement types:\r\n   * drag, resize.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite\r\n   * @param pointer\r\n   */\n\n\n  Interaction.prototype.handleInertia = function (io, pointer) {\n    if (io.draggable && io.downPointers.length === 0) {\n      this.handleMoveInertia(io, pointer);\n    }\n\n    if (io.resizable && io.downPointers.length > 1) {\n      this.handleResizeInertia(io, pointer);\n    }\n  };\n  /**\r\n   * Continues moving the element to simulate the effect of inertia. Happens\r\n   * when `inert` and `draggable` object is dragged and then released.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.handleMoveInertia = function (io, pointer) {\n    var interaction = io;\n    var type = \"move\";\n    var point = {\n      \"x\": pointer.point.x,\n      \"y\": pointer.point.y\n    };\n    var startPoint = {\n      \"x\": pointer.startPoint.x,\n      \"y\": pointer.startPoint.y\n    }; // Init inertia object\n\n    var inertia = new Inertia(interaction, type, point, startPoint); // Get inertia data\n\n    var ref = this.getTrailPoint(pointer, $time.getTime() - this.getInertiaOption(io, \"move\", \"time\"));\n\n    if (typeof ref === \"undefined\") {\n      this.processDragStop(io, pointer, pointer.lastUpEvent);\n      return;\n    } // Init animation options\n\n\n    var factor = this.getInertiaOption(io, \"move\", \"factor\");\n    var animationOptions = [{\n      \"to\": pointer.point.x + (pointer.point.x - ref.point.x) * factor,\n      \"property\": \"x\"\n    }, {\n      \"to\": pointer.point.y + (pointer.point.y - ref.point.y) * factor,\n      \"property\": \"y\"\n    }]; // Start animation\n\n    var animation = new Animation(inertia, animationOptions, this.getInertiaOption(io, \"move\", \"duration\"), this.getInertiaOption(io, \"move\", \"easing\")).start();\n\n    this._disposers.push(animation.events.on(\"animationended\", function (ev) {\n      inertia.done();\n    })); // Add inertia object\n\n\n    io.inertias.setKey(\"move\", inertia);\n  };\n  /**\r\n   * Continues resizing of a `resizable` element after it is resized and\r\n   * released.\r\n   *\r\n   * **NOTE:** this is is just a placeholder function. No actual fucntionality\r\n   * is implemented, yet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.handleResizeInertia = function (io, pointer) {// Some day, folks. Some day...\n  };\n  /**\r\n   * Recalculates element's position and size based on position of\r\n   * all its related pointers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n\n\n  Interaction.prototype.handleTransform = function (io, ev) {\n    // Get primary pointer and its respective points\n    var pointer1 = io.downPointers.getIndex(0);\n    var point1 = null;\n    var startPoint1 = null;\n\n    if (pointer1) {\n      point1 = pointer1.point;\n      startPoint1 = pointer1.startPoint;\n    } // Init secondary pointer\n\n\n    var pointer2;\n    var point2;\n    var startPoint2; // Use center of the sprite to simulate \"second\" point of touch\n\n    point2 = {\n      \"x\": io.originalPosition.x,\n      \"y\": io.originalPosition.y\n    };\n    startPoint2 = point2; // Determine if it's a sinngle pointer or multi\n\n    var singlePoint = true;\n\n    for (var i = 1; i < io.downPointers.length; i++) {\n      // Get pointer\n      var nextPointer = io.downPointers.getIndex(i); // Doublecheck if it's not the same pointer by comparing original position\n\n      if (startPoint1.x != nextPointer.startPoint.x && startPoint1.y != nextPointer.startPoint.y) {\n        // Several pointers down\n        singlePoint = false; // Get second pointer\n\n        pointer2 = nextPointer;\n        point2 = pointer2.point;\n        startPoint2 = pointer2.startPoint; // Stop looking\n\n        break;\n      }\n    } // Primary touch point moved?\n\n\n    var pointer1Moved = pointer1 && this.moved(pointer1, 0); // Report DRAG_START if necessary\n\n    if (io.draggable && pointer1 && pointer1.dragStartEvents && pointer1.dragStartEvents.length && pointer1Moved) {\n      if (io.events.isEnabled(\"dragstart\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"dragstart\", pointer1.dragStartEvents.shift());\n      } //delete pointer1.dragStartEvents;\n\n    } // Determine what we do in order of superiority\n\n\n    if (singlePoint && io.draggable) {\n      // We have only one pointer and the Sprite is draggable\n      // There's nothing else to be done - just move it\n      this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\n\n      if (this.shouldCancelHovers(pointer1) && this.moved(pointer1, this.getHitOption(io, \"hitTolerance\"))) {\n        this.cancelAllHovers(ev);\n      }\n    } else {\n      // Check if second touch point moved\n      var pointer2Moved = pointer2 && this.moved(pointer2, 0);\n\n      if (this.shouldCancelHovers(pointer1) && this.moved(pointer1, this.getHitOption(io, \"hitTolerance\")) || this.shouldCancelHovers(pointer2) && this.moved(pointer2, this.getHitOption(io, \"hitTolerance\"))) {\n        this.cancelAllHovers(ev);\n      }\n\n      if (io.draggable && io.resizable) {\n        //this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);\n        this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n        this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n      } else {\n        if (io.draggable) {\n          this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\n        }\n\n        if (io.resizable && (!singlePoint || ev.ctrlKey)) {\n          this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n        }\n      }\n    }\n  };\n  /**\r\n   * Handles movement of the dragged element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io            Element\r\n   * @param point         Current point of the pointer\r\n   * @param startPoint    Starting point of the pointer\r\n   * @param ev            Original event\r\n   * @param pointerMoved  Did pointer move?\r\n   */\n\n\n  Interaction.prototype.handleTransformMove = function (io, point, startPoint, ev, pointerMoved, touch) {\n    if (pointerMoved) {\n      if (io.events.isEnabled(\"drag\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\n        var imev = {\n          type: \"drag\",\n          target: io,\n          event: ev,\n          shift: {\n            \"x\": point.x - startPoint.x,\n            \"y\": point.y - startPoint.y\n          },\n          startPoint: startPoint,\n          point: point,\n          touch: touch\n        };\n        io.events.dispatchImmediately(\"drag\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles resizing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io            Element\r\n   * @param point1        Current position of reference point #1\r\n   * @param startPoint1   Original position of reference point #1\r\n   * @param point2        Current position of reference point #2\r\n   * @param startPoint2   Original position of reference point #2\r\n   * @param ev            Original event\r\n   * @param pointerMoved  Did pointer move?\r\n   */\n\n\n  Interaction.prototype.handleTransformResize = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved, touch) {\n    if (io.events.isEnabled(\"resize\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\n      var imev = {\n        type: \"resize\",\n        target: io,\n        event: ev,\n        scale: $math.getScale(point1, startPoint1, point2, startPoint2),\n        startPoint1: startPoint1,\n        point1: point1,\n        startPoint2: startPoint2,\n        point2: point2,\n        touch: touch\n      };\n      io.events.dispatchImmediately(\"resize\", imev);\n    }\n  };\n  /**\r\n   * Handles all the preparations of the element when it starts to be dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.processDragStart = function (io, pointer, ev) {\n    // Add to draggedObjects\n    this.transformedObjects.moveValue(io);\n\n    if (this.shouldCancelHovers(pointer)) {\n      this.cancelAllHovers(ev);\n    } // Report \"dragstart\"\n\n\n    var imev = {\n      type: \"dragstart\",\n      target: io,\n      event: ev,\n      touch: pointer ? pointer.touch : false\n    }; // Log object that we are starting to drag, so we can check against and\n    // avoid hovers on other objects that might be in the path of movement.\n\n    if (pointer) {\n      pointer.dragTarget = io; //pointer.startPoint = pointer.point;\n    }\n    /**\r\n     * If pointer is set we will not fire the event until the pointer has\r\n     * actually moved. If it's not set we don't have to wait for anything, so we\r\n     * just fire off the event right away.\r\n     */\n\n\n    if (pointer && pointer.dragStartEvents) {\n      pointer.dragStartEvents.push(imev);\n    } else {\n      if (!system.isPaused) {\n        io.dispatchImmediately(\"dragstart\", imev);\n      }\n    }\n  };\n  /**\r\n   * Finishes up element drag operation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.processDragStop = function (io, pointer, ev) {\n    // Pointer set?\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    } // Unset drag object\n\n\n    if (pointer) {\n      pointer.dragTarget = undefined;\n    } // Removed from transformedObjects\n\n\n    this.transformedObjects.removeValue(io); // Unlock document\n    //this.unlockDocument();\n    // Report dragstop\n\n    if (!pointer || this.moved(pointer, 0)) {\n      if (io.events.isEnabled(\"dragstop\") && !system.isPaused) {\n        var imev = {\n          type: \"dragstop\",\n          target: io,\n          touch: pointer ? pointer.touch : false\n        };\n        io.events.dispatchImmediately(\"dragstop\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles all the preparations of the element when it starts to be resized.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.processResizeStart = function (io, pointer, ev) {\n    // Add to draggedObjects\n    this.transformedObjects.moveValue(io);\n  };\n  /**\r\n   * Finishes up element drag operation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n\n\n  Interaction.prototype.processResizeStop = function (io, pointer, ev) {\n    // Removed from transformedObjects\n    this.transformedObjects.removeValue(io);\n  };\n  /**\r\n   * ==========================================================================\r\n   * Controls for InteractionObjects initiating directly\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Manually triggers drag start on the element. Could be useful in cases\r\n   * where tracking or dragging one element can also influence dragging another\r\n   * element.\r\n   *\r\n   * Passing in `pointer` reference is advisable. If not passed in it will try\r\n   * to determine which pointer to attach to. However, it's better to specify\r\n   * it explicitly.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.dragStart = function (io, pointer) {\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    }\n\n    if (pointer) {\n      this.handleDown(io, pointer, pointer.lastDownEvent);\n    }\n  };\n  /**\r\n   * Manually ends drag on the element.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.dragStop = function (io, pointer, cancelled) {\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    }\n\n    if (pointer && !cancelled) {\n      this.handleGlobalUp(pointer, pointer.lastUpEvent, cancelled);\n    }\n  };\n  /**\r\n   * This method uses a fuzzy logic to find the pointer to be used for dragging.\r\n   * Beware that this is not a rock-solid solution. If there are a few objects\r\n   * being dragged at the same time, you may get unexepected results.\r\n   *\r\n   * @param io  InteractionObject to get pointers from\r\n   * @return Pointer currently being used for dragging\r\n   */\n\n\n  Interaction.prototype.getDragPointer = function (io) {\n    if (io) {\n      // InteractionObject is supplied\n      // Use it's first down pointer\n      return io.downPointers.getIndex(0);\n    } else if (this.transformedObjects.length) {\n      // Use first dragged object\n      return this.getDragPointer(this.transformedObjects.getIndex(0));\n    } else {\n      return undefined;\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Utils\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Returns pointer id for the given event object.\r\n   *\r\n   * @param ev  Event\r\n   * @return Pointer ID\r\n   */\n\n\n  Interaction.prototype.getPointerId = function (ev) {\n    var id = \"\";\n\n    if ($type.hasValue(ev.identifier)) {\n      id = \"\" + ev.identifier;\n    } else if ($type.hasValue(ev.pointerId)) {\n      id = \"\" + ev.pointerId;\n    } else {\n      id = \"m\";\n    }\n\n    return id.replace(\"-\", \"\");\n  };\n  /**\r\n   * Returns a cursor position of the event.\r\n   *\r\n   * @param ev  Original event\r\n   * @return Event point\r\n   */\n\n\n  Interaction.prototype.getPointerPoint = function (ev) {\n    return {\n      \"x\": ev.clientX,\n      \"y\": ev.clientY\n    };\n  };\n  /**\r\n   * Returns [[Pointer]] object that is associated with the Event.\r\n   *\r\n   * If no such [[Pointer]] object exists, it is created.\r\n   *\r\n   * @param ev  Event\r\n   * @return Pointer\r\n   */\n\n\n  Interaction.prototype.getPointer = function (ev) {\n    // Get pointer id\n    var id = this.getPointerId(ev); // Get current coordinates\n\n    var point = this.getPointerPoint(ev); // Look for the pointer in the Dictionary if it maybe already exists\n\n    var pointer;\n\n    if (this.pointers.hasKey(id)) {\n      // We already have such pointer\n      pointer = this.pointers.getKey(id); // We need this, because Edge reuses pointer ids across touch and mouse\n\n      pointer.touch = this.isPointerTouch(ev); // Reset pointer\n      //pointer.point = point;\n    } else {\n      // Init pointer\n      pointer = {\n        \"id\": id,\n        //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"pointer\"),\n        //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"mouse\"),\n        \"touch\": this.isPointerTouch(ev),\n        \"startPoint\": point,\n        \"startTime\": $time.getTime(),\n        \"point\": point,\n        \"track\": [],\n        \"swipeCanceled\": false,\n        \"dragStartEvents\": []\n      }; // Add first breadcrumb\n\n      this.addBreadCrumb(pointer, point); // Add for re-use later\n\n      this.pointers.setKey(id, pointer);\n    } // Log last event\n\n\n    pointer.lastEvent = ev;\n    this.lastPointer = pointer;\n    return pointer;\n  };\n  /**\r\n   * Determines if pointer event originated from a touch pointer or mouse.\r\n   *\r\n   * @param ev  Original event\r\n   * @return Touch pointer?\r\n   */\n\n\n  Interaction.prototype.isPointerTouch = function (ev) {\n    if (typeof Touch !== \"undefined\" && ev instanceof Touch) {\n      return true;\n    } else if (typeof PointerEvent !== \"undefined\" && ev instanceof PointerEvent && $type.hasValue(ev.pointerType)) {\n      switch (ev.pointerType) {\n        case \"touch\":\n        case \"pen\":\n        case 2:\n          return true;\n\n        case \"mouse\":\n        case 4:\n          return false;\n\n        default:\n          return !(ev instanceof MouseEvent);\n      }\n    } else if ($type.hasValue(ev.type)) {\n      if (ev.type.match(/^mouse/)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Resets the poiner to original state, i.e. cleans movement information,\r\n   * starting point, etc.\r\n   *\r\n   * @param pointer Pointer\r\n   */\n\n\n  Interaction.prototype.resetPointer = function (pointer, ev) {\n    // Get current coordinates\n    var point = this.getPointerPoint(ev);\n    ;\n    pointer.startTime = $time.getTime();\n    pointer.startPoint = {\n      x: point.x,\n      y: point.y\n    };\n    pointer.point = {\n      x: point.x,\n      y: point.y\n    };\n    pointer.track = [];\n    pointer.swipeCanceled = false; //clearTimeout(pointer.swipeTimeout);\n    //clearTimeout(pointer.holdTimeout);\n  };\n  /**\r\n   * Adds a \"breadcrumb\" point to the [[Pointer]] to log its movement path.\r\n   *\r\n   * @param pointer  Pointer\r\n   * @param point    Point coordinates\r\n   */\n\n\n  Interaction.prototype.addBreadCrumb = function (pointer, point) {\n    pointer.track.push({\n      \"timestamp\": $time.getTime(),\n      \"point\": point\n    });\n  };\n  /**\r\n   * Prepares the document for various touch-related operations.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.lockDocument = function () {\n    this.prepElement(this.body);\n  };\n  /**\r\n   * Restores document functionality.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.unlockDocument = function () {\n    if (this.transformedObjects.length == 0) {\n      this.restoreAllStyles(this.body);\n    }\n  };\n  /**\r\n   * Lock element (disable all touch)\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.lockElement = function (io) {\n    this.prepElement(io);\n  };\n  /**\r\n   * Restores element's functionality.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.unlockElement = function (io) {\n    this.restoreAllStyles(io);\n  };\n  /**\r\n   * Locks document's wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.lockWheel = function () {\n    window.addEventListener(this._pointerEvents.wheel, this.wheelLockEvent, this._passiveSupported ? {\n      passive: false\n    } : false);\n  };\n  /**\r\n   * Unlocks document's wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Interaction.prototype.unlockWheel = function () {\n    window.removeEventListener(this._pointerEvents.wheel, this.wheelLockEvent);\n  };\n  /**\r\n   * Checks if top element at pointer's position belongs to the SVG.\r\n   *\r\n   * @ignore Exlude from docs\r\n   * @param pointer  Pointer\r\n   * @param svg      The <svg> element\r\n   * @param id       A unique identifier of the object that is checking for locality\r\n   * @return Belongs to SVG\r\n   */\n\n\n  Interaction.prototype.isLocalElement = function (pointer, svg, id) {\n    var cached = this.getCache(\"local_pointer_\" + pointer.id);\n\n    if ($type.hasValue(cached)) {\n      return cached;\n    }\n\n    var doc = $dom.getRoot(svg) || document;\n\n    if (doc.elementFromPoint) {\n      var target = doc.elementFromPoint(pointer.point.x, pointer.point.y);\n      var local = target && $dom.contains(svg, target);\n      this.setCache(\"local_pointer_\" + pointer.id + \"_\" + id, local, 100);\n      return local;\n    }\n\n    return false;\n  };\n  /**\r\n   * A function that cancels mouse wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev  Event object\r\n   * @return Returns `false` to cancel\r\n   */\n\n\n  Interaction.prototype.wheelLockEvent = function (ev) {\n    ev.preventDefault();\n    return false;\n  };\n  /**\r\n   * Applies a set of styles to an element. Stores the original styles so they\r\n   * can be restored later.\r\n   *\r\n   * @ignore\r\n   * @param io      Element\r\n   */\n\n\n  Interaction.prototype.prepElement = function (io) {\n    var el = io.element;\n\n    if (el) {\n      // Define possible props\n      var props = [\"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\", \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\", \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\", \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\", \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\", \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"];\n\n      for (var i = 0; i < props.length; i++) {\n        if (props[i] in el.style) {\n          this.setTemporaryStyle(io, props[i], \"none\");\n        }\n      } // Remove iOS-specific selection;\n\n\n      this.setTemporaryStyle(io, \"tapHighlightColor\", \"rgba(0, 0, 0, 0)\"); //this.setTemporaryStyle(io, \"webkitOverflowScrolling\", \"none\");\n    }\n  };\n  /**\r\n   * Restores replaced styles\r\n   *\r\n   * @ignore\r\n   * @param  io  Element\r\n   */\n\n\n  Interaction.prototype.unprepElement = function (io) {\n    var el = io.element;\n\n    if (el) {\n      // Define possible props\n      var props = [\"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\", \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\", \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\", \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\", \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\", \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"];\n\n      for (var i = 0; i < props.length; i++) {\n        if (props[i] in el.style) {\n          this.restoreStyle(io, props[i]);\n        }\n      } // Remove iOS-specific selection;\n\n\n      this.restoreStyle(io, \"tapHighlightColor\"); //this.restoreStyle(io, \"webkitOverflowScrolling\");\n    }\n  };\n  /**\r\n   * Returns an option associated with hit events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getHitOption = function (io, option) {\n    var res = io.hitOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.hitOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option associated with hover events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getHoverOption = function (io, option) {\n    var res = io.hoverOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.hoverOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option associated with swipe events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getSwipeOption = function (io, option) {\n    var res = io.swipeOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.swipeOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option for keyboard.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getKeyboardOption = function (io, option) {\n    var res = io.keyboardOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.keyboardOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option for mouse.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getMouseOption = function (io, option) {\n    var res = io.mouseOptions[option];\n\n    if (typeof res === \"undefined\") {\n      res = this.mouseOptions[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns an option associated with inertia.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param type    Inertia type\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n\n\n  Interaction.prototype.getInertiaOption = function (io, type, option) {\n    var options = io.inertiaOptions.getKey(type);\n    var res;\n\n    if (options && $type.hasValue(options[option])) {\n      res = options[option];\n    } else {\n      res = this.inertiaOptions.getKey(type)[option];\n    }\n\n    return res;\n  };\n  /**\r\n   * Stops currently going on inertia. Useful if inertia is currently being\r\n   * animated and the object is being interacted with.\r\n   *\r\n   * @param io Element\r\n   */\n\n\n  Interaction.prototype.stopInertia = function (io) {\n    var x;\n    var inertias = [\"move\", \"resize\"];\n\n    for (var i = 0; i < inertias.length; i++) {\n      x = inertias[i];\n\n      if (io.inertias.hasKey(x)) {\n        var inertia = io.inertias.getKey(x);\n\n        if (inertia) {\n          inertia.dispose(); //io.inertiaAnimations.removeKey(x);\n          //this.processDragStop(io);\n\n          continue;\n        }\n      }\n    }\n  };\n  /**\r\n   * Check if swiping is currently being performed on an object.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer to check\r\n   * @return `true` if swiping\r\n   */\n\n\n  Interaction.prototype.swiping = function (io, pointer) {\n    var now = $time.getTime();\n\n    if (pointer.swipeCanceled || !io.swipeable) {\n      return false;\n    } else if (Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\") && pointer.startTime > now - this.getSwipeOption(io, \"time\")) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Returns `true` if a successfull swipe action was performed on an element.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @return Swiped?\r\n   */\n\n\n  Interaction.prototype.swiped = function (io, pointer) {\n    var now = $time.getTime();\n\n    if (pointer.swipeCanceled) {\n      return false;\n    } else if (Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, \"horizontalThreshold\") && Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\") && pointer.startTime > now - this.getSwipeOption(io, \"time\")) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Applies style to mouse cursor based on its stage in relation to\r\n   * [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param Element\r\n   */\n\n\n  Interaction.prototype.applyCursorOverStyle = function (io) {\n    // Get sprite's cursor ooptions\n    var options = io.cursorOptions;\n\n    if (!$type.hasValue(options.overStyle)) {\n      return;\n    } // Apply cursor down styles\n\n\n    for (var i = 0; i < options.overStyle.length; i++) {\n      $dom.setStyle(io.element, options.overStyle[i].property, options.overStyle[i].value);\n    }\n  };\n  /**\r\n   * Applies style to mouse cursor based on its stage in relation to\r\n   * [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.applyCursorDownStyle = function (io, pointer) {\n    // Not applicable for touch pointers since they don't display a cursor\n    if (pointer && pointer.touch) {\n      return;\n    }\n\n    var downStyle = io.cursorOptions.downStyle; // Is down?\n\n    if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\n      // Apply cursor down styles\n      for (var i = 0; i < downStyle.length; i++) {\n        this.setTemporaryStyle(this.body, downStyle[i].property, downStyle[i].value);\n        this.setTemporaryStyle(io, downStyle[i].property, downStyle[i].value);\n      }\n    }\n  };\n  /**\r\n   * Restores original cursor style for the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n\n\n  Interaction.prototype.restoreCursorDownStyle = function (io, pointer) {\n    // Not applicable for touch pointers since they don't display a cursor\n    if (pointer && pointer.touch) {\n      return;\n    }\n\n    var downStyle = io.cursorOptions.downStyle; // Is down?\n\n    if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\n      // Apply cursor down styles\n      for (var i = 0; i < downStyle.length; i++) {\n        this.restoreStyle(this.body, downStyle[i].property);\n        this.restoreStyle(io, downStyle[i].property);\n      }\n    }\n  };\n  /**\r\n   * Sets style on the body of the document.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Style definitions\r\n   */\n\n\n  Interaction.prototype.setGlobalStyle = function (style) {\n    var body = getInteraction().body;\n    var styles = $type.isArray(style) ? style : [style];\n\n    for (var i = 0; i < styles.length; i++) {\n      this.setTemporaryStyle(body, styles[i].property, styles[i].value);\n    }\n  };\n  /**\r\n   * Restores style on the body of the document.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Style definitions\r\n   */\n\n\n  Interaction.prototype.restoreGlobalStyle = function (style) {\n    var body = getInteraction().body;\n    var styles = $type.isArray(style) ? style : [style];\n\n    for (var i = 0; i < styles.length; i++) {\n      this.restoreStyle(body, styles[i].property);\n    }\n  };\n  /**\r\n   * Checks if element is a non-cahrt element.\r\n   *\r\n   * @param io  InteractionObject\r\n   * @return Global element?\r\n   */\n\n\n  Interaction.prototype.isGlobalElement = function (io) {\n    return document.body === io.element;\n  };\n  /**\r\n   * Checks if pointer has moved since it was created.\r\n   *\r\n   * @param pointer    Pointer\r\n   * @param tolerance  Tolerance in pixels\r\n   * @param minTime    Minimum time required for the pointer to be down to be considered moved\r\n   * @return `true` if the pointer has moved\r\n   */\n\n\n  Interaction.prototype.moved = function (pointer, tolerance, minTime) {\n    /*// If there was more time, we don't care if cursor actually moved\r\n    let duration = $time.getTime() - pointer.startTime;\r\n    if ($type.hasValue(minTime) && (minTime > duration)) {\r\n        return false;\r\n    }*/\n    if (minTime === void 0) {\n      minTime = 300;\n    } // That was quick measure shift\n\n\n    var shift = this.getShift(pointer);\n    return Math.abs(shift.x) > tolerance || Math.abs(shift.y) > tolerance;\n  };\n  /**\r\n   * Returns if pointer is \"old\", meaning it has been pressing for more than\r\n   * X milliseconds.\r\n   *\r\n   * @ignore\r\n   * @param pointer  Pointer\r\n   * @param minTime  Minimum time to consider pointer old\r\n   * @return {boolean}\r\n   */\n\n\n  Interaction.prototype.old = function (pointer, minTime) {\n    if (minTime === void 0) {\n      minTime = 300;\n    }\n\n    return $time.getTime() - pointer.startTime > minTime;\n  };\n  /**\r\n   * Returns total a shift in pointers coordinates between its original\r\n   * position and now.\r\n   *\r\n   * @param pointer  Pointer\r\n   * @return Shift in coordinates (x/y)\r\n   */\n\n\n  Interaction.prototype.getShift = function (pointer) {\n    return {\n      \"x\": pointer.startPoint.x - pointer.point.x,\n      \"y\": pointer.startPoint.y - pointer.point.y\n    };\n  };\n  /**\r\n   * Returns a point from [[Pointer]]'s move history at a certain timetamp.\r\n   *\r\n   * @param pointer    Pointer\r\n   * @param timestamp  Timestamp\r\n   * @return Point\r\n   */\n\n\n  Interaction.prototype.getTrailPoint = function (pointer, timestamp) {\n    var res;\n\n    for (var i = 0; i < pointer.track.length; i++) {\n      if (pointer.track[i].timestamp >= timestamp) {\n        res = pointer.track[i];\n        break;\n      }\n    }\n\n    return res;\n  };\n  /**\r\n   * Checks if same pointer already exists in the list.\r\n   *\r\n   * @param list     List to check agains\r\n   * @param pointer  Pointer\r\n   * @return Exists?\r\n   */\n\n\n  Interaction.prototype.pointerExists = function (list, pointer) {\n    var exists = false;\n    list.each(function (item) {\n      if (item == pointer) {\n        return;\n      }\n\n      exists = item.point.x == pointer.point.x && item.point.y == pointer.point.y;\n    });\n    return exists;\n  };\n  /**\r\n   * Returns an [[InteractionObject]] representation of a DOM element.\r\n   *\r\n   * You can use this on any HTML or SVG element, to add interactive features\r\n   * to it.\r\n   *\r\n   * @param element  Element\r\n   * @return InteractionObject\r\n   */\n\n\n  Interaction.prototype.getInteraction = function (element) {\n    return new InteractionObject(element);\n  };\n  /**\r\n   * Sets a style property on an element. Stores original value to be restored\r\n   * later with [[restoreStyle]].\r\n   *\r\n   * @see {@link restoreStyle}\r\n   * @param io        Element\r\n   * @param property  Property\r\n   * @param value     Value\r\n   */\n\n\n  Interaction.prototype.setTemporaryStyle = function (io, property, value) {\n    // Get element\n    //let el = io.element.tagName == \"g\" ? <SVGSVGElement>io.element.parentNode : io.element;\n    var el = io.element; // Save original property if it is set and hasn't been saved before already\n\n    if ($type.hasValue(el.style[property]) && !io.replacedStyles.hasKey(property)) {\n      io.replacedStyles.setKey(property, el.style[property]);\n    } // Replace with the new one\n\n\n    $dom.setStyle(el, property, value);\n  };\n  /**\r\n   * Restores specific style on an element.\r\n   *\r\n   * @param io        Element\r\n   * @param property  Style property\r\n   */\n\n\n  Interaction.prototype.restoreStyle = function (io, property) {\n    // Reset style\n    if (io.replacedStyles.hasKey(property)) {\n      io.element.style[property] = io.replacedStyles.getKey(property);\n      io.replacedStyles.removeKey(property);\n    } else {\n      delete io.element.style[property];\n    }\n  };\n  /**\r\n   * Restore temporarily reset styles on an element.\r\n   *\r\n   * @param io Element\r\n   */\n\n\n  Interaction.prototype.restoreAllStyles = function (io) {\n    $iter.each(io.replacedStyles.iterator(), function (a) {\n      var key = a[0];\n      var value = a[1];\n      io.element.style[key] = value;\n      io.replacedStyles.removeKey(key);\n    });\n  };\n  /**\r\n   * Disposes this object and cleans up after itself.\r\n   */\n\n\n  Interaction.prototype.dispose = function () {\n    if (!this.isDisposed()) {\n      _super.prototype.dispose.call(this);\n\n      this.restoreAllStyles(this.body);\n      this.unlockWheel();\n    }\n  }; // @ts-ignore Used for debugging\n\n\n  Interaction.prototype.log = function (text, ev, io) {\n    var show = true;\n\n    if (show) {\n      // Touchlist?\n      if (ev.changedTouches) {\n        for (var i = 0; i < ev.changedTouches.length; i++) {\n          this.logTouch(text, ev.type, ev.changedTouches[i]);\n        }\n\n        return;\n      } // Get type\n\n\n      var type = \"\";\n\n      if (ev.pointerType) {\n        switch (ev.pointerType) {\n          case 2:\n            type = \"touch\";\n            break;\n\n          case 4:\n            type = \"mouse\";\n            break;\n\n          default:\n            type = ev.pointerType;\n            break;\n        }\n      } else if (typeof TouchEvent != \"undefined\" && ev instanceof TouchEvent) {\n        type = \"touch\";\n      } else if (ev.type.match(/^mouse/)) {\n        type = \"mouse\";\n      } else {\n        type = \"???\";\n      } // Get ID\n\n\n      var id = \"\";\n\n      if ($type.hasValue(ev.identifier)) {\n        id = ev.identifier;\n      } else if ($type.hasValue(ev.pointerId)) {\n        id = ev.pointerId;\n      } else {\n        id = \"???\";\n      }\n\n      if (io) {\n        console.log(text + \" (\" + io.uid + \")  \" + ev.type + \"  \" + type + \"  \" + id);\n      } else {\n        console.log(text + \"  \" + ev.type + \"  \" + type + \"  \" + id);\n      }\n    }\n  };\n  /**\r\n   * Checks whether there are currently any objects being transformed (dragged\r\n   * or resized).\r\n   *\r\n   * If `except` is set, that object will be ignored.\r\n   *\r\n   * @since 4.9.3\r\n   * @param   except  Ignore this object(s)\r\n   * @return          Objects are being transformed\r\n   */\n\n\n  Interaction.prototype.areTransformed = function (except) {\n    var count = this.transformedObjects.length;\n\n    if (except) {\n      var ex = $type.isArray(except) ? except : [except];\n\n      for (var i = 0; i < ex.length; i++) {\n        if (this.transformedObjects.contains(ex[i])) {\n          count--;\n        }\n      }\n    }\n\n    return count > 0;\n  };\n  /**\r\n   * Log.\r\n   */\n\n\n  Interaction.prototype.logTouch = function (text, type, ev) {\n    console.log(text + \"  \" + type + \"  \" + \"touch\" + \"  \" + ev.identifier);\n  };\n\n  Object.defineProperty(Interaction, \"passiveSupported\", {\n    /**\r\n     * Indicates if passive mode options is supported by this browser.\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (this._passiveSupported == null) {\n        // Check for passive mode support\n        try {\n          var options_1 = Object.defineProperty({}, \"passive\", {\n            get: function () {\n              _this._passiveSupported = true;\n            }\n          });\n          window.addEventListener(\"test\", options_1, options_1);\n          window.removeEventListener(\"test\", options_1, options_1);\n        } catch (err) {\n          this._passiveSupported = false;\n        }\n      }\n\n      return this._passiveSupported;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Interaction;\n}(BaseObjectEvents);\n\nexport { Interaction };\nvar interaction = null;\n/**\r\n * Returns a single unified global instance of [[Interaction]].\r\n *\r\n * All code should use this function, rather than create their own instances\r\n * of [[Interaction]].\r\n */\n\nexport function getInteraction() {\n  if (interaction == null) {\n    interaction = new Interaction();\n  }\n\n  return interaction;\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/interaction/Interaction.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Interaction manages all aspects of user interaction - mouse move,\r\n * click, hover, drag events, touch gestures.\r\n *\r\n * [[InteractionObject]] elements that want to use certain events, must attach event\r\n * listeners to Interaction instance.\r\n *\r\n * Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n * those elements to handle interaction information received via event triggers.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents, IBaseObjectEvents } from \"../Base\";\r\nimport { List } from \"../utils/List\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { IInertiaOptions, ISwipeOptions, IHitOptions, IHoverOptions, IKeyboardOptions, IMouseOptions } from \"./InteractionOptions\";\r\nimport { MultiDisposer, IDisposer } from \"../utils/Disposer\";\r\nimport { InteractionObject, IInteractionObjectEvents } from \"./InteractionObject\";\r\nimport { InteractionKeyboardObject } from \"./InteractionKeyboardObject\";\r\nimport { Dictionary } from \"../utils/Dictionary\";\r\nimport { Inertia, InertiaTypes } from \"./Inertia\";\r\nimport { IPointer, IBreadcrumb } from \"./Pointer\";\r\nimport { addEventListener } from \"../utils/DOM\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IStyleProperty } from \"../defs/IStyleProperty\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { system } from \"./../System\";\r\nimport { options } from \"./../Options\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $time from \"../utils/Time\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents an Event object that comes from [[Interaction]]\r\n */\r\nexport interface IInteractionEvents extends IBaseObjectEvents {\r\n\r\n\ttrack: {\r\n\t\tpointer: IPointer;\r\n\t\ttouch: boolean;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\tdown: {\r\n\t\tpointer: IPointer;\r\n\t\ttouch: boolean;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\tup: {\r\n\t\tpointer: IPointer;\r\n\t\ttouch: boolean;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\tfocus: {\r\n\t\tevent: FocusEvent;\r\n\t}\r\n}\r\n\r\n/**\r\n * Interface representing a delayed event\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport interface IDelayedEvent {\r\n\ttype: keyof IInteractionObjectEvents;\r\n\tio: InteractionObject;\r\n\tpointer: IPointer;\r\n\tevent: MouseEvent | TouchEvent;\r\n\tkeepUntil?: number;\r\n\ttimeout?: IDisposer;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n* Interaction manages all aspects of user interaction - mouse move,\r\n* click, hover, drag events, touch gestures.\r\n*\r\n* [[InteractionObject]] elements that want to use certain events, must attach event\r\n* listeners to Interaction instance.\r\n*\r\n* Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n* those elements to handle interaction information received via event triggers.\r\n*\r\n* @see {@link IInteractionEvents} for a list of available events\r\n*/\r\nexport class Interaction extends BaseObjectEvents {\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @deprecated Use inetraction.body.events instead\r\n\t */\r\n\tpublic _events!: IInteractionEvents;\r\n\r\n\t/**\r\n\t * A reference to an [[Interaction]] object for document's body.\r\n\t *\r\n\t * Users can use it to add global, non-chart related events, that will be\r\n\t * applicable to the whole document.\r\n\t */\r\n\tpublic body: InteractionObject;\r\n\r\n\t/**\r\n\t * An indicator of global events were already initialized.\r\n\t */\r\n\tprotected _globalEventsAdded: boolean = false;\r\n\r\n\t/**\r\n\t * Holds which mouse event listeners to use.\r\n\t */\r\n\tprotected _pointerEvents = {\r\n\t\t\"pointerdown\": \"mousedown\",\r\n\t\t\"pointerup\": \"mouseup\",\r\n\t\t\"pointermove\": \"mousemove\",\r\n\t\t\"pointercancel\": \"mouseup\",\r\n\t\t\"pointerover\": \"mouseover\",\r\n\t\t\"pointerout\": \"mouseout\",\r\n\t\t\"wheel\": \"wheel\"\r\n\t};\r\n\r\n\t/**\r\n\t * Indicates if Interaction should use only \"pointer\" type events, like\r\n\t * \"pointermove\", available in all modern browsers, ignoring \"legacy\"\r\n\t * events, like \"touchmove\".\r\n\t */\r\n\tprotected _usePointerEventsOnly: boolean = false;\r\n\r\n\t/**\r\n\t * Use only touch events (for touch only devices such as tablets and phones)\r\n\t */\r\n\tprotected _useTouchEventsOnly: boolean = false;\r\n\r\n\t/**\r\n\t * Add special hover events. Normally, touch device tap will also simulate\r\n\t * hover event. On some devices (ahem iOS) we want to prevent that so that\r\n\t * over/out events are not duplicated.\r\n\t */\r\n\tprotected _addHoverEvents: boolean = true;\r\n\r\n\t/**\r\n\t * Indicates if passive mode options is supported by this browser.\r\n\t */\r\n\tprotected _passiveSupported: boolean = false;\r\n\r\n\t/**\r\n\t * Holds list of delayed events\r\n\t */\r\n\tprotected _delayedEvents: { out: IDelayedEvent[] } = { out: [] };\r\n\r\n\t/**\r\n\t * List of objects that current have a pointer hovered over them.\r\n\t */\r\n\tpublic overObjects: List<InteractionObject> = new List<InteractionObject>();\r\n\r\n\t/**\r\n\t * List of objects that currently has a pressed pointer.\r\n\t */\r\n\tpublic downObjects: List<InteractionObject> = new List<InteractionObject>();\r\n\r\n\t/**\r\n\t * List of objects that need mouse position to be reported to them.\r\n\t */\r\n\tpublic trackedObjects: List<InteractionObject> = new List<InteractionObject>();\r\n\r\n\t/**\r\n\t * List of objects that are currently being dragged.\r\n\t */\r\n\tpublic transformedObjects: List<InteractionObject> = new List<InteractionObject>();\r\n\r\n\t/**\r\n\t * An object that currently has focus. Usually set automatically via\r\n\t * [[InteractionObject]] `isFocus` method.\r\n\t */\r\n\tpublic focusedObject: $type.Optional<InteractionObject>;\r\n\r\n\t/**\r\n\t * Holds all known pointers.\r\n\t */\r\n\tpublic pointers = new Dictionary<string, IPointer>();\r\n\r\n\t/**\r\n\t * Last pointer that generate some kind of action.\r\n\t *\r\n\t * @since 4.9.5\r\n\t * @ignore\r\n\t */\r\n\tpublic lastPointer: $type.Optional<IPointer>;\r\n\r\n\t/**\r\n\t * Inertia options that need to be applied to after element drag, if it's\r\n\t * `inert = true`.\r\n\t *\r\n\t * This is just a default, which can and probably will be overridden by\r\n\t * actual elements.\r\n\t */\r\n\tpublic inertiaOptions = new Dictionary<InertiaTypes, IInertiaOptions>();\r\n\r\n\t/**\r\n\t * Default options for click events. These can be overridden in\r\n\t * [[InteractionObject]].\r\n\t */\r\n\tpublic hitOptions: IHitOptions = {\r\n\t\t\"doubleHitTime\": 300,\r\n\t\t//\"delayFirstHit\": false,\r\n\t\t\"hitTolerance\": 10,\r\n\t\t\"noFocus\": true\r\n\t};\r\n\r\n\t/**\r\n\t * Default options for hover events. These can be overridden in\r\n\t * [[InteractionObject]].\r\n\t */\r\n\tpublic hoverOptions: IHoverOptions = {\r\n\t\t\"touchOutBehavior\": \"leave\",\r\n\t\t\"touchOutDelay\": 1000\r\n\t};\r\n\r\n\t/**\r\n\t * Default options for detecting a swipe gesture. These can be overridden in\r\n\t * [[InteractionObject]].\r\n\t */\r\n\tpublic swipeOptions: ISwipeOptions = {\r\n\t\t\"time\": 500,\r\n\t\t\"verticalThreshold\": 75,\r\n\t\t\"horizontalThreshold\": 30\r\n\t};\r\n\r\n\t/**\r\n\t * Default options for keyboard operations. These can be overridden in\r\n\t * [[InteractionObject]].\r\n\t */\r\n\tpublic keyboardOptions: IKeyboardOptions = {\r\n\t\t\"speed\": 0.1,\r\n\t\t\"accelleration\": 1.2,\r\n\t\t\"accellerationDelay\": 2000\r\n\t};\r\n\r\n\t/**\r\n\t * Default options for keyboard operations. These can be overridden in\r\n\t * [[InteractionObject]].\r\n\t *\r\n\t * @since 4.5.14\r\n\t */\r\n\tpublic mouseOptions: IMouseOptions = {\r\n\t\t\"sensitivity\": 1\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Constructor. Sets up universal document-wide move events to handle stuff\r\n\t * outside particular chart container.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Call super\r\n\t\tsuper();\r\n\r\n\t\t// Set class name\r\n\t\tthis.className = \"Interaction\";\r\n\r\n\t\t// Create InteractionObject for <body>\r\n\t\tthis.body = this.getInteraction(document.body);\r\n\r\n\t\tthis._disposers.push(this.body);\r\n\r\n\t\t// Detect browser capabilities and determine what event listeners to use\r\n\t\tif (window.hasOwnProperty(\"PointerEvent\")) {\r\n\t\t\t// IE10+/Edge without touch controls enabled\r\n\t\t\tthis._pointerEvents.pointerdown = \"pointerdown\";\r\n\t\t\tthis._pointerEvents.pointerup = \"pointerup\";\r\n\t\t\tthis._pointerEvents.pointermove = \"pointermove\";\r\n\t\t\tthis._pointerEvents.pointercancel = \"pointercancel\";\r\n\t\t\tthis._pointerEvents.pointerover = \"pointerover\";\r\n\t\t\tthis._pointerEvents.pointerout = \"pointerout\";\r\n\t\t\t//this._usePointerEventsOnly = true;\r\n\t\t} else if (window.hasOwnProperty(\"MSPointerEvent\")) {\r\n\t\t\t// IE9\r\n\t\t\tthis._pointerEvents.pointerdown = \"MSPointerDown\";\r\n\t\t\tthis._pointerEvents.pointerup = \"MSPointerUp\";\r\n\t\t\tthis._pointerEvents.pointermove = \"MSPointerMove\";\r\n\t\t\tthis._pointerEvents.pointercancel = \"MSPointerUp\";\r\n\t\t\tthis._pointerEvents.pointerover = \"MSPointerOver\";\r\n\t\t\tthis._pointerEvents.pointerout = \"MSPointerOut\";\r\n\t\t\t//this._usePointerEventsOnly = true;\r\n\t\t}\r\n\t\telse if ((typeof matchMedia !== \"undefined\") && matchMedia('(pointer:fine)').matches) {\r\n\t\t\t// This is only for Safari as it does not support PointerEvent\r\n\t\t\t// Do nothing and let it use regular `mouse*` events\r\n\t\t\t// Hi Apple ;)\r\n\r\n\t\t\t// Additionally disable hover events for iOS devices\r\n\t\t\tif ('ontouchstart' in window) {\r\n\t\t\t\tthis._addHoverEvents = false;\r\n\t\t\t\tthis._useTouchEventsOnly = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (window.navigator.userAgent.match(/MSIE /)) {\r\n\t\t\t// Oh looky, an MSIE that does not support PointerEvent. Hi granpa IE9!\r\n\t\t\tthis._usePointerEventsOnly = true;\r\n\t\t}\r\n\t\telse if (this.fullFF()) {\r\n\t\t\t// Old FF, let's use regular events.\r\n\t\t\t// (Newer FFs would be detected by the PointerEvent availability check)\r\n\t\t\tthis._usePointerEventsOnly = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Uses defaults for normal browsers\r\n\t\t\t// We also assume that this must be a touch device that does not have\r\n\t\t\t// any pointer events\r\n\t\t\tthis._useTouchEventsOnly = true;\r\n\t\t}\r\n\r\n\t\t// Detect if device has a mouse\r\n\t\t// This is turning out to be not reliable\r\n\t\t// @todo remove\r\n\t\t/*if (!window.navigator.msPointerEnabled && (typeof matchMedia !== \"undefined\") && !matchMedia('(pointer:fine)').matches && !this.fullFF()) {\r\n\t\t\tthis._useTouchEventsOnly = true;\r\n\t\t}*/\r\n\r\n\t\t// Detect proper mouse wheel events\r\n\t\tif (\"onwheel\" in document.createElement(\"div\")) {\r\n\t\t\t// Modern browsers\r\n\t\t\tthis._pointerEvents.wheel = \"wheel\";\r\n\t\t}\r\n\t\telse if ($type.hasValue((<any>document).onmousewheel)) {\r\n\t\t\t// Webkit and IE support at least \"mousewheel\"\r\n\t\t\tthis._pointerEvents.wheel = \"mousewheel\";\r\n\t\t}\r\n\r\n\t\t// Set up default inertia options\r\n\t\tthis.inertiaOptions.setKey(\"move\", {\r\n\t\t\t\"time\": 100,\r\n\t\t\t\"duration\": 500,\r\n\t\t\t\"factor\": 1,\r\n\t\t\t\"easing\": $ease.polyOut3\r\n\t\t});\r\n\t\tthis.inertiaOptions.setKey(\"resize\", {\r\n\t\t\t\"time\": 100,\r\n\t\t\t\"duration\": 500,\r\n\t\t\t\"factor\": 1,\r\n\t\t\t\"easing\": $ease.polyOut3\r\n\t\t});\r\n\r\n\t\t// Set the passive mode support\r\n\t\tthis._passiveSupported = Interaction.passiveSupported;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * This is a nasty detection for Firefox. The reason why we have is that\r\n\t * Firefox ESR version does not support matchMedia correctly.\r\n\t *\r\n\t * On iOS, Firefox uses different userAgent, so we don't have to detect iOS.\r\n\t *\r\n\t * @return Full Firefox?\r\n\t */\r\n\tprotected fullFF(): boolean {\r\n\t\treturn (window.navigator.userAgent.match(/Firefox/)) && !(window.navigator.userAgent.match(/Android/));\r\n\t}\r\n\r\n\tprotected debug(): void { }\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Processing\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Sets up global events.\r\n\t *\r\n\t * We need this so that we can track drag movement beyond chart's container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addGlobalEvents(): void {\r\n\t\tif (!this._globalEventsAdded) {\r\n\r\n\t\t\tif (!this._useTouchEventsOnly) {\r\n\t\t\t\tthis._disposers.push(addEventListener<MouseEvent | PointerEvent>(\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\tthis._pointerEvents.pointerdown,\r\n\t\t\t\t\t(ev: MouseEvent) => { this.handleGlobalPointerDown(ev) }\r\n\t\t\t\t));\r\n\r\n\t\t\t\tthis._disposers.push(addEventListener<MouseEvent | PointerEvent>(\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\tthis._pointerEvents.pointermove,\r\n\t\t\t\t\t(ev: MouseEvent) => { this.handleGlobalPointerMove(ev) }\r\n\t\t\t\t));\r\n\r\n\t\t\t\tthis._disposers.push(addEventListener<MouseEvent | PointerEvent>(\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\tthis._pointerEvents.pointerup,\r\n\t\t\t\t\t(ev: MouseEvent) => { this.handleGlobalPointerUp(ev) }\r\n\t\t\t\t));\r\n\r\n\t\t\t\tthis._disposers.push(addEventListener<MouseEvent | PointerEvent>(\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\tthis._pointerEvents.pointercancel,\r\n\t\t\t\t\t(ev: MouseEvent) => { this.handleGlobalPointerUp(ev, true) }\r\n\t\t\t\t));\r\n\r\n\t\t\t\tthis._disposers.push(addEventListener<MouseEvent | PointerEvent>(\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\t\"mouseenter\",\r\n\t\t\t\t\t(ev: MouseEvent) => {\r\n\t\t\t\t\t\tif (!$type.hasValue(ev.relatedTarget) && (ev.buttons == 0 || ev.which == 0)) {\r\n\t\t\t\t\t\t\tthis.handleDocumentLeave(ev);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t));\r\n\t\t\t}\r\n\r\n\t\t\t// No need to duplicate events for hubrid systems that support both\r\n\t\t\t// pointer events and touch events. Touch events are need only for\r\n\t\t\t// some touch-only systems, like Mobile Safari.\r\n\t\t\tif (!this._usePointerEventsOnly) {\r\n\t\t\t\tthis._disposers.push(addEventListener(\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\t\"touchstart\",\r\n\t\t\t\t\t(ev: TouchEvent) => { this.handleGlobalTouchStart(ev) }\r\n\t\t\t\t));\r\n\r\n\t\t\t\tthis._disposers.push(addEventListener(\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\t\"touchmove\",\r\n\t\t\t\t\t(ev: TouchEvent) => { this.handleGlobalTouchMove(ev) }\r\n\t\t\t\t));\r\n\r\n\t\t\t\tthis._disposers.push(addEventListener(\r\n\t\t\t\t\tdocument,\r\n\t\t\t\t\t\"touchend\",\r\n\t\t\t\t\t(ev: TouchEvent) => { this.handleGlobalTouchEnd(ev) }\r\n\t\t\t\t));\r\n\t\t\t}\r\n\r\n\t\t\tthis._disposers.push(addEventListener(\r\n\t\t\t\tdocument,\r\n\t\t\t\t\"keydown\",\r\n\t\t\t\t(ev: KeyboardEvent) => { this.handleGlobalKeyDown(ev) }\r\n\t\t\t));\r\n\r\n\t\t\tthis._disposers.push(addEventListener(\r\n\t\t\t\tdocument,\r\n\t\t\t\t\"keyup\",\r\n\t\t\t\t(ev: KeyboardEvent) => { this.handleGlobalKeyUp(ev) }\r\n\t\t\t));\r\n\r\n\t\t\tthis._globalEventsAdded = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if [[InteractionObject]] is clickable.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io [[InteractionObject]] instance\r\n\t */\r\n\tpublic processClickable(io: InteractionObject): void {\r\n\t\t// Add or remove touch events\r\n\t\tthis.processTouchable(io);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if [[InteractionObject]] will display context menu when right-clicked.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io [[InteractionObject]] instance\r\n\t */\r\n\tpublic processContextMenu(io: InteractionObject): void {\r\n\t\tif (io.contextMenuDisabled) {\r\n\t\t\tif (!io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\r\n\t\t\t\tio.eventDisposers.setKey(\"contextMenuDisabled\",\r\n\t\t\t\t\taddEventListener<MouseEvent | PointerEvent>(io.element, \"contextmenu\", (e) => {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\r\n\t\t\t\tio.eventDisposers.getKey(\"contextMenuDisabled\").dispose();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if [[InteractionObject]] is hoverable.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io [[InteractionObject]] instance\r\n\t */\r\n\tpublic processHoverable(io: InteractionObject): void {\r\n\t\tif (io.hoverable || io.trackable) {\r\n\r\n\t\t\t// Add global events\r\n\t\t\tthis.addGlobalEvents();\r\n\r\n\t\t\t// Add hover styles\r\n\t\t\tthis.applyCursorOverStyle(io);\r\n\r\n\t\t\t// Add local events\r\n\t\t\tif (!io.eventDisposers.hasKey(\"hoverable\") && this._addHoverEvents) {\r\n\t\t\t\tio.eventDisposers.setKey(\"hoverable\", new MultiDisposer([\r\n\t\t\t\t\taddEventListener<MouseEvent | PointerEvent>(io.element, this._pointerEvents.pointerout, (e) => this.handlePointerOut(io, e)),\r\n\t\t\t\t\taddEventListener<MouseEvent | PointerEvent>(io.element, this._pointerEvents.pointerover, (e) => this.handlePointerOver(io, e))\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\r\n\t\t\tif (io.trackable) {\r\n\t\t\t\t//sprite.addEventListener(\"touchmove\", this.handleTouchMove, false, this);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tconst disposer = io.eventDisposers.getKey(\"hoverable\");\r\n\r\n\t\t\tif (disposer != null) {\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t\tio.eventDisposers.removeKey(\"hoverable\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add or remove touch events\r\n\t\tthis.processTouchable(io);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up [[InteractionObject]] as movable. Movable can be any\r\n\t * transformation, e.g. drag, swipe, resize, track.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t */\r\n\tpublic processMovable(io: InteractionObject) {\r\n\r\n\t\t// Add unified events\r\n\t\tif (io.draggable || io.swipeable || io.trackable || io.resizable) {\r\n\r\n\t\t\t// Prep the element\r\n\t\t\tif (!this.isGlobalElement(io) && !io.isTouchProtected) {\r\n\t\t\t\tthis.prepElement(io);\r\n\t\t\t}\r\n\r\n\t\t\t// Add hover styles\r\n\t\t\tthis.applyCursorOverStyle(io);\r\n\r\n\t\t}\r\n\r\n\t\t// Add or remove touch events\r\n\t\tthis.processTouchable(io);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if [[InteractionObject]] is trackable and sets relative events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t */\r\n\tpublic processTrackable(io: InteractionObject): void {\r\n\t\tthis.processHoverable(io);\r\n\t\tthis.processMovable(io);\r\n\t\tif (io.trackable) {\r\n\t\t\tthis.trackedObjects.moveValue(io);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.trackedObjects.removeValue(io);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if [[InteractionObject]] is draggable.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t */\r\n\tpublic processDraggable(io: InteractionObject): void {\r\n\t\tthis.processMovable(io);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if [[InteractionObject]] is swipeable and sets relative events.\r\n\t *\r\n\t * A swipe event is triggered when a horizontal drag of 75px or more (and\r\n\t * less than 30px vertically) occurs within 700 milliseconds. This can be\r\n\t * overridden in sprites [[swipeOptions]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t */\r\n\tpublic processSwipeable(io: InteractionObject): void {\r\n\t\tthis.processMovable(io);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if [[InteractionObject]] is resizable and attaches required events\r\n\t * to it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t */\r\n\tpublic processResizable(io: InteractionObject): void {\r\n\t\tthis.processMovable(io);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if [[InteractionObject]] is supposed to capture mouse wheel events\r\n\t * and prepares it to catch those events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t */\r\n\tpublic processWheelable(io: InteractionObject): void {\r\n\t\tif (io.wheelable) {\r\n\t\t\t//io.hoverable = true;\r\n\t\t\tif (!io.eventDisposers.hasKey(\"wheelable\")) {\r\n\t\t\t\tio.eventDisposers.setKey(\"wheelable\", new MultiDisposer([\r\n\t\t\t\t\taddEventListener<WheelEvent>(\r\n\t\t\t\t\t\tio.element,\r\n\t\t\t\t\t\tthis._pointerEvents.wheel,\r\n\t\t\t\t\t\t(e) => this.handleMouseWheel(io, e),\r\n\t\t\t\t\t\tthis._passiveSupported ? { passive: false } : false\r\n\t\t\t\t\t),\r\n\t\t\t\t\tio.events.on(\"out\", (e) => {\r\n\t\t\t\t\t\tif (io.wheelable) {\r\n\t\t\t\t\t\t\tthis.unlockWheel();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tio.events.on(\"over\", (e) => {\r\n\t\t\t\t\t\tif (io.wheelable) {\r\n\t\t\t\t\t\t\tthis.lockWheel();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tconst disposer = io.eventDisposers.getKey(\"wheelable\");\r\n\r\n\t\t\tif (disposer != null) {\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t\tio.eventDisposers.removeKey(\"wheelable\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if [[InteractionObject]] is focusable. A focusable element is an\r\n\t * element that will be highlighted when users presses TAB key. If the\r\n\t * element is focusable, this function will attach relative focus/blur\r\n\t * events to it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t */\r\n\tpublic processFocusable(io: InteractionObject): void {\r\n\t\tif (io.focusable === true && (io.tabindex > -1) && !this._useTouchEventsOnly) {\r\n\t\t\tif (!io.eventDisposers.hasKey(\"focusable\")) {\r\n\t\t\t\tio.eventDisposers.setKey(\"focusable\", new MultiDisposer([\r\n\t\t\t\t\taddEventListener<FocusEvent>(io.element, \"focus\", (e) => this.handleFocus(io, e)),\r\n\t\t\t\t\taddEventListener<FocusEvent>(io.element, \"blur\", (e) => this.handleBlur(io, e)),\r\n\t\t\t\t\taddEventListener<MouseEvent>(\r\n\t\t\t\t\t\tio.element,\r\n\t\t\t\t\t\tthis._pointerEvents.pointerdown,\r\n\t\t\t\t\t\t(e) => this.handleFocusBlur(io, e)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\taddEventListener<TouchEvent>(\r\n\t\t\t\t\t\tio.element,\r\n\t\t\t\t\t\t\"touchstart\",\r\n\t\t\t\t\t\t(e) => this.handleFocusBlur(io, e),\r\n\t\t\t\t\t\tthis._passiveSupported ? { passive: false } : false\r\n\t\t\t\t\t)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst disposer = io.eventDisposers.getKey(\"focusable\");\r\n\r\n\t\t\tif (disposer != null) {\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t\tio.eventDisposers.removeKey(\"focusable\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if [[InteractionObject]] is \"touchable\". It means any interaction\r\n\t * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t */\r\n\tpublic processTouchable(io: InteractionObject): void {\r\n\r\n\t\t// Add unified events\r\n\t\tif (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable) {\r\n\r\n\t\t\t// Add global events\r\n\t\t\tthis.addGlobalEvents();\r\n\r\n\t\t\t// Add local events\r\n\t\t\tif (!io.eventDisposers.hasKey(\"touchable\")) {\r\n\t\t\t\tif (!this._useTouchEventsOnly && !this._usePointerEventsOnly) {\r\n\t\t\t\t\tio.eventDisposers.setKey(\"touchable\", new MultiDisposer([\r\n\r\n\t\t\t\t\t\taddEventListener<MouseEvent>(\r\n\t\t\t\t\t\t\tio.element,\r\n\t\t\t\t\t\t\tthis._pointerEvents.pointerdown,\r\n\t\t\t\t\t\t\t(e) => this.handlePointerDown(io, e)\r\n\t\t\t\t\t\t),\r\n\r\n\t\t\t\t\t\taddEventListener<TouchEvent>(\r\n\t\t\t\t\t\t\tio.element,\r\n\t\t\t\t\t\t\t\"touchstart\",\r\n\t\t\t\t\t\t\t(e) => this.handleTouchDown(io, e),\r\n\t\t\t\t\t\t\tthis._passiveSupported ? { passive: false } : false\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t]));\r\n\t\t\t\t}\r\n\t\t\t\telse if (!this._useTouchEventsOnly) {\r\n\t\t\t\t\tio.eventDisposers.setKey(\"touchable\",\r\n\t\t\t\t\t\taddEventListener<MouseEvent>(\r\n\t\t\t\t\t\t\tio.element,\r\n\t\t\t\t\t\t\tthis._pointerEvents.pointerdown,\r\n\t\t\t\t\t\t\t(e) => this.handlePointerDown(io, e)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!this._usePointerEventsOnly) {\r\n\t\t\t\t\tio.eventDisposers.setKey(\"touchable\",\r\n\t\t\t\t\t\taddEventListener<TouchEvent>(\r\n\t\t\t\t\t\t\tio.element,\r\n\t\t\t\t\t\t\t\"touchstart\",\r\n\t\t\t\t\t\t\t(e) => this.handleTouchDown(io, e),\r\n\t\t\t\t\t\t\tthis._passiveSupported ? { passive: false } : false\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tconst disposer = io.eventDisposers.getKey(\"touchable\");\r\n\r\n\t\t\tif (disposer != null) {\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t\tio.eventDisposers.removeKey(\"touchable\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Non-pointer events\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Dispatches \"focus\" event when element gains focus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t * @param ev  Original event\r\n\t */\r\n\tpublic handleFocus(io: InteractionObject, ev: FocusEvent): void {\r\n\t\tif (!io.focusable) {\r\n\t\t\tev.preventDefault();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tio.isFocused = true;\r\n\t\tif (io.events.isEnabled(\"focus\") && !system.isPaused) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"focus\"] = {\r\n\t\t\t\ttype: \"focus\",\r\n\t\t\t\ttarget: io,\r\n\t\t\t\tevent: ev\r\n\t\t\t};\r\n\t\t\tio.events.dispatchImmediately(\"focus\", imev);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Used by regular click events to prevent focus if \"noFocus\" is set.\r\n\t *\r\n\t * This should not be called by \"focus\" handlers.\r\n\t *\r\n\t * @param io  Element\r\n\t * @param ev  Original event\r\n\t */\r\n\tprivate handleFocusBlur(io: InteractionObject, ev: MouseEvent | TouchEvent): void {\r\n\t\tif (io.focusable !== false && this.getHitOption(io, \"noFocus\")) {\r\n\t\t\tio.events.once(\"focus\", () => {\r\n\t\t\t\tio.events.disableType(\"blur\");\r\n\t\t\t\t$dom.blur();\r\n\t\t\t\tif (io.sprite) {\r\n\t\t\t\t\tio.sprite.handleBlur();\r\n\t\t\t\t}\r\n\t\t\t\tio.events.enableType(\"blur\");\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches \"blur\" event when element loses focus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t * @param ev  Original event\r\n\t */\r\n\tpublic handleBlur(io: InteractionObject, ev: FocusEvent): void {\r\n\t\tif (!io.focusable) {\r\n\t\t\tev.preventDefault();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tio.isFocused = false;\r\n\t\tif (io.events.isEnabled(\"blur\") && !system.isPaused) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"blur\"] = {\r\n\t\t\t\ttype: \"blur\",\r\n\t\t\t\ttarget: io,\r\n\t\t\t\tevent: ev\r\n\t\t\t};\r\n\t\t\tio.events.dispatchImmediately(\"blur\", imev);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Global keyboard-related even handlers\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Checks if there is an item that has currently focus and that they key is\r\n\t * one of the directional keys. If both of the conditions are true, it\r\n\t * creates an object to simulate movement of dragable element with keyboard.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev An original keyboard event\r\n\t */\r\n\tpublic handleGlobalKeyDown(ev: KeyboardEvent): void {\r\n\r\n\t\tif (this.focusedObject) {\r\n\t\t\tif (keyboard.isKey(ev, \"esc\")) {\r\n\t\t\t\t// ESC removes focus\r\n\t\t\t\t$dom.blur();\r\n\t\t\t}\r\n\t\t\telse if (this.focusedObject.draggable && keyboard.isKey(ev, [\"up\", \"down\", \"left\", \"right\"])) {\r\n\r\n\t\t\t\t// Prevent scrolling of the document\r\n\t\t\t\tev.preventDefault();\r\n\r\n\t\t\t\t// Get focused object\r\n\t\t\t\tlet io = this.focusedObject;\r\n\r\n\t\t\t\t// Get particular key\r\n\t\t\t\tlet disposerKey = \"interactionKeyboardObject\";\r\n\r\n\t\t\t\t// If such disposer already exists we know the event is going on so we\r\n\t\t\t\t// just move on\r\n\t\t\t\tif (io.eventDisposers.hasKey(disposerKey)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create a keyboard mover\r\n\t\t\t\tlet ko = new InteractionKeyboardObject(io, ev);\r\n\t\t\t\tio.eventDisposers.setKey(disposerKey, ko);\r\n\t\t\t\tswitch (keyboard.getEventKey(ev)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tko.directionY = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tko.directionY = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tko.directionX = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tko.directionX = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches related events when the keyboard key is realeasd.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev An original keyboard event\r\n\t */\r\n\tpublic handleGlobalKeyUp(ev: KeyboardEvent): void {\r\n\t\tlet disposerKey = \"interactionKeyboardObject\";\r\n\t\tif (this.focusedObject) {\r\n\t\t\tconst disposer = this.focusedObject.eventDisposers.getKey(disposerKey);\r\n\r\n\t\t\tif (disposer != null) {\r\n\t\t\t\t// Prevent scrolling of the document\r\n\t\t\t\tev.preventDefault();\r\n\r\n\t\t\t\t// Dispose stuff\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t\tthis.focusedObject.eventDisposers.removeKey(disposerKey);\r\n\t\t\t}\r\n\r\n\t\t\t// Does focused object have \"hit\" event?\r\n\t\t\tif (keyboard.isKey(ev, \"enter\")\r\n\t\t\t\t&& this.focusedObject.sprite\r\n\t\t\t\t&& !this.focusedObject.sprite.events.isEnabled(\"toggled\")\r\n\t\t\t) {\r\n\t\t\t\tif (this.focusedObject.sprite.events.isEnabled(\"hit\")) {\r\n\t\t\t\t\tthis.focusedObject.dispatchImmediately(\"hit\");\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.focusedObject.sprite.showTooltipOn == \"hit\") {\r\n\t\t\t\t\tthis.focusedObject.dispatchImmediately(\"up\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Global pointer-related even handlers\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Handler for a global \"pointermove\" event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleGlobalPointerMove(ev: MouseEvent): void {\r\n\t\t// Get pointer\r\n\t\tlet pointer: IPointer = this.getPointer(ev);\r\n\r\n\t\t// Update current point position\r\n\t\tpointer.point = this.getPointerPoint(ev);\r\n\r\n\t\t// Prepare and fire global event\r\n\t\tif (this.events.isEnabled(\"track\") && !system.isPaused) {\r\n\t\t\tlet imev: AMEvent<this, IInteractionEvents>[\"track\"] = {\r\n\t\t\t\ttype: \"track\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tevent: ev,\r\n\t\t\t\tpointer: pointer,\r\n\t\t\t\ttouch: pointer.touch\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"track\", imev);\r\n\t\t}\r\n\r\n\t\t// Track\r\n\t\tthis.addBreadCrumb(pointer, pointer.point);\r\n\r\n\t\t// Process further\r\n\t\tthis.handleGlobalMove(pointer, ev);\r\n\t}\r\n\r\n\t/**\r\n\t * Handler for a global \"pointerdown\" event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleGlobalPointerDown(ev: MouseEvent): void {\r\n\r\n\t\t// Remove delayed hovers\r\n\t\tthis.processDelayed();\r\n\r\n\t\t// Get pointer\r\n\t\tlet pointer: IPointer = this.getPointer(ev);\r\n\r\n\t\t// Prepare and fire global event\r\n\t\tif (this.events.isEnabled(\"down\") && !system.isPaused) {\r\n\t\t\tlet imev: AMEvent<this, IInteractionEvents>[\"down\"] = {\r\n\t\t\t\ttype: \"down\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tevent: ev,\r\n\t\t\t\tpointer: pointer,\r\n\t\t\t\ttouch: pointer.touch\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"down\", imev);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents touch action from firing.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event\r\n\t */\r\n\tpublic preventTouchAction(ev: TouchEvent): void {\r\n\t\tif (!ev.defaultPrevented) {\r\n\t\t\tev.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handler for a global \"pointerup\" event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleGlobalPointerUp(ev: MouseEvent, cancelled: boolean = false): void {\r\n\r\n\t\t// Get pointer\r\n\t\tlet pointer: IPointer = this.getPointer(ev);\r\n\r\n\t\t// Prepare and fire global event\r\n\t\tif (this.events.isEnabled(\"up\") && !system.isPaused) {\r\n\t\t\tlet imev: AMEvent<this, IInteractionEvents>[\"up\"] = {\r\n\t\t\t\ttype: \"up\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tevent: ev,\r\n\t\t\t\tpointer: pointer,\r\n\t\t\t\ttouch: pointer.touch\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"up\", imev);\r\n\t\t}\r\n\r\n\t\t// Process further\r\n\t\tthis.handleGlobalUp(pointer, ev, cancelled);\r\n\r\n\t}\r\n\r\n\t/**\r\n * ==========================================================================\r\n * Global touch-related even handlers\r\n * ==========================================================================\r\n */\r\n\r\n\t/**\r\n\t * Handler for a global \"touchmove\" event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleGlobalTouchMove(ev: TouchEvent): void {\r\n\r\n\t\t// Process each changed touch point\r\n\t\tfor (let i = 0; i < ev.changedTouches.length; i++) {\r\n\t\t\t// Get pointer\r\n\t\t\tlet pointer: IPointer = this.getPointer(ev.changedTouches[i]);\r\n\r\n\t\t\t// Update current point position\r\n\t\t\tpointer.point = this.getPointerPoint(ev.changedTouches[i]);\r\n\r\n\t\t\t// Prepare and fire global event\r\n\t\t\tif (this.events.isEnabled(\"track\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<this, IInteractionEvents>[\"track\"] = {\r\n\t\t\t\t\ttype: \"track\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpointer: pointer,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"track\", imev);\r\n\t\t\t}\r\n\r\n\t\t\t// Track\r\n\t\t\tthis.addBreadCrumb(pointer, pointer.point);\r\n\r\n\t\t\t// Process further\r\n\t\t\tthis.handleGlobalMove(pointer, ev);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handler for a global \"touchstart\" event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleGlobalTouchStart(ev: TouchEvent): void {\r\n\r\n\t\t// Remove delayed hovers\r\n\t\tthis.processDelayed();\r\n\r\n\t\t// Process each changed touch point\r\n\t\tfor (let i = 0; i < ev.changedTouches.length; i++) {\r\n\r\n\t\t\t// Get pointer\r\n\t\t\tlet pointer: IPointer = this.getPointer(ev.changedTouches[i]);\r\n\r\n\t\t\t// Prepare and fire global event\r\n\t\t\tif (!this._usePointerEventsOnly && this.events.isEnabled(\"down\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<this, IInteractionEvents>[\"down\"] = {\r\n\t\t\t\t\ttype: \"down\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpointer: pointer,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"down\", imev);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handler for a global \"touchend\" event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleGlobalTouchEnd(ev: TouchEvent): void {\r\n\r\n\t\t// Process each changed touch point\r\n\t\tfor (let i = 0; i < ev.changedTouches.length; i++) {\r\n\r\n\t\t\t// Get pointer\r\n\t\t\tlet pointer: IPointer = this.getPointer(ev.changedTouches[i]);\r\n\r\n\t\t\t// Prepare and fire global event\r\n\t\t\tif (this.events.isEnabled(\"up\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<this, IInteractionEvents>[\"up\"] = {\r\n\t\t\t\t\ttype: \"up\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpointer: pointer,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"up\", imev);\r\n\t\t\t}\r\n\r\n\t\t\t// Handle element-related events\r\n\t\t\tthis.handleGlobalUp(pointer, ev);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Element-specific pointer-related even handlers\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Handles event when pointer is over [[InteractionObject]] and button is\r\n\t * pressed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t * @param ev  Original event\r\n\t */\r\n\tpublic handlePointerDown(io: InteractionObject, ev: MouseEvent | PointerEvent): void {\r\n\r\n\t\t// Stop further propagation so we don't get multiple triggers on hybrid\r\n\t\t// devices (both mouse and touch capabilities)\r\n\t\t//ev.preventDefault();\r\n\t\t//ev.stopPropagation();\r\n\t\t//if (ev.defaultPrevented) {\r\n\t\t//}\r\n\r\n\t\t// Get pointer\r\n\t\tlet pointer = this.getPointer(ev);\r\n\r\n\t\t// Ignore if it's anything but mouse's primary button\r\n\t\tif (!pointer.touch && ev.which != 1 && ev.which != 3) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Set mouse button\r\n\t\tpointer.button = ev.which;\r\n\r\n\t\t// Reset pointer\r\n\t\tthis.resetPointer(pointer, ev);\r\n\r\n\t\t// Process down\r\n\t\tthis.handleDown(io, pointer, ev);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when [[InteractionObject]] is hovered by a mouse pointer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t * @param ev  Original event\r\n\t */\r\n\tpublic handlePointerOver(io: InteractionObject, ev: MouseEvent | PointerEvent): void {\r\n\t\t// Get pointer\r\n\t\tlet pointer = this.getPointer(ev);\r\n\r\n\t\t// Process down\r\n\t\tthis.handleOver(io, pointer, ev);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when [[InteractionObject]] loses hover from a mouse pointer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t * @param ev  Original event\r\n\t */\r\n\tpublic handlePointerOut(io: InteractionObject, ev: MouseEvent | PointerEvent): void {\r\n\r\n\t\t// Get pointer\r\n\t\tlet pointer = this.getPointer(ev);\r\n\r\n\t\t// Process down\r\n\t\tthis.handleOut(io, pointer, ev);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when mouse wheel is crolled over the [[InteractionObject]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t * @param ev  Original event\r\n\t * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel\r\n\t */\r\n\tpublic handleMouseWheel(io: InteractionObject, ev: WheelEvent): void {\r\n\r\n\t\t// Get pointer\r\n\t\tlet pointer = this.getPointer(ev);\r\n\r\n\t\t// Update current point position\r\n\t\tpointer.point = this.getPointerPoint(ev);\r\n\r\n\t\t// Init delta values\r\n\t\tlet deltaX: number = 0, deltaY: number = 0;\r\n\r\n\t\t// Set up modifier\r\n\t\t// This is needed because FireFox reports wheel deltas in \"lines\" instead\r\n\t\t// of pixels so we have to approximate pixel value\r\n\t\tlet mod = 1;\r\n\t\tif (ev.deltaMode == 1) {\r\n\t\t\tmod = 50;\r\n\t\t}\r\n\r\n\t\t// Adjust configurable sensitivity\r\n\t\tmod *= this.getMouseOption(io, \"sensitivity\");\r\n\r\n\t\t// Calculate deltas\r\n\t\tif (ev instanceof WheelEvent) {\r\n\t\t\tdeltaX = Math.round((-1 * (<any>ev).wheelDeltaX) || ev.deltaX) * mod;\r\n\t\t\tdeltaY = Math.round((-1 * (<any>ev).wheelDeltaY) || ev.deltaY) * mod;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid event type\");\r\n\t\t}\r\n\r\n\t\t// Handle the event\r\n\t\tthis.handleWheel(io, pointer, deltaX, deltaY, ev);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Element-specific touch-related even handlers\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t  * Handles an event when an [[InteractionObject]] is touched on a touch\r\n\t  * device.\r\n\t  *\r\n\t  * @ignore Exclude from docs\r\n\t  * @param io  Element\r\n\t  * @param ev  Original event\r\n\t  */\r\n\tpublic handleTouchDown(io: InteractionObject, ev: TouchEvent): void {\r\n\r\n\t\t// Stop further propagation so we don't get multiple triggers on hybrid\r\n\t\t// devices (both mouse and touch capabilities)\r\n\t\t//this.maybePreventDefault(io, ev);\r\n\t\t//return;\r\n\r\n\t\t// Process each changed touch point\r\n\t\tfor (let i = 0; i < ev.changedTouches.length; i++) {\r\n\r\n\t\t\t// Get pointer\r\n\t\t\tlet pointer = this.getPointer(ev.changedTouches[i]);\r\n\t\t\tthis.maybePreventDefault(io, ev, pointer);\r\n\r\n\t\t\t// Reset pointer\r\n\t\t\tthis.resetPointer(pointer, ev.changedTouches[i]);\r\n\r\n\t\t\t// Process down\r\n\t\t\tthis.handleDown(io, pointer, ev);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Universal handlers\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Handles click/tap. Checks for doublehit.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Interaction object\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic handleHit(io: InteractionObject, pointer: IPointer, ev: MouseEvent | TouchEvent): void {\r\n\r\n\t\t// Check if this is a double-hit\r\n\t\tlet now = $time.getTime();\r\n\t\tif (io.lastHit && (io.lastHit >= (now - this.getHitOption(io, \"doubleHitTime\")))) {\r\n\r\n\t\t\t// Yup - it's a double-hit\r\n\r\n\t\t\t// Cancel the hit\r\n\t\t\t//clearTimeout(io.lastHitPointer.hitTimeout);\r\n\r\n\t\t\t// If it happened too fast it probably means that hybrid device just\r\n\t\t\t// generated two events for the same tap\r\n\t\t\tif ((now - io.lastHit) < 100) {\r\n\t\t\t\t// Ignore\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Clear last hit\r\n\t\t\tio.lastHit = undefined;\r\n\t\t\tio.lastHitPointer = undefined;\r\n\r\n\t\t\t// Dispatch event\r\n\t\t\tif (io.events.isEnabled(\"doublehit\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"doublehit\"] = {\r\n\t\t\t\t\ttype: \"doublehit\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tpoint: pointer.point,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tio.events.dispatchImmediately(\"doublehit\", imev);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t// Log last hit\r\n\t\t\tio.lastHit = now;\r\n\t\t\tio.lastHitPointer = pointer;\r\n\r\n\t\t\tif (pointer.button === 3) {\r\n\t\t\t\t// Execute HIT now\r\n\t\t\t\tif (io.events.isEnabled(\"rightclick\") && !system.isPaused) {\r\n\t\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"rightclick\"] = {\r\n\t\t\t\t\t\ttype: \"rightclick\",\r\n\t\t\t\t\t\ttarget: io,\r\n\t\t\t\t\t\tevent: ev\r\n\t\t\t\t\t}\r\n\t\t\t\t\tio.events.dispatchImmediately(\"rightclick\", imev);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (io.events.isEnabled(\"hit\") && !system.isPaused) {\r\n\t\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"hit\"] = {\r\n\t\t\t\t\t\ttype: \"hit\",\r\n\t\t\t\t\t\ttarget: io,\r\n\t\t\t\t\t\tevent: ev,\r\n\t\t\t\t\t\tpoint: pointer.point,\r\n\t\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t\t};\r\n\t\t\t\t\tio.events.dispatchImmediately(\"hit\", imev);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer hovering over [[InteractionObject]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Interaction object\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t * @param soft     Invoked by helper function\r\n\t */\r\n\tpublic handleOver(io: InteractionObject, pointer: IPointer, ev: MouseEvent | TouchEvent, soft: boolean = false): void {\r\n\r\n\t\tif (!io.hoverable) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet hoversPaused = false;\r\n\t\tif (this.shouldCancelHovers(pointer) && this.areTransformed() && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\r\n\t\t\thoversPaused = true;\r\n\t\t\tthis.cancelAllHovers(ev);\r\n\t\t}\r\n\r\n\t\t// Remove any delayed outs\r\n\t\tthis.processDelayed();\r\n\r\n\t\t// Add pointer\r\n\t\tio.overPointers.moveValue(pointer);\r\n\r\n\t\t// Check if object is not yet hovered\r\n\t\tif (!io.isRealHover) {\r\n\r\n\t\t\t// Set element as hovered\r\n\t\t\tif (!hoversPaused) {\r\n\t\t\t\tio.isHover = true;\r\n\t\t\t\tio.isRealHover = true;\r\n\t\t\t\tthis.overObjects.moveValue(io);\r\n\t\t\t}\r\n\r\n\t\t\t// Generate body track event. This is needed so that if element loads\r\n\t\t\t// under unmoved mouse cursor, we still need all the actions that are\r\n\t\t\t// required to happen to kick in.\r\n\t\t\tthis.handleTrack(this.body, pointer, ev, true);\r\n\r\n\t\t\t// Event\r\n\t\t\tif (io.events.isEnabled(\"over\") && !system.isPaused && !hoversPaused) {\r\n\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"over\"] = {\r\n\t\t\t\t\ttype: \"over\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpointer: pointer,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tio.events.dispatchImmediately(\"over\", imev);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles when [[InteractionObject]] is no longer hovered.\r\n\t *\r\n\t * If `soft = true`, this means that method is being invoked by some other\r\n\t * code, not hard \"out\" function, like `handleUp` which implies we need to\r\n\t * run additional checks before unhovering the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Interaction object\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t * @param soft     Invoked by helper function\r\n\t * @param force    Force imediate out\r\n\t */\r\n\tpublic handleOut(io: InteractionObject, pointer: IPointer, ev: MouseEvent | TouchEvent, soft: boolean = false, force: boolean = false): void {\r\n\r\n\t\tif (!io.hoverable) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remove pointer\r\n\t\tio.overPointers.removeValue(pointer);\r\n\r\n\t\t// Check if element is still hovered\r\n\t\tif (io.isHover && (!io.hasDelayedOut || force)) {\r\n\r\n\r\n\t\t\t// Should we run additional checks?\r\n\t\t\tif (soft && io.overPointers.length) {\r\n\t\t\t\t// There are still pointers hovering - don't do anything else and\r\n\t\t\t\t// wait until either no over pointers are there or we get a hard out\r\n\t\t\t\t// event.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Should we delay \"out\" if this is happening on a touch device?\r\n\t\t\tif (pointer.touch && !force && !this.old(pointer)) {\r\n\r\n\t\t\t\t// This is a touch pointer, and it hasn't moved, let's pretend\r\n\t\t\t\t// the object is still hovered, and act as per \"behavior\" setting\r\n\t\t\t\tlet behavior = this.getHoverOption(io, \"touchOutBehavior\");\r\n\t\t\t\tif (behavior == \"leave\") {\r\n\t\t\t\t\t// Set to \"leave\", so we do not execute any \"out\" event.\r\n\t\t\t\t\t// It will be handled by any other interaction that happens\r\n\t\t\t\t\t// afterwards.\r\n\t\t\t\t\tthis._delayedEvents.out.push({\r\n\t\t\t\t\t\ttype: \"out\",\r\n\t\t\t\t\t\tio: io,\r\n\t\t\t\t\t\tpointer: pointer,\r\n\t\t\t\t\t\tevent: ev,\r\n\t\t\t\t\t\tkeepUntil: $time.getTime() + 500\r\n\t\t\t\t\t});\r\n\t\t\t\t\tio.hasDelayedOut = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse if (behavior == \"delay\" && this.getHoverOption(io, \"touchOutDelay\")) {\r\n\t\t\t\t\tthis._delayedEvents.out.push({\r\n\t\t\t\t\t\ttype: \"out\",\r\n\t\t\t\t\t\tio: io,\r\n\t\t\t\t\t\tpointer: pointer,\r\n\t\t\t\t\t\tevent: ev,\r\n\t\t\t\t\t\tkeepUntil: $time.getTime() + 500,\r\n\t\t\t\t\t\ttimeout: this.setTimeout(() => {\r\n\t\t\t\t\t\t\tthis.handleOut(io, pointer, ev, true);\r\n\t\t\t\t\t\t}, this.getHoverOption(io, \"touchOutDelay\"))\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Nothing for \"remove\" - that's how it works \"out-of-the-box\"\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set element as not hovered\r\n\t\t\tio.isHover = false;\r\n\t\t\tthis.overObjects.removeValue(io);\r\n\r\n\t\t\t// Invoke event\r\n\t\t\tif (!io.isDisposed() && io.events.isEnabled(\"out\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"out\"] = {\r\n\t\t\t\t\ttype: \"out\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpointer: pointer,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tio.events.dispatchImmediately(\"out\", imev);\r\n\t\t\t}\r\n\r\n\t\t\t// Reset object from lefover delayed outs, pointers\r\n\t\t\tio.overPointers.clear();\r\n\t\t\tio.hasDelayedOut = false;\r\n\t\t\t// @todo (clean delayed)\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes dalyed events, such as \"out\" event that was initiated for\r\n\t * elements by touch.\r\n\t */\r\n\tprivate processDelayed(): void {\r\n\t\tlet delayedEvent;\r\n\r\n\t\twhile (true) {\r\n\t\t\tdelayedEvent = this._delayedEvents.out.pop();\r\n\r\n\t\t\tif (!delayedEvent) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (delayedEvent.timeout) {\r\n\t\t\t\tdelayedEvent.timeout.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tthis.handleOut(delayedEvent.io, delayedEvent.pointer, delayedEvent.event, false, true);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks on pointer down.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic handleDown(io: InteractionObject, pointer: IPointer, ev: MouseEvent | TouchEvent | undefined): void {\r\n\r\n\t\t// Need to prevent default event from happening on transformable objects\r\n\t\tthis.maybePreventDefault(io, ev, pointer);\r\n\r\n\t\t// Stop inertia animations if they're currently being played out\r\n\t\tif (io.inert) {\r\n\t\t\tthis.stopInertia(io);\r\n\t\t}\r\n\r\n\t\t// Trigger hover because some touch devices won't trigger over events\r\n\t\t// on their own\r\n\t\tthis.handleOver(io, pointer, ev, true);\r\n\r\n\t\t// Add pointer to list\r\n\t\tio.downPointers.moveValue(pointer);\r\n\r\n\t\t// Apply styles if necessary\r\n\t\tthis.applyCursorDownStyle(io, pointer);\r\n\r\n\t\t// Check if object is already down\r\n\t\tif (!io.isDown) {\r\n\r\n\t\t\t// Lose focus if needed\r\n\t\t\tif (io.focusable !== false && this.getHitOption(io, \"noFocus\") && this.focusedObject) {\r\n\t\t\t\t$dom.blur();\r\n\t\t\t}\r\n\r\n\t\t\t// Set object as hovered\r\n\t\t\tio.isDown = true;\r\n\t\t\tthis.downObjects.moveValue(io);\r\n\r\n\t\t\t// Prep object for dragging and/or resizing\r\n\t\t\tif (io.draggable) {\r\n\t\t\t\tthis.processDragStart(io, pointer, ev);\r\n\t\t\t}\r\n\t\t\tif (io.resizable) {\r\n\t\t\t\tthis.processResizeStart(io, pointer, ev);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Dispatch \"down\" event\r\n\t\tif (io.events.isEnabled(\"down\") && !system.isPaused) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"down\"] = {\r\n\t\t\t\ttype: \"down\",\r\n\t\t\t\ttarget: io,\r\n\t\t\t\tevent: ev,\r\n\t\t\t\tpointer: pointer,\r\n\t\t\t\ttouch: pointer.touch\r\n\t\t\t};\r\n\t\t\tio.events.dispatchImmediately(\"down\", imev);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks on pointer up.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic handleGlobalUp(pointer: IPointer, ev: MouseEvent | TouchEvent | undefined, cancelled: boolean = false): void {\r\n\t\tconst sorted = this.downObjects.values.slice();\r\n\r\n\t\tsorted.sort((x, y) => {\r\n\t\t\tif (x && y) {\r\n\t\t\t\tconst pos = x.element.compareDocumentPosition(y.element);\r\n\r\n\t\t\t\tif (pos & Node.DOCUMENT_POSITION_CONTAINED_BY) {\r\n\t\t\t\t\treturn 1;\r\n\r\n\t\t\t\t} else if (pos & Node.DOCUMENT_POSITION_CONTAINS) {\r\n\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Process all down objects\r\n\t\t$array.each(sorted, (io) => {\r\n\t\t\t// Check if this particular pointer is pressing down\r\n\t\t\t// on object\r\n\t\t\tif (io && io.downPointers.contains(pointer)) {\r\n\t\t\t\tthis.handleUp(io, pointer, ev, cancelled);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates all pointers being up once mouse leaves document area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic handleDocumentLeave(ev: MouseEvent): void {\r\n\r\n\t\t// Process all down objects\r\n\t\t$iter.each(this.downObjects.backwards().iterator(), (io) => {\r\n\t\t\tio.downPointers.each((pointer) => {\r\n\t\t\t\tthis.handleUp(io, pointer, ev);\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles when [[InteractionObject]] is no longer hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Interaction object\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic handleUp(io: InteractionObject, pointer: IPointer, ev: MouseEvent | TouchEvent, cancelled: boolean = false): void {\r\n\r\n\t\t// Restore cursor style\r\n\t\tthis.restoreCursorDownStyle(io, pointer);\r\n\r\n\t\t// Remove pointer from the list\r\n\t\tio.downPointers.removeValue(pointer);\r\n\r\n\t\t// Trigger out because some touch devices won't trigger out events\r\n\t\t// on their own\r\n\t\tif (pointer.touch || this._useTouchEventsOnly) {\r\n\t\t\tthis.handleOut(io, pointer, ev, true);\r\n\t\t}\r\n\r\n\t\t// Check if object still down\r\n\t\tif (io.isDown) {\r\n\r\n\t\t\t// Check if there are no other pointers hovering this element\r\n\t\t\tif (io.downPointers.length == 0) {\r\n\t\t\t\t// Set element as no longer down\r\n\t\t\t\tio.isDown = false;\r\n\t\t\t\tthis.downObjects.removeValue(io);\r\n\t\t\t}\r\n\r\n\t\t\t// Dispatch \"up\" event\r\n\t\t\tif (io.events.isEnabled(\"up\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"up\"] = {\r\n\t\t\t\t\ttype: \"up\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpointer: pointer,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tio.events.dispatchImmediately(\"up\", imev);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if this was not a cancelled event.\r\n\t\t\t// If event was canelled (which might happen if gesture resulted in\r\n\t\t\t// navigation or page scroll) there's no point in triggering hit and\r\n\t\t\t// other actions.\r\n\t\t\tif (!cancelled) {\r\n\r\n\t\t\t\t// Handle swiping-related stuff\r\n\t\t\t\tif (io.swipeable && this.swiped(io, pointer)) {\r\n\t\t\t\t\t// Swiped - nothing else should happen\r\n\t\t\t\t\tthis.handleSwipe(io, pointer, ev);\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Check if it maybe a click\r\n\t\t\t\t\tif (io.clickable && !this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\r\n\t\t\t\t\t\tthis.handleHit(io, pointer, ev);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Handle inertia\r\n\t\t\t\t\tif (io.inert && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\r\n\t\t\t\t\t\tthis.handleInertia(io, pointer);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (io.draggable) {\r\n\t\t\t\t\t\tthis.processDragStop(io, pointer, ev);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (io.resizable) {\r\n\t\t\t\t\t\tthis.processResizeStop(io, pointer, ev);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if event needs to be prevented on draggable and such items, so that\r\n\t * touch gestures like navigation and scroll do not kick in.\r\n\t *\r\n\t * @param io  Object\r\n\t * @param ev  Event\r\n\t */\r\n\tprivate maybePreventDefault(io: InteractionObject, ev: MouseEvent | TouchEvent | undefined, pointer?: IPointer): void {\r\n\t\tif (\r\n\t\t\t$type.hasValue(ev)\r\n\t\t\t&& (io.draggable || io.swipeable || io.trackable || io.resizable)\r\n\t\t\t&& !this.isGlobalElement(io)\r\n\t\t\t&& ev.cancelable !== false\r\n\t\t\t&& (!io.isTouchProtected || !pointer || !pointer.touch)\r\n\t\t) {\r\n\t\t\tev.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cancels all hovers on all currently hovered objects.\r\n\t *\r\n\t * @param  pointer  Pointer\r\n\t * @param  ev       Event\r\n\t */\r\n\tprivate cancelAllHovers(ev?: MouseEvent | TouchEvent): void {\r\n\t\t//this.overObjects.each((io) => {\r\n\t\t$iter.each(this.overObjects.backwards().iterator(), (io) => {\r\n\t\t\tif (io) {\r\n\t\t\t\tconst pointer = io.overPointers.getIndex(0);\r\n\t\t\t\tthis.handleOut(io, pointer, ev, true, true);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if hovers should be cancelled on transform as per global options.\r\n\t * @param   pointer  Pointer\r\n\t * @return           Cancel?\r\n\t */\r\n\tprivate shouldCancelHovers(pointer: IPointer): boolean {\r\n\t\treturn options.disableHoverOnTransform == \"always\" || (options.disableHoverOnTransform == \"touch\" && pointer.touch);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer move.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic handleGlobalMove(pointer: IPointer, ev: MouseEvent | TouchEvent): void {\r\n\r\n\t\t// Process hovered elements\r\n\t\t// We check if the element became unhovered without reporting the mouseout\r\n\t\t// event. (it happens in some cases)\r\n\t\tif (!pointer.touch) {\r\n\t\t\tconst target = <HTMLElement>$dom.eventTarget(<Event>pointer.lastEvent);\r\n\r\n\t\t\t$iter.each(this.overObjects.backwards().iterator(), (io) => {\r\n\t\t\t\t// Is this pointer relevant to element?\r\n\t\t\t\tif (io && io.overPointers.contains(pointer) && io.hoverable) {\r\n\t\t\t\t\t// Check if the element is still hovered\r\n\t\t\t\t\tlet reset = false;\r\n\t\t\t\t\tif (io.element && pointer.lastEvent) {\r\n\t\t\t\t\t\tif (!$dom.contains(io.element, target)) {\r\n\t\t\t\t\t\t\treset = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treset = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (reset) {\r\n\t\t\t\t\t\tthis.handleOut(io, pointer, ev, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t// Process down elements\r\n\t\t$iter.each(this.transformedObjects.backwards().iterator(), (io) => {\r\n\t\t\t// Is this pointer relevant to element?\r\n\t\t\tif (io.downPointers.contains(pointer) &&\r\n\t\t\t\t// Swipe still happening?\r\n\t\t\t\t!(io.swipeable && this.swiping(io, pointer)) &&\r\n\t\t\t\t(io.draggable || io.resizable)) {\r\n\t\t\t\tthis.handleTransform(io, ev);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Process tracked elements\r\n\t\t$iter.each(this.trackedObjects.backwards().iterator(), (io) => {\r\n\t\t\t// Is this pointer relevant to element?\r\n\t\t\tif (!io.overPointers.contains(pointer)) {\r\n\t\t\t\tthis.handleTrack(io, pointer, ev);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Handles reporting of pointer movement.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io        Element\r\n\t * @param pointer    Pointer\r\n\t * @param ev         Original event\r\n\t * @param skipCheck  Sould we skip check if cursor actually moved\r\n\t */\r\n\tpublic handleTrack(io: InteractionObject, pointer: IPointer, ev: MouseEvent | TouchEvent, skipCheck = false): void {\r\n\r\n\t\t// Do nothing if the cursor did not actually move\r\n\t\tif (!skipCheck && !this.moved(pointer, 0)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Initiate TRACK event\r\n\t\tif (io.events.isEnabled(\"track\") && !system.isPaused) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"track\"] = {\r\n\t\t\t\ttype: \"track\",\r\n\t\t\t\ttarget: io,\r\n\t\t\t\tevent: ev,\r\n\t\t\t\tpoint: pointer.point,\r\n\t\t\t\tpointer: pointer,\r\n\t\t\t\ttouch: pointer.touch\r\n\t\t\t};\r\n\t\t\tio.events.dispatchImmediately(\"track\", imev);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles swipe action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic handleSwipe(io: InteractionObject, pointer: IPointer, ev: MouseEvent | TouchEvent): void {\r\n\r\n\t\t// We pass in InteractionEvent with shift in mouse coordinates\r\n\t\t// between when the drag started and ended\r\n\t\tif (io.events.isEnabled(\"swipe\") && !system.isPaused) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"swipe\"] = {\r\n\t\t\t\ttype: \"swipe\",\r\n\t\t\t\ttarget: io,\r\n\t\t\t\tevent: ev,\r\n\t\t\t\ttouch: pointer.touch\r\n\t\t\t};\r\n\t\t\tio.events.dispatchImmediately(\"swipe\", imev);\r\n\t\t}\r\n\r\n\t\tif (pointer.startPoint.x < pointer.point.x) {\r\n\t\t\tif (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"swiperight\"] = {\r\n\t\t\t\t\ttype: \"swiperight\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tio.events.dispatchImmediately(\"swiperight\", imev);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (io.events.isEnabled(\"swipeleft\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"swipeleft\"] = {\r\n\t\t\t\t\ttype: \"swipeleft\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\ttouch: pointer.touch\r\n\t\t\t\t};\r\n\t\t\t\tio.events.dispatchImmediately(\"swipeleft\", imev);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event triggering for wheel rotation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t * @param deltaX   Horizontal shift\r\n\t * @param deltaY   Vertical shift\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic handleWheel(io: InteractionObject, pointer: IPointer, deltaX: number, deltaY: number, ev: WheelEvent): void {\r\n\t\tconst shift: IPoint = {\r\n\t\t\tx: deltaX,\r\n\t\t\ty: deltaY\r\n\t\t};\r\n\r\n\t\t// Trigger generic WHEEL event\r\n\t\tif (io.events.isEnabled(\"wheel\") && !system.isPaused) {\r\n\t\t\tio.events.dispatchImmediately(\"wheel\", {\r\n\t\t\t\ttype: \"wheel\",\r\n\t\t\t\ttarget: io,\r\n\t\t\t\tevent: ev,\r\n\t\t\t\tpoint: pointer.point,\r\n\t\t\t\tshift: shift\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Trigger direction-specific events\r\n\r\n\t\t// Horizontal\r\n\t\tif (deltaX < 0) {\r\n\t\t\tif (io.events.isEnabled(\"wheelleft\") && !system.isPaused) {\r\n\t\t\t\tio.events.dispatchImmediately(\"wheelleft\", {\r\n\t\t\t\t\ttype: \"wheelleft\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpoint: pointer.point,\r\n\t\t\t\t\tshift: shift\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t} else if (deltaX > 0) {\r\n\t\t\tif (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\r\n\t\t\t\tio.events.dispatchImmediately(\"wheelright\", {\r\n\t\t\t\t\ttype: \"wheelright\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpoint: pointer.point,\r\n\t\t\t\t\tshift: shift\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Vertical\r\n\t\t} else if (deltaY < 0) {\r\n\t\t\tif (io.events.isEnabled(\"wheelup\") && !system.isPaused) {\r\n\t\t\t\tio.events.dispatchImmediately(\"wheelup\", {\r\n\t\t\t\t\ttype: \"wheelup\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpoint: pointer.point,\r\n\t\t\t\t\tshift: shift\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t} else if (deltaY > 0) {\r\n\t\t\tif (io.events.isEnabled(\"wheeldown\") && !system.isPaused) {\r\n\t\t\t\tio.events.dispatchImmediately(\"wheeldown\", {\r\n\t\t\t\t\ttype: \"wheeldown\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tpoint: pointer.point,\r\n\t\t\t\t\tshift: shift\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates inertia checking sub-routines for different movement types:\r\n\t * drag, resize.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite\r\n\t * @param pointer\r\n\t */\r\n\tpublic handleInertia(io: InteractionObject, pointer: IPointer): void {\r\n\r\n\t\tif (io.draggable && io.downPointers.length === 0) {\r\n\t\t\tthis.handleMoveInertia(io, pointer);\r\n\t\t}\r\n\r\n\t\tif (io.resizable && io.downPointers.length > 1) {\r\n\t\t\tthis.handleResizeInertia(io, pointer);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Continues moving the element to simulate the effect of inertia. Happens\r\n\t * when `inert` and `draggable` object is dragged and then released.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t */\r\n\tpublic handleMoveInertia(io: InteractionObject, pointer: IPointer): void {\r\n\t\tlet interaction = io;\r\n\t\tlet type: \"move\" = \"move\";\r\n\t\tlet point = {\r\n\t\t\t\"x\": pointer.point.x,\r\n\t\t\t\"y\": pointer.point.y\r\n\t\t};\r\n\t\tlet startPoint = {\r\n\t\t\t\"x\": pointer.startPoint.x,\r\n\t\t\t\"y\": pointer.startPoint.y\r\n\t\t};\r\n\r\n\t\t// Init inertia object\r\n\t\tlet inertia = new Inertia(interaction, type, point, startPoint);\r\n\r\n\t\t// Get inertia data\r\n\t\tlet ref = this.getTrailPoint(pointer, $time.getTime() - this.getInertiaOption(io, \"move\", \"time\"));\r\n\t\tif (typeof ref === \"undefined\") {\r\n\t\t\tthis.processDragStop(io, pointer, pointer.lastUpEvent);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Init animation options\r\n\t\tlet factor = this.getInertiaOption(io, \"move\", \"factor\");\r\n\t\tlet animationOptions = [{\r\n\t\t\t\"to\": pointer.point.x + (pointer.point.x - ref.point.x) * factor,\r\n\t\t\t\"property\": \"x\"\r\n\t\t}, {\r\n\t\t\t\"to\": pointer.point.y + (pointer.point.y - ref.point.y) * factor,\r\n\t\t\t\"property\": \"y\"\r\n\t\t}];\r\n\r\n\t\t// Start animation\r\n\t\tlet animation: Animation = new Animation(\r\n\t\t\tinertia,\r\n\t\t\tanimationOptions,\r\n\t\t\tthis.getInertiaOption(io, \"move\", \"duration\"),\r\n\t\t\tthis.getInertiaOption(io, \"move\", \"easing\")\r\n\t\t).start();\r\n\t\tthis._disposers.push(animation.events.on(\"animationended\", (ev) => {\r\n\t\t\tinertia.done();\r\n\t\t}));\r\n\r\n\t\t// Add inertia object\r\n\t\tio.inertias.setKey(\"move\", inertia);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Continues resizing of a `resizable` element after it is resized and\r\n\t * released.\r\n\t *\r\n\t * **NOTE:** this is is just a placeholder function. No actual fucntionality\r\n\t * is implemented, yet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t */\r\n\tpublic handleResizeInertia(io: InteractionObject, pointer: IPointer): void {\r\n\r\n\t\t// Some day, folks. Some day...\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates element's position and size based on position of\r\n\t * all its related pointers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io  Element\r\n\t * @param ev  Original event\r\n\t */\r\n\tpublic handleTransform(io: InteractionObject, ev: MouseEvent | TouchEvent): void {\r\n\r\n\t\t// Get primary pointer and its respective points\r\n\t\tlet pointer1: $type.Optional<IPointer> = io.downPointers.getIndex(0);\r\n\t\tlet point1: IPoint = null;\r\n\t\tlet startPoint1: IPoint = null;\r\n\r\n\t\tif (pointer1) {\r\n\t\t\tpoint1 = pointer1.point;\r\n\t\t\tstartPoint1 = pointer1.startPoint;\r\n\t\t}\r\n\r\n\t\t// Init secondary pointer\r\n\t\tlet pointer2: $type.Optional<IPointer>;\r\n\t\tlet point2: IPoint;\r\n\t\tlet startPoint2: IPoint;\r\n\r\n\t\t// Use center of the sprite to simulate \"second\" point of touch\r\n\t\tpoint2 = {\r\n\t\t\t\"x\": io.originalPosition.x,\r\n\t\t\t\"y\": io.originalPosition.y\r\n\t\t};\r\n\t\tstartPoint2 = point2;\r\n\r\n\t\t// Determine if it's a sinngle pointer or multi\r\n\t\tlet singlePoint: boolean = true;\r\n\t\tfor (let i = 1; i < io.downPointers.length; i++) {\r\n\r\n\t\t\t// Get pointer\r\n\t\t\tlet nextPointer = io.downPointers.getIndex(i);\r\n\r\n\t\t\t// Doublecheck if it's not the same pointer by comparing original position\r\n\t\t\tif (startPoint1.x != nextPointer.startPoint.x && startPoint1.y != nextPointer.startPoint.y) {\r\n\r\n\t\t\t\t// Several pointers down\r\n\t\t\t\tsinglePoint = false;\r\n\r\n\t\t\t\t// Get second pointer\r\n\t\t\t\tpointer2 = nextPointer;\r\n\t\t\t\tpoint2 = pointer2.point;\r\n\t\t\t\tstartPoint2 = pointer2.startPoint;\r\n\r\n\t\t\t\t// Stop looking\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Primary touch point moved?\r\n\t\tlet pointer1Moved = pointer1 && this.moved(pointer1, 0);\r\n\r\n\t\t// Report DRAG_START if necessary\r\n\t\tif (io.draggable && pointer1 && pointer1.dragStartEvents && pointer1.dragStartEvents.length && pointer1Moved) {\r\n\t\t\tif (io.events.isEnabled(\"dragstart\") && !system.isPaused) {\r\n\t\t\t\tio.events.dispatchImmediately(\"dragstart\", pointer1.dragStartEvents.shift());\r\n\t\t\t}\r\n\t\t\t//delete pointer1.dragStartEvents;\r\n\t\t}\r\n\r\n\t\t// Determine what we do in order of superiority\r\n\t\tif (singlePoint && io.draggable) {\r\n\r\n\t\t\t// We have only one pointer and the Sprite is draggable\r\n\t\t\t// There's nothing else to be done - just move it\r\n\t\t\tthis.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\r\n\r\n\t\t\tif (this.shouldCancelHovers(pointer1) && this.moved(pointer1, this.getHitOption(io, \"hitTolerance\"))) {\r\n\t\t\t\tthis.cancelAllHovers(ev);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\t// Check if second touch point moved\r\n\t\t\tlet pointer2Moved = pointer2 && this.moved(pointer2, 0);\r\n\r\n\t\t\tif (\r\n\t\t\t\t(this.shouldCancelHovers(pointer1) && this.moved(pointer1, this.getHitOption(io, \"hitTolerance\")))\r\n\t\t\t\t||\r\n\t\t\t\t(this.shouldCancelHovers(pointer2) && this.moved(pointer2, this.getHitOption(io, \"hitTolerance\")))\r\n\t\t\t) {\r\n\t\t\t\tthis.cancelAllHovers(ev);\r\n\t\t\t}\r\n\r\n\t\t\tif (io.draggable && io.resizable) {\r\n\t\t\t\t//this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);\r\n\t\t\t\tthis.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved, pointer1.touch);\r\n\t\t\t\tthis.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tif (io.draggable) {\r\n\t\t\t\t\tthis.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (io.resizable && (!singlePoint || ev.ctrlKey)) {\r\n\t\t\t\t\tthis.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles movement of the dragged element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io            Element\r\n\t * @param point         Current point of the pointer\r\n\t * @param startPoint    Starting point of the pointer\r\n\t * @param ev            Original event\r\n\t * @param pointerMoved  Did pointer move?\r\n\t */\r\n\tpublic handleTransformMove(io: InteractionObject, point: IPoint, startPoint: IPoint, ev: MouseEvent | TouchEvent | KeyboardEvent, pointerMoved: boolean, touch: boolean): void {\r\n\r\n\t\tif (pointerMoved) {\r\n\t\t\tif (io.events.isEnabled(\"drag\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\r\n\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"drag\"] = {\r\n\t\t\t\t\ttype: \"drag\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\tevent: ev,\r\n\t\t\t\t\tshift: {\r\n\t\t\t\t\t\t\"x\": point.x - startPoint.x,\r\n\t\t\t\t\t\t\"y\": point.y - startPoint.y\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstartPoint: startPoint,\r\n\t\t\t\t\tpoint: point,\r\n\t\t\t\t\ttouch: touch\r\n\t\t\t\t};\r\n\t\t\t\tio.events.dispatchImmediately(\"drag\", imev);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles resizing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io            Element\r\n\t * @param point1        Current position of reference point #1\r\n\t * @param startPoint1   Original position of reference point #1\r\n\t * @param point2        Current position of reference point #2\r\n\t * @param startPoint2   Original position of reference point #2\r\n\t * @param ev            Original event\r\n\t * @param pointerMoved  Did pointer move?\r\n\t */\r\n\tpublic handleTransformResize(io: InteractionObject, point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint, ev: MouseEvent | TouchEvent, pointerMoved: boolean, touch: boolean): void {\r\n\t\tif (io.events.isEnabled(\"resize\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\r\n\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"resize\"] = {\r\n\t\t\t\ttype: \"resize\",\r\n\t\t\t\ttarget: io,\r\n\t\t\t\tevent: ev,\r\n\t\t\t\tscale: $math.getScale(point1, startPoint1, point2, startPoint2),\r\n\t\t\t\tstartPoint1: startPoint1,\r\n\t\t\t\tpoint1: point1,\r\n\t\t\t\tstartPoint2: startPoint2,\r\n\t\t\t\tpoint2: point2,\r\n\t\t\t\ttouch: touch\r\n\t\t\t};\r\n\t\t\tio.events.dispatchImmediately(\"resize\", imev);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles all the preparations of the element when it starts to be dragged.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic processDragStart(io: InteractionObject, pointer?: IPointer, ev?: MouseEvent | TouchEvent): void {\r\n\r\n\t\t// Add to draggedObjects\r\n\t\tthis.transformedObjects.moveValue(io);\r\n\r\n\t\tif (this.shouldCancelHovers(pointer)) {\r\n\t\t\tthis.cancelAllHovers(ev);\r\n\t\t}\r\n\r\n\t\t// Report \"dragstart\"\r\n\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"dragstart\"] = {\r\n\t\t\ttype: \"dragstart\",\r\n\t\t\ttarget: io,\r\n\t\t\tevent: ev,\r\n\t\t\ttouch: pointer ? pointer.touch : false\r\n\t\t};\r\n\r\n\t\t// Log object that we are starting to drag, so we can check against and\r\n\t\t// avoid hovers on other objects that might be in the path of movement.\r\n\t\tif (pointer) {\r\n\t\t\tpointer.dragTarget = io;\r\n\t\t\t//pointer.startPoint = pointer.point;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * If pointer is set we will not fire the event until the pointer has\r\n\t\t * actually moved. If it's not set we don't have to wait for anything, so we\r\n\t\t * just fire off the event right away.\r\n\t\t */\r\n\t\tif (pointer && pointer.dragStartEvents) {\r\n\t\t\tpointer.dragStartEvents.push(imev);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!system.isPaused) {\r\n\t\t\t\tio.dispatchImmediately(\"dragstart\", imev);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finishes up element drag operation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic processDragStop(io: InteractionObject, pointer?: IPointer, ev?: MouseEvent | TouchEvent): void {\r\n\r\n\t\t// Pointer set?\r\n\t\tif (!pointer) {\r\n\t\t\tpointer = this.getDragPointer(io);\r\n\t\t}\r\n\r\n\t\t// Unset drag object\r\n\t\tif (pointer) {\r\n\t\t\tpointer.dragTarget = undefined;\r\n\t\t}\r\n\r\n\t\t// Removed from transformedObjects\r\n\t\tthis.transformedObjects.removeValue(io);\r\n\r\n\t\t// Unlock document\r\n\t\t//this.unlockDocument();\r\n\r\n\t\t// Report dragstop\r\n\t\tif (!pointer || this.moved(pointer, 0)) {\r\n\t\t\tif (io.events.isEnabled(\"dragstop\") && !system.isPaused) {\r\n\t\t\t\tlet imev: AMEvent<InteractionObject, IInteractionObjectEvents>[\"dragstop\"] = {\r\n\t\t\t\t\ttype: \"dragstop\",\r\n\t\t\t\t\ttarget: io,\r\n\t\t\t\t\ttouch: pointer ? pointer.touch : false\r\n\t\t\t\t};\r\n\t\t\t\tio.events.dispatchImmediately(\"dragstop\", imev);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles all the preparations of the element when it starts to be resized.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic processResizeStart(io: InteractionObject, pointer?: IPointer, ev?: MouseEvent | TouchEvent): void {\r\n\r\n\t\t// Add to draggedObjects\r\n\t\tthis.transformedObjects.moveValue(io);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Finishes up element drag operation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t * @param ev       Original event\r\n\t */\r\n\tpublic processResizeStop(io: InteractionObject, pointer?: IPointer, ev?: MouseEvent | TouchEvent): void {\r\n\r\n\t\t// Removed from transformedObjects\r\n\t\tthis.transformedObjects.removeValue(io);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Controls for InteractionObjects initiating directly\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Manually triggers drag start on the element. Could be useful in cases\r\n\t * where tracking or dragging one element can also influence dragging another\r\n\t * element.\r\n\t *\r\n\t * Passing in `pointer` reference is advisable. If not passed in it will try\r\n\t * to determine which pointer to attach to. However, it's better to specify\r\n\t * it explicitly.\r\n\t *\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t */\r\n\tpublic dragStart(io: InteractionObject, pointer?: IPointer): void {\r\n\t\tif (!pointer) {\r\n\t\t\tpointer = this.getDragPointer(io);\r\n\t\t}\r\n\r\n\t\tif (pointer) {\r\n\t\t\tthis.handleDown(io, pointer, pointer.lastDownEvent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Manually ends drag on the element.\r\n\t *\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t */\r\n\tpublic dragStop(io: InteractionObject, pointer?: IPointer, cancelled?: boolean): void {\r\n\t\tif (!pointer) {\r\n\t\t\tpointer = this.getDragPointer(io);\r\n\t\t}\r\n\r\n\t\tif (pointer && !cancelled) {\r\n\t\t\tthis.handleGlobalUp(pointer, pointer.lastUpEvent, cancelled);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This method uses a fuzzy logic to find the pointer to be used for dragging.\r\n\t * Beware that this is not a rock-solid solution. If there are a few objects\r\n\t * being dragged at the same time, you may get unexepected results.\r\n\t *\r\n\t * @param io  InteractionObject to get pointers from\r\n\t * @return Pointer currently being used for dragging\r\n\t */\r\n\tpublic getDragPointer(io?: InteractionObject): $type.Optional<IPointer> {\r\n\t\tif (io) {\r\n\t\t\t// InteractionObject is supplied\r\n\t\t\t// Use it's first down pointer\r\n\t\t\treturn io.downPointers.getIndex(0);\r\n\t\t}\r\n\t\telse if (this.transformedObjects.length) {\r\n\t\t\t// Use first dragged object\r\n\t\t\treturn this.getDragPointer(this.transformedObjects.getIndex(0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * Utils\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns pointer id for the given event object.\r\n\t *\r\n\t * @param ev  Event\r\n\t * @return Pointer ID\r\n\t */\r\n\tprotected getPointerId(ev: any): string {\r\n\t\tlet id = \"\";\r\n\t\tif ($type.hasValue(ev.identifier)) {\r\n\t\t\tid = \"\" + <string>ev.identifier;\r\n\t\t} else if ($type.hasValue(ev.pointerId)) {\r\n\t\t\tid = \"\" + <string>ev.pointerId;\r\n\t\t} else {\r\n\t\t\tid = \"m\";\r\n\t\t}\r\n\t\treturn id.replace(\"-\", \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a cursor position of the event.\r\n\t *\r\n\t * @param ev  Original event\r\n\t * @return Event point\r\n\t */\r\n\tprotected getPointerPoint(ev: MouseEvent | Touch): IPoint {\r\n\t\treturn {\r\n\t\t\t\"x\": ev.clientX,\r\n\t\t\t\"y\": ev.clientY\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[Pointer]] object that is associated with the Event.\r\n\t *\r\n\t * If no such [[Pointer]] object exists, it is created.\r\n\t *\r\n\t * @param ev  Event\r\n\t * @return Pointer\r\n\t */\r\n\tprotected getPointer(ev: MouseEvent | Touch): IPointer {\r\n\r\n\t\t// Get pointer id\r\n\t\tlet id = this.getPointerId(ev);\r\n\r\n\t\t// Get current coordinates\r\n\t\tlet point = this.getPointerPoint(ev);\r\n\r\n\t\t// Look for the pointer in the Dictionary if it maybe already exists\r\n\t\tlet pointer: IPointer;\r\n\t\tif (this.pointers.hasKey(id)) {\r\n\r\n\t\t\t// We already have such pointer\r\n\t\t\tpointer = this.pointers.getKey(id)!;\r\n\r\n\t\t\t// We need this, because Edge reuses pointer ids across touch and mouse\r\n\t\t\tpointer.touch = this.isPointerTouch(ev);\r\n\r\n\t\t\t// Reset pointer\r\n\t\t\t//pointer.point = point;\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Init pointer\r\n\t\t\tpointer = {\r\n\t\t\t\t\"id\": id,\r\n\t\t\t\t//\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"pointer\"),\r\n\t\t\t\t//\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"mouse\"),\r\n\t\t\t\t\"touch\": this.isPointerTouch(ev),\r\n\t\t\t\t\"startPoint\": point,\r\n\t\t\t\t\"startTime\": $time.getTime(),\r\n\t\t\t\t\"point\": point,\r\n\t\t\t\t\"track\": [],\r\n\t\t\t\t\"swipeCanceled\": false,\r\n\t\t\t\t\"dragStartEvents\": []\r\n\t\t\t};\r\n\r\n\t\t\t// Add first breadcrumb\r\n\t\t\tthis.addBreadCrumb(pointer, point);\r\n\r\n\t\t\t// Add for re-use later\r\n\t\t\tthis.pointers.setKey(id, pointer);\r\n\t\t}\r\n\r\n\t\t// Log last event\r\n\t\tpointer.lastEvent = ev;\r\n\r\n\t\tthis.lastPointer = pointer;\r\n\r\n\t\treturn pointer;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if pointer event originated from a touch pointer or mouse.\r\n\t *\r\n\t * @param ev  Original event\r\n\t * @return Touch pointer?\r\n\t */\r\n\tprotected isPointerTouch(ev: MouseEvent | Touch): boolean {\r\n\t\tif (typeof Touch !== \"undefined\" && ev instanceof Touch) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse if (typeof PointerEvent !== \"undefined\" && ev instanceof PointerEvent && $type.hasValue((<any>ev).pointerType)) {\r\n\t\t\tswitch ((<any>ev).pointerType) {\r\n\t\t\t\tcase \"touch\":\r\n\t\t\t\tcase \"pen\":\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tcase \"mouse\":\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\treturn false;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn !(ev instanceof MouseEvent);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ($type.hasValue((<any>ev).type)) {\r\n\t\t\tif ((<any>ev).type.match(/^mouse/)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the poiner to original state, i.e. cleans movement information,\r\n\t * starting point, etc.\r\n\t *\r\n\t * @param pointer Pointer\r\n\t */\r\n\tprotected resetPointer(pointer: IPointer, ev: MouseEvent | PointerEvent | Touch): void {\r\n\t\t// Get current coordinates\r\n\t\tlet point = this.getPointerPoint(ev);;\r\n\t\tpointer.startTime = $time.getTime();\r\n\t\tpointer.startPoint = { x: point.x, y: point.y };\r\n\t\tpointer.point = { x: point.x, y: point.y };\r\n\t\tpointer.track = [];\r\n\t\tpointer.swipeCanceled = false;\r\n\t\t//clearTimeout(pointer.swipeTimeout);\r\n\t\t//clearTimeout(pointer.holdTimeout);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a \"breadcrumb\" point to the [[Pointer]] to log its movement path.\r\n\t *\r\n\t * @param pointer  Pointer\r\n\t * @param point    Point coordinates\r\n\t */\r\n\tprotected addBreadCrumb(pointer: IPointer, point: IPoint): void {\r\n\t\tpointer.track.push({\r\n\t\t\t\"timestamp\": $time.getTime(),\r\n\t\t\t\"point\": point\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the document for various touch-related operations.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic lockDocument(): void {\r\n\t\tthis.prepElement(this.body);\r\n\t}\r\n\r\n\t/**\r\n\t * Restores document functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic unlockDocument(): void {\r\n\t\tif (this.transformedObjects.length == 0) {\r\n\t\t\tthis.restoreAllStyles(this.body);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Lock element (disable all touch)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic lockElement(io: InteractionObject): void {\r\n\t\tthis.prepElement(io);\r\n\t}\r\n\r\n\t/**\r\n\t * Restores element's functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic unlockElement(io: InteractionObject): void {\r\n\t\tthis.restoreAllStyles(io);\r\n\t}\r\n\r\n\t/**\r\n\t * Locks document's wheel scroll.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic lockWheel(): void {\r\n\t\twindow.addEventListener(\r\n\t\t\tthis._pointerEvents.wheel,\r\n\t\t\tthis.wheelLockEvent,\r\n\t\t\tthis._passiveSupported ? { passive: false } : false\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Unlocks document's wheel scroll.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic unlockWheel(): void {\r\n\t\twindow.removeEventListener(\r\n\t\t\tthis._pointerEvents.wheel,\r\n\t\t\tthis.wheelLockEvent\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if top element at pointer's position belongs to the SVG.\r\n\t *\r\n\t * @ignore Exlude from docs\r\n\t * @param pointer  Pointer\r\n\t * @param svg      The <svg> element\r\n\t * @param id       A unique identifier of the object that is checking for locality\r\n\t * @return Belongs to SVG\r\n\t */\r\n\tpublic isLocalElement(pointer: IPointer, svg: SVGSVGElement, id: string): boolean {\r\n\t\tconst cached = this.getCache(\"local_pointer_\" + pointer.id);\r\n\t\tif ($type.hasValue(cached)) {\r\n\t\t\treturn cached;\r\n\t\t}\r\n\t\tconst doc = ($dom.getRoot(svg) || document);\r\n\t\tif (doc.elementFromPoint) {\r\n\t\t\tconst target = doc.elementFromPoint(pointer.point.x, pointer.point.y);\r\n\t\t\tconst local = target && $dom.contains(svg, <HTMLElement>target);\r\n\t\t\tthis.setCache(\"local_pointer_\" + pointer.id + \"_\" + id, local, 100);\r\n\t\t\treturn local;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * A function that cancels mouse wheel scroll.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev  Event object\r\n\t * @return Returns `false` to cancel\r\n\t */\r\n\tprotected wheelLockEvent(ev: Event): boolean {\r\n\t\tev.preventDefault();\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a set of styles to an element. Stores the original styles so they\r\n\t * can be restored later.\r\n\t *\r\n\t * @ignore\r\n\t * @param io      Element\r\n\t */\r\n\tpublic prepElement(io: InteractionObject): void {\r\n\r\n\t\tlet el = io.element;\r\n\r\n\t\tif (el) {\r\n\r\n\t\t\t// Define possible props\r\n\t\t\tlet props = [\r\n\t\t\t\t\"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\",\r\n\t\t\t\t\"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\",\r\n\t\t\t\t\"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\",\r\n\t\t\t\t\"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\",\r\n\t\t\t\t\"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\",\r\n\t\t\t\t\"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"\r\n\t\t\t];\r\n\t\t\tfor (let i = 0; i < props.length; i++) {\r\n\t\t\t\tif (props[i] in el.style) {\r\n\t\t\t\t\tthis.setTemporaryStyle(io, props[i], \"none\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Remove iOS-specific selection;\r\n\t\t\tthis.setTemporaryStyle(io, \"tapHighlightColor\", \"rgba(0, 0, 0, 0)\");\r\n\t\t\t//this.setTemporaryStyle(io, \"webkitOverflowScrolling\", \"none\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Restores replaced styles\r\n\t *\r\n\t * @ignore\r\n\t * @param  io  Element\r\n\t */\r\n\tpublic unprepElement(io: InteractionObject): void {\r\n\r\n\t\tlet el = io.element;\r\n\r\n\t\tif (el) {\r\n\r\n\t\t\t// Define possible props\r\n\t\t\tlet props = [\r\n\t\t\t\t\"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\",\r\n\t\t\t\t\"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\",\r\n\t\t\t\t\"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\",\r\n\t\t\t\t\"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\",\r\n\t\t\t\t\"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\",\r\n\t\t\t\t\"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"\r\n\t\t\t];\r\n\t\t\tfor (let i = 0; i < props.length; i++) {\r\n\t\t\t\tif (props[i] in el.style) {\r\n\t\t\t\t\tthis.restoreStyle(io, props[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Remove iOS-specific selection;\r\n\t\t\tthis.restoreStyle(io, \"tapHighlightColor\");\r\n\t\t\t//this.restoreStyle(io, \"webkitOverflowScrolling\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an option associated with hit events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io      Element\r\n\t * @param option  Option key\r\n\t * @return Option value\r\n\t */\r\n\tpublic getHitOption(io: InteractionObject, option: keyof IHitOptions): any {\r\n\t\tlet res = io.hitOptions[option];\r\n\t\tif (typeof res === \"undefined\") {\r\n\t\t\tres = this.hitOptions[option];\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an option associated with hover events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io      Element\r\n\t * @param option  Option key\r\n\t * @return Option value\r\n\t */\r\n\tpublic getHoverOption(io: InteractionObject, option: keyof IHoverOptions): any {\r\n\t\tlet res = io.hoverOptions[option];\r\n\t\tif (typeof res === \"undefined\") {\r\n\t\t\tres = this.hoverOptions[option];\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an option associated with swipe events.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io      Element\r\n\t * @param option  Option key\r\n\t * @return Option value\r\n\t */\r\n\tpublic getSwipeOption(io: InteractionObject, option: keyof ISwipeOptions): any {\r\n\t\tlet res = io.swipeOptions[option];\r\n\t\tif (typeof res === \"undefined\") {\r\n\t\t\tres = this.swipeOptions[option];\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an option for keyboard.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io      Element\r\n\t * @param option  Option key\r\n\t * @return Option value\r\n\t */\r\n\tpublic getKeyboardOption(io: InteractionObject, option: keyof IKeyboardOptions): any {\r\n\t\tlet res = io.keyboardOptions[option];\r\n\t\tif (typeof res === \"undefined\") {\r\n\t\t\tres = this.keyboardOptions[option];\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an option for mouse.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io      Element\r\n\t * @param option  Option key\r\n\t * @return Option value\r\n\t */\r\n\tpublic getMouseOption(io: InteractionObject, option: keyof IMouseOptions): any {\r\n\t\tlet res = io.mouseOptions[option];\r\n\t\tif (typeof res === \"undefined\") {\r\n\t\t\tres = this.mouseOptions[option];\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an option associated with inertia.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io      Element\r\n\t * @param type    Inertia type\r\n\t * @param option  Option key\r\n\t * @return Option value\r\n\t */\r\n\tpublic getInertiaOption(io: InteractionObject, type: InertiaTypes, option: keyof IInertiaOptions): any {\r\n\t\tlet options: any = io.inertiaOptions.getKey(type);\r\n\t\tlet res: IInertiaOptions;\r\n\t\tif (options && $type.hasValue(options[option])) {\r\n\t\t\tres = options[option];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tres = (<any>this.inertiaOptions.getKey(type))[option];\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Stops currently going on inertia. Useful if inertia is currently being\r\n\t * animated and the object is being interacted with.\r\n\t *\r\n\t * @param io Element\r\n\t */\r\n\tprotected stopInertia(io: InteractionObject): void {\r\n\t\tlet x: InertiaTypes;\r\n\t\tlet inertias: Array<InertiaTypes> = [\"move\", \"resize\"];\r\n\t\tfor (let i = 0; i < inertias.length; i++) {\r\n\t\t\tx = inertias[i];\r\n\t\t\tif (io.inertias.hasKey(x)) {\r\n\t\t\t\tlet inertia: $type.Optional<Inertia> = io.inertias.getKey(x);\r\n\t\t\t\tif (inertia) {\r\n\t\t\t\t\tinertia.dispose();\r\n\t\t\t\t\t//io.inertiaAnimations.removeKey(x);\r\n\t\t\t\t\t//this.processDragStop(io);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if swiping is currently being performed on an object.\r\n\t *\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer to check\r\n\t * @return `true` if swiping\r\n\t */\r\n\tpublic swiping(io: InteractionObject, pointer: IPointer): boolean {\r\n\t\tlet now = $time.getTime();\r\n\r\n\t\tif (pointer.swipeCanceled || !io.swipeable) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse if (\r\n\t\t\t(Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\")) &&\r\n\t\t\t(pointer.startTime > (now - this.getSwipeOption(io, \"time\")))\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if a successfull swipe action was performed on an element.\r\n\t *\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t * @return Swiped?\r\n\t */\r\n\tpublic swiped(io: InteractionObject, pointer: IPointer): boolean {\r\n\t\tlet now = $time.getTime();\r\n\t\tif (pointer.swipeCanceled) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse if (\r\n\t\t\t(Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, \"horizontalThreshold\")) &&\r\n\t\t\t(Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\")) &&\r\n\t\t\t(pointer.startTime > (now - this.getSwipeOption(io, \"time\")))\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Applies style to mouse cursor based on its stage in relation to\r\n\t * [[InteractionObject]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param Element\r\n\t */\r\n\tpublic applyCursorOverStyle(io: InteractionObject): void {\r\n\r\n\t\t// Get sprite's cursor ooptions\r\n\t\tlet options = io.cursorOptions;\r\n\r\n\t\tif (!$type.hasValue(options.overStyle)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Apply cursor down styles\r\n\t\tfor (let i = 0; i < options.overStyle.length; i++) {\r\n\t\t\t$dom.setStyle(io.element, options.overStyle[i].property, options.overStyle[i].value);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies style to mouse cursor based on its stage in relation to\r\n\t * [[InteractionObject]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t */\r\n\tpublic applyCursorDownStyle(io: InteractionObject, pointer: IPointer): void {\r\n\r\n\t\t// Not applicable for touch pointers since they don't display a cursor\r\n\t\tif (pointer && pointer.touch) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst downStyle = io.cursorOptions.downStyle;\r\n\t\t// Is down?\r\n\t\tif (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\r\n\t\t\t// Apply cursor down styles\r\n\t\t\tfor (let i = 0; i < downStyle.length; i++) {\r\n\t\t\t\tthis.setTemporaryStyle(this.body, downStyle[i].property, downStyle[i].value);\r\n\t\t\t\tthis.setTemporaryStyle(io, downStyle[i].property, downStyle[i].value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Restores original cursor style for the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param io       Element\r\n\t * @param pointer  Pointer\r\n\t */\r\n\tpublic restoreCursorDownStyle(io: InteractionObject, pointer: IPointer): void {\r\n\r\n\t\t// Not applicable for touch pointers since they don't display a cursor\r\n\t\tif (pointer && pointer.touch) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst downStyle = io.cursorOptions.downStyle;\r\n\r\n\t\t// Is down?\r\n\t\tif (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\r\n\t\t\t// Apply cursor down styles\r\n\t\t\tfor (let i = 0; i < downStyle.length; i++) {\r\n\t\t\t\tthis.restoreStyle(this.body, downStyle[i].property);\r\n\t\t\t\tthis.restoreStyle(io, downStyle[i].property);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets style on the body of the document.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param style  Style definitions\r\n\t */\r\n\tpublic setGlobalStyle(style: Array<IStyleProperty> | IStyleProperty): void {\r\n\t\tlet body = getInteraction().body;\r\n\t\tlet styles = <Array<IStyleProperty>>($type.isArray(style) ? style : [style]);\r\n\t\tfor (let i = 0; i < styles.length; i++) {\r\n\t\t\tthis.setTemporaryStyle(body, styles[i].property, styles[i].value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Restores style on the body of the document.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param style  Style definitions\r\n\t */\r\n\tpublic restoreGlobalStyle(style: Array<IStyleProperty> | IStyleProperty): void {\r\n\t\tlet body = getInteraction().body;\r\n\t\tlet styles = <Array<IStyleProperty>>($type.isArray(style) ? style : [style]);\r\n\t\tfor (let i = 0; i < styles.length; i++) {\r\n\t\t\tthis.restoreStyle(body, styles[i].property);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if element is a non-cahrt element.\r\n\t *\r\n\t * @param io  InteractionObject\r\n\t * @return Global element?\r\n\t */\r\n\tprotected isGlobalElement(io: InteractionObject): boolean {\r\n\t\treturn document.body === io.element;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if pointer has moved since it was created.\r\n\t *\r\n\t * @param pointer    Pointer\r\n\t * @param tolerance  Tolerance in pixels\r\n\t * @param minTime    Minimum time required for the pointer to be down to be considered moved\r\n\t * @return `true` if the pointer has moved\r\n\t */\r\n\tpublic moved(pointer: IPointer, tolerance: number, minTime: number = 300): boolean {\r\n\r\n\t\t/*// If there was more time, we don't care if cursor actually moved\r\n\t\tlet duration = $time.getTime() - pointer.startTime;\r\n\t\tif ($type.hasValue(minTime) && (minTime > duration)) {\r\n\t\t\treturn false;\r\n\t\t}*/\r\n\r\n\t\t// That was quick measure shift\r\n\t\tlet shift = this.getShift(pointer);\r\n\r\n\t\treturn (Math.abs(shift.x) > tolerance) || (Math.abs(shift.y) > tolerance);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if pointer is \"old\", meaning it has been pressing for more than\r\n\t * X milliseconds.\r\n\t *\r\n\t * @ignore\r\n\t * @param pointer  Pointer\r\n\t * @param minTime  Minimum time to consider pointer old\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic old(pointer: IPointer, minTime: number = 300): boolean {\r\n\t\treturn $time.getTime() - pointer.startTime > minTime;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns total a shift in pointers coordinates between its original\r\n\t * position and now.\r\n\t *\r\n\t * @param pointer  Pointer\r\n\t * @return Shift in coordinates (x/y)\r\n\t */\r\n\tpublic getShift(pointer: IPointer): IPoint {\r\n\t\treturn {\r\n\t\t\t\"x\": pointer.startPoint.x - pointer.point.x,\r\n\t\t\t\"y\": pointer.startPoint.y - pointer.point.y\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a point from [[Pointer]]'s move history at a certain timetamp.\r\n\t *\r\n\t * @param pointer    Pointer\r\n\t * @param timestamp  Timestamp\r\n\t * @return Point\r\n\t */\r\n\tpublic getTrailPoint(pointer: IPointer, timestamp: number): $type.Optional<IBreadcrumb> {\r\n\t\tlet res: $type.Optional<IBreadcrumb>;\r\n\t\tfor (let i = 0; i < pointer.track.length; i++) {\r\n\t\t\tif (pointer.track[i].timestamp >= timestamp) {\r\n\t\t\t\tres = pointer.track[i];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if same pointer already exists in the list.\r\n\t *\r\n\t * @param list     List to check agains\r\n\t * @param pointer  Pointer\r\n\t * @return Exists?\r\n\t */\r\n\tprotected pointerExists(list: List<IPointer>, pointer: IPointer): boolean {\r\n\t\tlet exists = false;\r\n\t\tlist.each((item) => {\r\n\t\t\tif (item == pointer) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\texists = item.point.x == pointer.point.x && item.point.y == pointer.point.y;\r\n\t\t});\r\n\t\treturn exists;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[InteractionObject]] representation of a DOM element.\r\n\t *\r\n\t * You can use this on any HTML or SVG element, to add interactive features\r\n\t * to it.\r\n\t *\r\n\t * @param element  Element\r\n\t * @return InteractionObject\r\n\t */\r\n\tpublic getInteraction(element: HTMLElement | SVGSVGElement): InteractionObject {\r\n\t\treturn new InteractionObject(element);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a style property on an element. Stores original value to be restored\r\n\t * later with [[restoreStyle]].\r\n\t *\r\n\t * @see {@link restoreStyle}\r\n\t * @param io        Element\r\n\t * @param property  Property\r\n\t * @param value     Value\r\n\t */\r\n\tpublic setTemporaryStyle(io: InteractionObject, property: string, value: string): void {\r\n\r\n\t\t// Get element\r\n\t\t//let el = io.element.tagName == \"g\" ? <SVGSVGElement>io.element.parentNode : io.element;\r\n\t\tlet el = io.element;\r\n\r\n\t\t// Save original property if it is set and hasn't been saved before already\r\n\t\tif ($type.hasValue((<any>el.style)[property]) && !io.replacedStyles.hasKey(property)) {\r\n\t\t\tio.replacedStyles.setKey(property, (<any>el.style)[property]);\r\n\t\t}\r\n\r\n\t\t// Replace with the new one\r\n\t\t$dom.setStyle(el, property, value);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Restores specific style on an element.\r\n\t *\r\n\t * @param io        Element\r\n\t * @param property  Style property\r\n\t */\r\n\tpublic restoreStyle(io: InteractionObject, property: string): void {\r\n\r\n\t\t// Reset style\r\n\t\tif (io.replacedStyles.hasKey(property)) {\r\n\t\t\t(<any>io.element.style)[property] = io.replacedStyles.getKey(property);\r\n\t\t\tio.replacedStyles.removeKey(property);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelete (<any>io.element.style)[property];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Restore temporarily reset styles on an element.\r\n\t *\r\n\t * @param io Element\r\n\t */\r\n\tpublic restoreAllStyles(io: InteractionObject): void {\r\n\t\t$iter.each(io.replacedStyles.iterator(), (a) => {\r\n\t\t\tconst key = a[0];\r\n\t\t\tconst value = a[1];\r\n\t\t\t(<any>io.element.style)[key] = value;\r\n\t\t\tio.replacedStyles.removeKey(key);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes this object and cleans up after itself.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this.isDisposed()) {\r\n\t\t\tsuper.dispose();\r\n\t\t\tthis.restoreAllStyles(this.body);\r\n\t\t\tthis.unlockWheel();\r\n\t\t}\r\n\t}\r\n\r\n\t// @ts-ignore Used for debugging\r\n\tprivate log(text: string, ev: MouseEvent | TouchEvent | PointerEvent, io?: InteractionObject): void {\r\n\t\tlet show = true;\r\n\t\tif (show) {\r\n\t\t\t// Touchlist?\r\n\t\t\tif ((<any>ev).changedTouches) {\r\n\t\t\t\tfor (let i = 0; i < (<any>ev).changedTouches.length; i++) {\r\n\t\t\t\t\tthis.logTouch(text, ev.type, (<any>ev).changedTouches[i])\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Get type\r\n\t\t\tlet type = \"\";\r\n\t\t\tif ((<any>ev).pointerType) {\r\n\t\t\t\tswitch ((<any>ev).pointerType) {\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\ttype = \"touch\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\ttype = \"mouse\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\ttype = (<any>ev).pointerType;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (typeof TouchEvent != \"undefined\" && ev instanceof TouchEvent) {\r\n\t\t\t\ttype = \"touch\";\r\n\t\t\t}\r\n\t\t\telse if (ev.type.match(/^mouse/)) {\r\n\t\t\t\ttype = \"mouse\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttype = \"???\";\r\n\t\t\t}\r\n\r\n\t\t\t// Get ID\r\n\t\t\tlet id = \"\";\r\n\t\t\tif ($type.hasValue((<any>ev).identifier)) {\r\n\t\t\t\tid = <string>(<any>ev).identifier;\r\n\t\t\t} else if ($type.hasValue((<any>ev).pointerId)) {\r\n\t\t\t\tid = <string>(<any>ev).pointerId;\r\n\t\t\t} else {\r\n\t\t\t\tid = \"???\";\r\n\t\t\t}\r\n\r\n\t\t\tif (io) {\r\n\t\t\t\tconsole.log(text + \" (\" + io.uid + \")  \" + ev.type + \"  \" + type + \"  \" + id);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconsole.log(text + \"  \" + ev.type + \"  \" + type + \"  \" + id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether there are currently any objects being transformed (dragged\r\n\t * or resized).\r\n\t *\r\n\t * If `except` is set, that object will be ignored.\r\n\t *\r\n\t * @since 4.9.3\r\n\t * @param   except  Ignore this object(s)\r\n\t * @return          Objects are being transformed\r\n\t */\r\n\tpublic areTransformed(except?: InteractionObject | InteractionObject[]): boolean {\r\n\t\tlet count = this.transformedObjects.length;\r\n\t\tif (except) {\r\n\t\t\tconst ex = $type.isArray(except) ? except : [except];\r\n\t\t\tfor (let i = 0; i < ex.length; i++) {\r\n\t\t\t\tif (this.transformedObjects.contains(ex[i])) {\r\n\t\t\t\t\tcount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Log.\r\n\t */\r\n\tprivate logTouch(text: string, type: string, ev: Touch): void {\r\n\t\tconsole.log(text + \"  \" + type + \"  \" + \"touch\" + \"  \" + ev.identifier);\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if passive mode options is supported by this browser.\r\n\t */\r\n\tprivate static _passiveSupported: boolean;\r\n\r\n\t/**\r\n\t * Indicates if passive mode options is supported by this browser.\r\n\t */\r\n\tstatic get passiveSupported() {\r\n\r\n\t\tif (this._passiveSupported == null) {\r\n\r\n\t\t\t// Check for passive mode support\r\n\t\t\ttry {\r\n\t\t\t\tlet options = Object.defineProperty({}, \"passive\", {\r\n\t\t\t\t\tget: () => {\r\n\t\t\t\t\t\tthis._passiveSupported = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\twindow.addEventListener(\"test\", options, options);\r\n\t\t\t\twindow.removeEventListener(\"test\", options, options);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tthis._passiveSupported = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this._passiveSupported;\r\n\t}\r\n\r\n}\r\n\r\n\r\nlet interaction: Interaction | null = null;\r\n\r\n/**\r\n * Returns a single unified global instance of [[Interaction]].\r\n *\r\n * All code should use this function, rather than create their own instances\r\n * of [[Interaction]].\r\n */\r\nexport function getInteraction(): Interaction {\r\n\tif (interaction == null) {\r\n\t\tinteraction = new Interaction();\r\n\t}\r\n\r\n\treturn interaction;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}