{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { map } from '../../utils/array.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n\n    if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n    if (!Array.isArray(args) || !args.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var _name = this.fn.name;\n      var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n      function resolveFn(scope) {\n        return _name in scope ? getSafeProperty(scope, _name) : _name in math ? getSafeProperty(math, _name) : FunctionNode.onUndefinedFunction(_name);\n      }\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = resolveFn(scope);\n          return fn(rawArgs, math, _extends({}, scope, args));\n        };\n      } else {\n        // \"regular\" evaluation\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalFunctionNode(scope, args, context) {\n            var fn = resolveFn(scope);\n            return fn(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalFunctionNode(scope, args, context) {\n            var fn = resolveFn(scope);\n            return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalFunctionNode(scope, args, context) {\n            var fn = resolveFn(scope);\n            return fn.apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n    } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n        return isRaw ? object[prop](_rawArgs, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : object[prop].apply(object, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n        return isRaw ? fn(_rawArgs2, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : fn.apply(fn, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionNode.prototype.forEach = function (callback) {\n    callback(this.fn, 'fn', this);\n\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  };\n  /**\n   * Throws an error 'Undefined function {name}'\n   * @param {string} name\n   */\n\n\n  FunctionNode.onUndefinedFunction = function (name) {\n    throw new Error('Undefined function ' + name);\n  }; // backup Node's toString function\n  // @private\n\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n\n    if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n\n    if (latexFunctions[this.name]) {\n      latexConverter = latexFunctions[this.name];\n    } // toTex property on the function itself\n\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n\n    switch (typeof latexConverter) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (typeof latexConverter[args.length]) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","isAccessorNode","isFunctionAssignmentNode","isIndexNode","isNode","isSymbolNode","escape","map","getSafeProperty","validateSafeMethod","factory","defaultTemplate","latexFunctions","name","dependencies","createFunctionNode","_ref","math","Node","SymbolNode","FunctionNode","fn","args","SyntaxError","TypeError","Array","isArray","every","defineProperty","get","bind","set","Error","type","isFunctionNode","_compile","argNames","evalArgs","arg","_name","undefined","isRaw","rawArgs","resolveFn","scope","onUndefinedFunction","evalFunctionNode","context","evalArg0","_evalArg","evalArg1","evalArg","index","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs","evalFn","_rawArgs2","forEach","callback","_ifNode","clone","slice","nodeToString","toString","options","customString","handler","_toString","join","toJSON","mathjs","fromJSON","json","toHTML","expandTemplate","template","node","latex","regex","inputPos","match","exec","substring","property","ReferenceError","toTex","nodeToTex","customTex","_toTex","latexConverter","customToTex","getIdentifier","isClass"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/ReactMumer-main/node_modules/mathjs/lib/esm/expression/node/FunctionNode.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { map } from '../../utils/array.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n\n    if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n    if (!Array.isArray(args) || !args.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var _name = this.fn.name;\n      var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n      function resolveFn(scope) {\n        return _name in scope ? getSafeProperty(scope, _name) : _name in math ? getSafeProperty(math, _name) : FunctionNode.onUndefinedFunction(_name);\n      }\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = resolveFn(scope);\n          return fn(rawArgs, math, _extends({}, scope, args));\n        };\n      } else {\n        // \"regular\" evaluation\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalFunctionNode(scope, args, context) {\n            var fn = resolveFn(scope);\n            return fn(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalFunctionNode(scope, args, context) {\n            var fn = resolveFn(scope);\n            return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalFunctionNode(scope, args, context) {\n            var fn = resolveFn(scope);\n            return fn.apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n    } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n        return isRaw ? object[prop](_rawArgs, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : object[prop].apply(object, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n        return isRaw ? fn(_rawArgs2, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : fn.apply(fn, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionNode.prototype.forEach = function (callback) {\n    callback(this.fn, 'fn', this);\n\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  };\n  /**\n   * Throws an error 'Undefined function {name}'\n   * @param {string} name\n   */\n\n\n  FunctionNode.onUndefinedFunction = function (name) {\n    throw new Error('Undefined function ' + name);\n  }; // backup Node's toString function\n  // @private\n\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n\n    if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n\n    if (latexFunctions[this.name]) {\n      latexConverter = latexFunctions[this.name];\n    } // toTex property on the function itself\n\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n\n    switch (typeof latexConverter) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (typeof latexConverter[args.length]) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}