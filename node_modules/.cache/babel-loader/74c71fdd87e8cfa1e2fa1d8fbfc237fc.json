{"ast":null,"code":"/**\r\n * Sankey diagram module.\r\n */\nimport { __extends, __read, __spread } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { SankeyNode } from \"../elements/SankeyNode\";\nimport { SankeyLink } from \"../elements/SankeyLink\";\nimport { Animation } from \"../../core/utils/Animation\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SankeyDiagramDataItem =\n/** @class */\nfunction (_super) {\n  __extends(SankeyDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SankeyDiagramDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return SankeyDiagramDataItem;\n}(FlowDiagramDataItem);\n\nexport { SankeyDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\n\nvar SankeyDiagram =\n/** @class */\nfunction (_super) {\n  __extends(SankeyDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SankeyDiagram\";\n    _this.orientation = \"horizontal\";\n    _this.nodeAlign = \"middle\";\n    _this.nodesContainer.width = percent(100);\n    _this.nodesContainer.height = percent(100);\n    _this.linksContainer.width = percent(100);\n    _this.linksContainer.height = percent(100); // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyDiagram.prototype.validateData = function () {\n    var _this = this;\n\n    this._valueHeight = undefined;\n\n    _super.prototype.validateData.call(this);\n\n    this._levelCount = 0;\n    this.nodes.each(function (key, node) {\n      node.level = undefined;\n    });\n    this.nodes.each(function (key, node) {\n      node.level = _this.getNodeLevel(node, 0);\n      _this._levelCount = $math.max(_this._levelCount, node.level);\n    });\n  };\n  /**\r\n   * Returns node's highest level.\r\n   *\r\n   * @param node   Node\r\n   * @param level  Current level\r\n   * @return New level\r\n   */\n\n\n  SankeyDiagram.prototype.getNodeLevel = function (node, level) {\n    var _this = this;\n\n    var levels = [level];\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      if (link.fromNode) {\n        if ($type.isNumber(link.fromNode.level)) {\n          levels.push(link.fromNode.level + 1);\n        } else {\n          _this._counter = 0;\n\n          _this.checkLoop(link.fromNode);\n\n          if (_this._counter < _this.dataItems.length) {\n            levels.push(_this.getNodeLevel(link.fromNode, level + 1));\n          }\n        }\n      }\n    });\n    return Math.max.apply(Math, __spread(levels));\n  };\n  /**\r\n   * Checks if there's no loop in the ancestor chain.\r\n   *\r\n   * @param  node  Node\r\n   */\n\n\n  SankeyDiagram.prototype.checkLoop = function (node) {\n    var _this = this;\n\n    this._counter++;\n\n    if (this._counter > this.dataItems.length) {\n      return;\n    }\n\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      _this.checkLoop(link.fromNode);\n    });\n  };\n  /**\r\n   * Calculates relation between pixel height and total value.\r\n   *\r\n   * In Sankey the actual thickness of links and height of nodes will depend\r\n   * on their values.\r\n   */\n\n\n  SankeyDiagram.prototype.calculateValueHeight = function () {\n    var _this = this; // calculate sums of each level\n\n\n    this._levelSum = {};\n    this._levelNodesCount = {};\n    this.maxSum = 0;\n    var total = this.dataItem.values.value.sum;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n\n      _this.getNodeValue(node);\n    });\n    this.nodes.each(function (key, node) {\n      var level = node.level;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      if ($type.isNumber(_this._levelSum[level])) {\n        _this._levelSum[level] += value;\n      } else {\n        _this._levelSum[level] = value;\n      }\n\n      if ($type.isNumber(_this._levelNodesCount[level])) {\n        _this._levelNodesCount[level]++;\n      } else {\n        _this._levelNodesCount[level] = 1;\n      }\n    });\n    var availableHeight;\n\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n\n    var maxSumLevel;\n    var minHeight;\n    $object.each(this._levelSum, function (key, value) {\n      var realValue = value;\n      var levelNodeCount = _this._levelNodesCount[key];\n      var valueHeight = (availableHeight - (levelNodeCount - 1) * _this.nodePadding) / realValue;\n\n      if (valueHeight == Infinity) {\n        valueHeight = 0;\n      }\n\n      if (minHeight > valueHeight || !$type.isNumber(minHeight)) {\n        minHeight = valueHeight;\n        _this.maxSum = realValue;\n        maxSumLevel = $type.toNumber(key);\n      }\n    });\n    this._maxSumLevel = maxSumLevel;\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\n\n    if (valueHeight == Infinity) {\n      valueHeight = 0;\n    }\n\n    if (!$type.isNumber(this.valueHeight)) {\n      this.valueHeight = valueHeight;\n    } else {\n      var finalHeight = void 0;\n\n      try {\n        finalHeight = this._heightAnimation.animationOptions[0].to;\n      } catch (err) {} // without animations it will be non-smooth as maxValue jumps from one column to another\n\n\n      if (finalHeight != valueHeight) {\n        var duration = this.interpolationDuration;\n\n        try {\n          duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\n        } catch (err) {}\n\n        this._heightAnimation = new Animation(this, {\n          property: \"valueHeight\",\n          from: this.valueHeight,\n          to: valueHeight\n        }, duration, this.interpolationEasing).start();\n\n        this._disposers.push(this._heightAnimation);\n      }\n    }\n  };\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyDiagram.prototype.validate = function () {\n    var _this = this;\n\n    _super.prototype.validate.call(this);\n\n    this.calculateValueHeight();\n    var container = this.nodesContainer;\n    var nextCoordinate = {};\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var total = this.dataItem.values.value.sum;\n    var availableHeight;\n\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = 0;\n      var nodeCount = _this._levelNodesCount[level];\n\n      switch (_this.nodeAlign) {\n        case \"bottom\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\n          break;\n\n        case \"middle\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\n          break;\n      }\n\n      if (_this.maxSum == 0) {\n        switch (_this.nodeAlign) {\n          case \"bottom\":\n            levelCoordinate = availableHeight - nodeCount * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n\n          case \"middle\":\n            levelCoordinate = availableHeight / 2 - nodeCount / 2 * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n        }\n      }\n\n      node.parent = container;\n      var delta;\n      var x;\n      var y;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      if (_this.orientation == \"horizontal\") {\n        delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\n        x = delta * node.level;\n        y = nextCoordinate[level] || levelCoordinate;\n        var h = value * _this.valueHeight;\n\n        if (total == 0 && h == 0) {\n          h = _this.minNodeSize * availableHeight;\n        }\n\n        node.height = h;\n        node.minX = x;\n        node.maxX = x;\n        nextCoordinate[level] = y + h + _this.nodePadding;\n      } else {\n        delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\n        x = nextCoordinate[level] || levelCoordinate;\n        y = delta * node.level;\n        var w = value * _this.valueHeight;\n\n        if (total == 0 && w == 0) {\n          w = _this.minNodeSize * availableHeight;\n        }\n\n        node.width = w;\n        node.minY = y;\n        node.maxY = y;\n        nextCoordinate[level] = x + w + _this.nodePadding;\n      }\n\n      node.x = x;\n      node.y = y;\n    });\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n\n\n  SankeyDiagram.prototype.showReal = function (duration) {\n    var _this = this;\n\n    if (this.preventShow) {\n      return;\n    }\n\n    if (this.interpolationDuration > 0) {\n      var container_1 = this.nodesContainer;\n      var i_1 = 0;\n      $iter.each(this.links.iterator(), function (link) {\n        link.hide(0);\n      });\n      $iter.each(this._sorted, function (strNode) {\n        var node = strNode[1];\n        var property;\n\n        if (_this.orientation == \"horizontal\") {\n          node.dx = -(container_1.pixelWidth - node.pixelWidth) / Math.max(_this._levelCount, 1);\n          property = \"dx\";\n        } else {\n          node.dy = -(container_1.pixelHeight - node.pixelHeight) / Math.max(_this._levelCount, 1);\n          property = \"dy\";\n        }\n\n        var delay = 0;\n        var duration = _this.interpolationDuration;\n\n        if (_this.sequencedInterpolation) {\n          delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\n        }\n\n        node.opacity = 0;\n        node.invalidateLinks();\n        node.animate([{\n          property: \"opacity\",\n          from: 0,\n          to: 1\n        }, {\n          property: property,\n          to: 0\n        }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n          var animation = dataItem.link.show(_this.interpolationDuration);\n\n          if (animation && !animation.isFinished()) {\n            animation.delay(delay);\n          }\n        });\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n          if (!dataItem.fromNode) {\n            var animation = dataItem.link.show(_this.interpolationDuration);\n\n            if (animation && !animation.isFinished()) {\n              animation.delay(delay);\n            }\n          }\n        });\n        i_1++;\n      });\n    }\n\n    return _super.prototype.showReal.call(this);\n  };\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n\n\n  SankeyDiagram.prototype.changeSorting = function () {\n    var _this = this;\n\n    this.sortNodes();\n    var nextCoordinate = {};\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\n      var property;\n      var nodeHeight;\n\n      if (_this.orientation == \"horizontal\") {\n        property = \"y\";\n        nodeHeight = node.pixelHeight;\n      } else {\n        property = \"x\";\n        nodeHeight = node.pixelWidth;\n      }\n\n      node.animate({\n        property: property,\n        to: nextCoordinate[level] || levelCoordinate\n      }, _this.interpolationDuration, _this.interpolationEasing);\n      nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\n      node.invalidateLinks();\n    });\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  SankeyDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Sankey diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  SankeyDiagram.prototype.createDataItem = function () {\n    return new SankeyDiagramDataItem();\n  };\n\n  Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\n    /**\r\n     * @returns Returns nodeAlign value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodeAlign\");\n    },\n\n    /**\r\n     * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n     *\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodeAlign\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n     *\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n      var nameLabel = this.nodes.template.nameLabel;\n\n      if (value == \"vertical\") {\n        this.nodes.template.width = undefined;\n        nameLabel.label.horizontalCenter = \"middle\";\n        nameLabel.locationX = 0.5;\n      } else {\n        this.nodes.template.height = undefined;\n        nameLabel.label.horizontalCenter = \"left\";\n        nameLabel.locationX = 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  SankeyDiagram.prototype.createNode = function () {\n    var node = new SankeyNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  SankeyDiagram.prototype.createLink = function () {\n    var link = new SankeyLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n\n  Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._valueHeight;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (value != this._valueHeight) {\n        this._valueHeight = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  SankeyDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this._sorted = this.nodes.iterator();\n  };\n\n  return SankeyDiagram;\n}(FlowDiagram);\n\nexport { SankeyDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/SankeyDiagram.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\tprotected _level: number;\r\n\r\n\tprotected _counter: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._valueHeight = undefined;\t\t\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = undefined;\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tif ($type.isNumber(link.fromNode.level)) {\r\n\t\t\t\t\tlevels.push(link.fromNode.level + 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._counter = 0;\r\n\t\t\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t\t\t\tif (this._counter < this.dataItems.length) {\r\n\t\t\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's no loop in the ancestor chain.\r\n\t * \r\n\t * @param  node  Node\r\n\t */\r\n\tprotected checkLoop(node: this[\"_node\"]): void {\r\n\t\tthis._counter++;\r\n\r\n\t\tif (this._counter > this.dataItems.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\t\tlet minHeight: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\r\n\t\t\tlet levelNodeCount = this._levelNodesCount[key];\r\n\t\t\tlet valueHeight = (availableHeight - (levelNodeCount - 1) * this.nodePadding) / realValue;\r\n\r\n\t\t\tif (valueHeight == Infinity) {\r\n\t\t\t\tvalueHeight = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n\t\t\t\tminHeight = valueHeight;\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (valueHeight == Infinity) {\r\n\t\t\tvalueHeight = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.maxSum == 0) {\r\n\t\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight - nodeCount * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight / 2 - nodeCount / 2 * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && h == 0) {\r\n\t\t\t\t\th = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && w == 0) {\r\n\t\t\t\t\tw = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}