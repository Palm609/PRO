{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\n/**\r\n * @todo Description\r\n */\n\nvar IndexedIterable =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param array  List items\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   */\n  function IndexedIterable(array, start, end) {\n    this._array = array;\n    this._start = start;\n    this._end = end;\n  }\n  /**\r\n   * Returns a list item iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  IndexedIterable.prototype.iterator = function () {\n    var _this = this;\n\n    return function (push) {\n      if (_this._start !== _this._end) {\n        if (_this._start < _this._end) {\n          for (var i = _this._start; i < _this._end; ++i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        } else {\n          for (var i = _this._start - 1; i >= _this._end; --i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        }\n      }\n    };\n  };\n  /**\r\n   * Returns an interable list sorted backwards than current list.\r\n   *\r\n   * @return List\r\n   */\n\n\n  IndexedIterable.prototype.backwards = function () {\n    return new IndexedIterable(this._array, this._end, this._start);\n  };\n  /**\r\n   * Returns a new list consisting only of specific range of items between\r\n   * `start` and `end` indexes.\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return List\r\n   */\n\n\n  IndexedIterable.prototype.range = function (start, end) {\n    if (start <= end) {\n      if (this._start === this._end) {\n        return this;\n      } else if (this._start < this._end) {\n        var diff = end - start;\n        start = Math.max(this._start + start, this._start);\n        end = Math.min(start + diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      } else {\n        var diff = end - start;\n        start = Math.max(this._start - start, this._end);\n        end = Math.max(start - diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      }\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n\n  return IndexedIterable;\n}();\n\nexport { IndexedIterable };\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar ListGrouper =\n/** @class */\nfunction (_super) {\n  __extends(ListGrouper, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function ListGrouper(list, getKey, sort) {\n    var _this = _super.call(this, [list.events.on(\"inserted\", function (x) {\n      var value = x.newValue;\n\n      var key = _this._getKey(value);\n\n      var index = 0;\n      $iter.eachContinue(list.iterator(), function (x) {\n        if (x === value) {\n          return false;\n        } else if (_this._getKey(x) === key) {\n          ++index;\n        }\n\n        return true;\n      });\n\n      _this._insert(value, key, index);\n    }, undefined, false), list.events.on(\"removed\", function (x) {\n      _this._remove(x.oldValue);\n    }, undefined, false)]) || this;\n    /**\r\n     * Grouping keys.\r\n     */\n\n\n    _this._keys = [];\n    /**\r\n     * List item groups.\r\n     */\n\n    _this._groups = {};\n    _this._getKey = getKey;\n    _this._sort = sort;\n    $iter.each(list.iterator(), function (x) {\n      _this._insert(x, getKey(x));\n    });\n    return _this;\n  }\n  /**\r\n   * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n   *\r\n   * @param x      Item\r\n   * @param key    Group name\r\n   * @param index  Index\r\n   */\n\n\n  ListGrouper.prototype._insert = function (x, key, index) {\n    if (this._groups[key] == null) {\n      this._groups[key] = []; // TODO code duplication with SortedList\n\n      var _a = $array.getSortedIndex(this._keys, this._sort, key),\n          found = _a.found,\n          index_1 = _a.index;\n\n      if (found) {\n        throw new Error(\"Key already exists: \" + key);\n      } else {\n        $array.insertIndex(this._keys, index_1, key);\n      }\n    }\n\n    if (index == null) {\n      this._groups[key].push(x);\n    } else {\n      $array.insertIndex(this._groups[key], index, x);\n    }\n  };\n  /**\r\n   * Removes an item from the list.\r\n   *\r\n   * @param x Item to remove\r\n   */\n\n\n  ListGrouper.prototype._remove = function (x) {\n    var key = this._getKey(x);\n\n    var values = this._groups[key];\n\n    if (values != null) {\n      $array.remove(values, x);\n\n      if (values.length === 0) {\n        delete this._groups[key];\n\n        var _a = $array.getSortedIndex(this._keys, this._sort, key),\n            found = _a.found,\n            index = _a.index;\n\n        if (found) {\n          $array.removeIndex(this._keys, index);\n        } else {\n          throw new Error(\"Key doesn't exist: \" + key);\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns an iterator for the list.\r\n   *\r\n   * The iterator will iterate through all items in all groups.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  ListGrouper.prototype.iterator = function () {\n    var _this = this;\n\n    return $iter.flatten($iter.map($iter.fromArray(this._keys), function (key) {\n      return $iter.fromArray(_this._groups[key]);\n    }));\n  };\n\n  return ListGrouper;\n}(MultiDisposer);\n\nexport { ListGrouper };\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\n\nvar ListDisposer =\n/** @class */\nfunction (_super) {\n  __extends(ListDisposer, _super);\n\n  function ListDisposer(list, disposeOnRemove) {\n    if (disposeOnRemove === void 0) {\n      disposeOnRemove = true;\n    }\n\n    var _this = this;\n\n    if (disposeOnRemove) {\n      var disposer_1 = list.events.on(\"removed\", function (x) {\n        x.oldValue.dispose();\n      }, undefined, false);\n      _this = _super.call(this, function () {\n        disposer_1.dispose(); // TODO clear the list ?\n\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    } else {\n      _this = _super.call(this, function () {\n        // TODO clear the list ?\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    }\n\n    return _this;\n  }\n\n  return ListDisposer;\n}(Disposer);\n\nexport { ListDisposer };\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\n\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\n\n\nvar List =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * Event dispatcher.\r\n     */\n\n\n    this.events = new EventDispatcher();\n    this._values = initial;\n  }\n\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n\n  List.prototype.contains = function (value) {\n    return this._values.indexOf(value) !== -1;\n  };\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n\n\n  List.prototype.removeValue = function (value) {\n    var i = 0;\n    var length = this._values.length;\n\n    while (i < length) {\n      // TODO handle NaN\n      if (this._values[i] === value) {\n        this.removeIndex(i);\n        --length;\n      } else {\n        ++i;\n      }\n    }\n  };\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n\n\n  List.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n\n  List.prototype.hasIndex = function (index) {\n    return index >= 0 && index < this._values.length;\n  };\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n\n\n  List.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n\n\n  List.prototype.setIndex = function (index, value) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index]; // Do nothing if the old value and the new value are the same\n\n    if (oldValue !== value) {\n      this._values[index] = value;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: value\n        });\n      }\n\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n\n    return oldValue;\n  };\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.insertIndex = function (index, value) {\n    checkBounds(index, this._values.length + 1);\n    $array.insertIndex(this._values, index, value);\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * [_sortQuicksort description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   */\n\n\n  List.prototype._sortQuicksort = function (low, high, order) {\n    if (low < high) {\n      var p = this._sortPartition(low, high, order);\n\n      this._sortQuicksort(low, p, order);\n\n      this._sortQuicksort(p + 1, high, order);\n    }\n  };\n  /**\r\n   * [_sortPartition description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   * @return [description]\r\n   */\n\n\n  List.prototype._sortPartition = function (low, high, order) {\n    var values = this._values;\n    var pivot = values[low];\n    var i = low - 1;\n    var j = high + 1;\n\n    for (;;) {\n      do {\n        ++i;\n      } while (order(values[i], pivot) < 0);\n\n      do {\n        --j;\n      } while (order(values[j], pivot) > 0);\n\n      if (i >= j) {\n        return j;\n      } else {\n        this.swap(i, j);\n      }\n    }\n  };\n  /**\r\n   * Reorders list items according to specific ordering function.\r\n   *\r\n   * @param order  Ordering function\r\n   */\n\n\n  List.prototype.sort = function (order) {\n    // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    // @todo faster implementation of this\n    // @todo test this\n    this._sortQuicksort(0, this._values.length - 1, order);\n  };\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n\n\n  List.prototype.swap = function (a, b) {\n    var len = this._values.length;\n    checkBounds(a, len);\n    checkBounds(b, len);\n\n    if (a !== b) {\n      var value_a = this._values[a];\n      var value_b = this._values[b];\n      this._values[a] = value_b;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: a,\n          oldValue: value_a,\n          newValue: value_b\n        });\n      }\n\n      this._values[b] = value_a;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: b,\n          oldValue: value_b,\n          newValue: value_a\n        });\n      }\n    }\n  };\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n\n\n  List.prototype.removeIndex = function (index) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index];\n    $array.removeIndex(this._values, index);\n\n    if (this.events.isEnabled(\"removeIndex\")) {\n      this.events.dispatchImmediately(\"removeIndex\", {\n        type: \"removeIndex\",\n        target: this,\n        index: index,\n        oldValue: oldValue\n      });\n    }\n\n    if (this.events.isEnabled(\"removed\")) {\n      this.events.dispatchImmediately(\"removed\", {\n        type: \"removed\",\n        target: this,\n        oldValue: oldValue\n      });\n    }\n\n    return oldValue;\n  };\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n\n\n  List.prototype.moveValue = function (value, toIndex) {\n    // TODO don't do anything if the desired index is the same as the current index\n    var index = this.indexOf(value); // TODO remove all old values rather than only the first ?\n\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatchImmediately(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n\n    if (toIndex == null) {\n      toIndex = this._values.length;\n\n      this._values.push(value);\n    } else {\n      $array.insertIndex(this._values, toIndex, value);\n    }\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: toIndex,\n        newValue: value\n      });\n    }\n\n    if (index === -1) {\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.push = function (value) {\n    var index = this._values.push(value) - 1;\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n\n    return value;\n  };\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.unshift = function (value) {\n    this.insertIndex(0, value);\n  };\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n\n\n  List.prototype.pushAll = function (values) {\n    var _this = this;\n\n    $array.each(values, function (value) {\n      _this.push(value);\n    });\n  };\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n\n\n  List.prototype.copyFrom = function (source) {\n    this.pushAll(source._values);\n  };\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n\n  List.prototype.pop = function () {\n    var index = this._values.length - 1;\n    return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n  };\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n\n  List.prototype.shift = function () {\n    return this._values.length ? this.removeIndex(0) : undefined;\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n\n  List.prototype.setAll = function (newArray) {\n    var _this = this; // @tod if a value exists in both the new and old arrays, don't send remove/insert events\n\n\n    var oldArray = $array.copy(this._values);\n    this._values.length = 0;\n    $array.each(newArray, function (value) {\n      _this._values.push(value);\n    });\n\n    if (this.events.isEnabled(\"setAll\")) {\n      this.events.dispatchImmediately(\"setAll\", {\n        type: \"setAll\",\n        target: this,\n        oldArray: oldArray,\n        newArray: this._values // TODO make a copy ?\n\n      });\n    }\n\n    if (this.events.isEnabled(\"removed\")) {\n      $array.each(oldArray, function (x) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: x\n        });\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      $array.each(this._values, function (x) {\n        _this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: _this,\n          newValue: x\n        });\n      });\n    }\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n\n  List.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  List.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n\n  List.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < length)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , this._values[i]];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          ++i;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n\n\n  List.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n  /**\r\n   * Returns a specific range of list items, which can be iterated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Code duplication with IndexedIterable\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Range\r\n   */\n\n\n  List.prototype.range = function (start, end) {\n    if (start <= end) {\n      var diff = end - start;\n      start = Math.max(start, 0);\n      end = Math.min(start + diff, this._values.length);\n      return new IndexedIterable(this._values, start, end);\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n  /**\r\n   * Returns an iterator that has list items sorted backwards.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return List\r\n   */\n\n\n  List.prototype.backwards = function () {\n    return new IndexedIterable(this._values, this._values.length, 0);\n  };\n\n  return List;\n}();\n\nexport { List };\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar ListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(ListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n\n\n  function ListTemplate(t) {\n    var _this = _super.call(this) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(ListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  ListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.push(value.clone());\n    });\n  };\n\n  ListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.push(clone);\n    return clone;\n  };\n  /**\r\n   * Creates an exact clone of the list, including its items and template.\r\n   *\r\n   * @return New list\r\n   */\n\n\n  ListTemplate.prototype.clone = function () {\n    var out = new ListTemplate(this.template);\n    var values = this.values;\n    var length = values.length;\n\n    for (var i = 0; i < length; ++i) {\n      out.push(values[i].clone());\n    }\n\n    return out;\n  };\n\n  return ListTemplate;\n}(List);\n\nexport { ListTemplate };","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/List.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IClone } from \"./Clone\";\r\nimport { Disposer, MultiDisposer, IDisposer } from \"./Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Ordering } from \"./Order\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * @todo Description\r\n */\r\nexport class IndexedIterable<A> {\r\n\r\n\t/**\r\n\t * Item list\r\n\t */\r\n\tprivate _array: Array<A>;\r\n\r\n\t/**\r\n\t * Start index.\r\n\t */\r\n\tprivate _start: number;\r\n\r\n\t/**\r\n\t * End index.\r\n\t */\r\n\tprivate _end: number;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param array  List items\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t */\r\n\tconstructor(array: Array<A>, start: number, end: number) {\r\n\t\tthis._array = array;\r\n\t\tthis._start = start;\r\n\t\tthis._end = end;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list item iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<A> {\r\n\t\treturn (push) => {\r\n\t\t\tif (this._start !== this._end) {\r\n\t\t\t\tif (this._start < this._end) {\r\n\t\t\t\t\tfor (let i = this._start; i < this._end; ++i) {\r\n\t\t\t\t\t\tif (!push(this._array[i])) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (let i = this._start - 1; i >= this._end; --i) {\r\n\t\t\t\t\t\tif (!push(this._array[i])) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an interable list sorted backwards than current list.\r\n\t *\r\n\t * @return List\r\n\t */\r\n\tpublic backwards(): IndexedIterable<A> {\r\n\t\treturn new IndexedIterable(this._array, this._end, this._start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new list consisting only of specific range of items between\r\n\t * `start` and `end` indexes.\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return List\r\n\t */\r\n\tpublic range(start: number, end: number): IndexedIterable<A> {\r\n\t\tif (start <= end) {\r\n\t\t\tif (this._start === this._end) {\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if (this._start < this._end) {\r\n\t\t\t\tconst diff = end - start;\r\n\r\n\t\t\t\tstart = Math.max(this._start + start, this._start);\r\n\t\t\t\tend = Math.min(start + diff, this._end);\r\n\r\n\t\t\t\treturn new IndexedIterable(this._array, start, end);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tconst diff = end - start;\r\n\r\n\t\t\t\tstart = Math.max(this._start - start, this._end);\r\n\t\t\t\tend = Math.max(start - diff, this._end);\r\n\r\n\t\t\t\treturn new IndexedIterable(this._array, start, end);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Start index must be lower than end index\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines events for the [[List]].\r\n */\r\nexport interface IListEvents<A> {\r\n\t/**\r\n\t * Invoked when item is added to the list.\r\n\t *\r\n\t * @todo remove this later?\r\n\t */\r\n\tinserted: {\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when item is removed from the list.\r\n\t *\r\n\t * @todo remove this later?\r\n\t */\r\n\tremoved: {\r\n\t\toldValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setAll` method is called.\r\n\t */\r\n\tsetAll: {\r\n\t\toldArray: Array<A>;\r\n\t\tnewArray: Array<A>;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `insertIndex` method is called.\r\n\t */\r\n\tinsertIndex: {\r\n\t\tindex: number;\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setIndex` method is called.\r\n\t */\r\n\tsetIndex: {\r\n\t\tindex: number;\r\n\t\toldValue: A;\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when item is removed.\r\n\t */\r\n\tremoveIndex: {\r\n\t\tindex: number;\r\n\t\toldValue: A;\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class ListGrouper<A> extends MultiDisposer {\r\n\r\n\t/**\r\n\t * Function that can be used to extract a \"value\" of the list element.\r\n\t *\r\n\t * Used for ordering.\r\n\t */\r\n\tprivate _getKey: (value: A) => number;\r\n\r\n\t/**\r\n\t * A function that  is used to order list groups.\r\n\t */\r\n\tprivate _sort: (left: number, right: number) => Ordering;\r\n\r\n\t/**\r\n\t * Grouping keys.\r\n\t */\r\n\tprivate _keys: Array<number> = [];\r\n\r\n\t/**\r\n\t * List item groups.\r\n\t */\r\n\tprivate _groups: { [key: number]: Array<A> } = {};\r\n\r\n\t/**\r\n\t * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n\t *\r\n\t * @param x      Item\r\n\t * @param key    Group name\r\n\t * @param index  Index\r\n\t */\r\n\tprivate _insert(x: A, key: number, index?: number): void {\r\n\t\tif (this._groups[key] == null) {\r\n\t\t\tthis._groups[key] = [];\r\n\r\n\t\t\t// TODO code duplication with SortedList\r\n\t\t\tconst { found, index } = $array.getSortedIndex(this._keys, this._sort, key);\r\n\r\n\t\t\tif (found) {\r\n\t\t\t\tthrow new Error(\"Key already exists: \" + key);\r\n\r\n\t\t\t} else {\r\n\t\t\t\t$array.insertIndex(this._keys, index, key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (index == null) {\r\n\t\t\tthis._groups[key].push(x);\r\n\r\n\t\t} else {\r\n\t\t\t$array.insertIndex(this._groups[key], index, x);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an item from the list.\r\n\t *\r\n\t * @param x Item to remove\r\n\t */\r\n\tprivate _remove(x: A): void {\r\n\t\tconst key = this._getKey(x);\r\n\r\n\t\tconst values = this._groups[key];\r\n\r\n\t\tif (values != null) {\r\n\t\t\t$array.remove(values, x);\r\n\r\n\t\t\tif (values.length === 0) {\r\n\t\t\t\tdelete this._groups[key];\r\n\r\n\t\t\t\tconst { found, index } = $array.getSortedIndex(this._keys, this._sort, key);\r\n\r\n\t\t\t\tif (found) {\r\n\t\t\t\t\t$array.removeIndex(this._keys, index);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Key doesn't exist: \" + key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor(\r\n\t\tlist: $iter.Iterable<A> & {\r\n\t\t\tevents: EventDispatcher<{\r\n\t\t\t\tinserted: { newValue: A },\r\n\t\t\t\tremoved: { oldValue: A }\r\n\t\t\t}>;\r\n\t\t},\r\n\t\tgetKey: (value: A) => number,\r\n\t\tsort: (left: number, right: number) => Ordering\r\n\t) {\r\n\t\tsuper([\r\n\t\t\tlist.events.on(\"inserted\", (x) => {\r\n\t\t\t\tconst value = x.newValue;\r\n\t\t\t\tconst key = this._getKey(value);\r\n\r\n\t\t\t\tlet index = 0;\r\n\r\n\t\t\t\t$iter.eachContinue(list.iterator(), (x) => {\r\n\t\t\t\t\tif (x === value) {\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t} else if (this._getKey(x) === key) {\r\n\t\t\t\t\t\t++index;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._insert(value, key, index);\r\n\t\t\t}, undefined, false),\r\n\r\n\t\t\tlist.events.on(\"removed\", (x) => {\r\n\t\t\t\tthis._remove(x.oldValue);\r\n\t\t\t}, undefined, false)\r\n\t\t]);\r\n\r\n\t\tthis._getKey = getKey;\r\n\t\tthis._sort = sort;\r\n\r\n\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\tthis._insert(x, getKey(x));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator for the list.\r\n\t *\r\n\t * The iterator will iterate through all items in all groups.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<A> {\r\n\t\treturn $iter.flatten($iter.map($iter.fromArray(this._keys), (key) => {\r\n\t\t\treturn $iter.fromArray(this._groups[key]);\r\n\t\t}));\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n */\r\nexport type ListLike<A> = $iter.Iterable<A> & {\r\n\tevents: EventDispatcher<{ removed: { oldValue: A } }>;\r\n};\r\n\r\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\r\nexport class ListDisposer<A extends IDisposer> extends Disposer {\r\n\tconstructor(list: ListLike<A>, disposeOnRemove: boolean = true) {\r\n\t\tif (disposeOnRemove) {\r\n\t\t\tconst disposer = list.events.on(\"removed\", (x) => {\r\n\t\t\t\tx.oldValue.dispose();\r\n\t\t\t}, undefined, false);\r\n\r\n\t\t\tsuper(() => {\r\n\t\t\t\tdisposer.dispose();\r\n\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t} else {\r\n\t\t\tsuper(() => {\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\r\nfunction checkBounds(index: number, len: number): void {\r\n\tif (!(index >= 0 && index < len)) {\r\n\t\tthrow new Error(\"Index out of bounds: \" + index);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\r\nexport class List<T> {\r\n\r\n\t/**\r\n\t * List values.\r\n\t */\r\n\tprivate _values: Array<T>;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<this, IListEvents<T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param initial  Inital list of values to add to list\r\n\t */\r\n\tconstructor(initial: Array<T> = []) {\r\n\t\tthis._values = initial;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of values in the list.\r\n\t *\r\n\t * Do not use this property to add values. Rather use dedicated methods, like\r\n\t * `push()`, `removeIndex()`, etc.\r\n\t *\r\n\t * @readonly\r\n\t * @return List values\r\n\t */\r\n\tpublic get values(): Array<T> {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if list contains specific item reference.\r\n\t *\r\n\t * @param item  Item to search for\r\n\t * @return `true` if found, `false` if not found\r\n\t */\r\n\tpublic contains(value: T): boolean {\r\n\t\treturn this._values.indexOf(value) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes specific item from the list.\r\n\t *\r\n\t * @param item An item to remove\r\n\t */\r\n\tpublic removeValue(value: T): void {\r\n\t\tlet i = 0;\r\n\t\tlet length = this._values.length;\r\n\r\n\t\twhile (i < length) {\r\n\t\t\t// TODO handle NaN\r\n\t\t\tif (this._values[i] === value) {\r\n\t\t\t\tthis.removeIndex(i);\r\n\t\t\t\t--length;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t++i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Searches the list for specific item and returns its index.\r\n\t *\r\n\t * @param item  An item to search for\r\n\t * @return Index or -1 if not found\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\treturn $array.indexOf(this._values, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Number of items in list.\r\n\t *\r\n\t * @readonly\r\n\t * @return Number of items\r\n\t */\r\n\tpublic get length(): number {\r\n\t\treturn this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's a value at specific index.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return Value exists?\r\n\t */\r\n\tpublic hasIndex(index: number): boolean {\r\n\t\treturn index >= 0 && index < this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an item at specified index.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return List item\r\n\t */\r\n\tpublic getIndex(index: number): T | undefined {\r\n\t\treturn this._values[index];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets value at specific index.\r\n\t *\r\n\t * If there's already a value at the index, it is overwritten.\r\n\t *\r\n\t * @param index  Index\r\n\t * @param value  New value\r\n\t * @return New value\r\n\t */\r\n\tpublic setIndex(index: number, value: T): T {\r\n\t\tcheckBounds(index, this._values.length);\r\n\r\n\t\tconst oldValue = this._values[index];\r\n\r\n\t\t// Do nothing if the old value and the new value are the same\r\n\t\tif (oldValue !== value) {\r\n\t\t\tthis._values[index] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn oldValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item to the list at a specific index, which pushes all the other\r\n\t * items further down the list.\r\n\t *\r\n\t * @param index Index\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic insertIndex(index: number, value: T): void {\r\n\t\tcheckBounds(index, this._values.length + 1);\r\n\r\n\t\t$array.insertIndex(this._values, index, value);\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [_sortQuicksort description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param low    [description]\r\n\t * @param high   [description]\r\n\t * @param order  [description]\r\n\t */\r\n\tprivate _sortQuicksort(low: number, high: number, order: (left: T, right: T) => Ordering): void {\r\n\t\tif (low < high) {\r\n\t\t\tconst p = this._sortPartition(low, high, order);\r\n\t\t\tthis._sortQuicksort(low, p, order);\r\n\t\t\tthis._sortQuicksort(p + 1, high, order);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [_sortPartition description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param low    [description]\r\n\t * @param high   [description]\r\n\t * @param order  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprivate _sortPartition(low: number, high: number, order: (left: T, right: T) => Ordering): number {\r\n\t\tconst values = this._values;\r\n\t\tconst pivot = values[low];\r\n\r\n\t\tlet i = low - 1;\r\n\t\tlet j = high + 1;\r\n\r\n\t\tfor (; ;) {\r\n\t\t\tdo {\r\n\t\t\t\t++i;\r\n\t\t\t} while (order(values[i], pivot) < 0);\r\n\r\n\t\t\tdo {\r\n\t\t\t\t--j;\r\n\t\t\t} while (order(values[j], pivot) > 0);\r\n\r\n\t\t\tif (i >= j) {\r\n\t\t\t\treturn j;\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis.swap(i, j);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reorders list items according to specific ordering function.\r\n\t *\r\n\t * @param order  Ordering function\r\n\t */\r\n\tpublic sort(order: (left: T, right: T) => Ordering): void {\r\n\t\t// https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n\t\t// @todo faster implementation of this\r\n\t\t// @todo test this\r\n\t\tthis._sortQuicksort(0, this._values.length - 1, order);\r\n\t}\r\n\r\n\t/**\r\n\t * Swaps indexes of two items in the list.\r\n\t *\r\n\t * @param a  Item 1\r\n\t * @param b  Item 2\r\n\t */\r\n\tpublic swap(a: number, b: number): void {\r\n\t\tconst len = this._values.length;\r\n\r\n\t\tcheckBounds(a, len);\r\n\t\tcheckBounds(b, len);\r\n\r\n\t\tif (a !== b) {\r\n\t\t\tconst value_a = this._values[a];\r\n\t\t\tconst value_b = this._values[b];\r\n\r\n\t\t\tthis._values[a] = value_b;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: a,\r\n\t\t\t\t\toldValue: value_a,\r\n\t\t\t\t\tnewValue: value_b\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._values[b] = value_a;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: b,\r\n\t\t\t\t\toldValue: value_b,\r\n\t\t\t\t\tnewValue: value_a\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a value at specific index.\r\n\t *\r\n\t * @param index  Index of value to remove\r\n\t * @return Removed value\r\n\t */\r\n\tpublic removeIndex(index: number): T {\r\n\t\tcheckBounds(index, this._values.length);\r\n\r\n\t\tconst oldValue = this._values[index];\r\n\r\n\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\tif (this.events.isEnabled(\"removeIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"removeIndex\", {\r\n\t\t\t\ttype: \"removeIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\toldValue: oldValue\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\ttype: \"removed\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\toldValue: oldValue\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn oldValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves an item to a specific index within the list.\r\n\t *\r\n\t * If the index is not specified it will move the item to the end of the\r\n\t * list.\r\n\t *\r\n\t * @param value  Item to move\r\n\t * @param index  Index to place item at\r\n\t */\r\n\tpublic moveValue(value: T, toIndex?: number): void {\r\n\t\t// TODO don't do anything if the desired index is the same as the current index\r\n\t\tlet index = this.indexOf(value);\r\n\r\n\t\t// TODO remove all old values rather than only the first ?\r\n\t\tif (index !== -1) {\r\n\t\t\tconst oldValue = this._values[index];\r\n\r\n\t\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\t\tif (this.events.isEnabled(\"removeIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removeIndex\", {\r\n\t\t\t\t\ttype: \"removeIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (toIndex == null) {\r\n\t\t\ttoIndex = this._values.length;\r\n\t\t\tthis._values.push(value);\r\n\r\n\t\t} else {\r\n\t\t\t$array.insertIndex(this._values, toIndex, value);\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: toIndex,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (index === -1) {\r\n\t\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item to the end of the list.\r\n\t *\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic push<K extends T>(value: K): K {\r\n\t\tconst index = this._values.push(value) - 1;\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item as a first item in the list.\r\n\t *\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic unshift(value: T): void {\r\n\t\tthis.insertIndex(0, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds multiple items to the list.\r\n\t *\r\n\t * @param items  An Array of items to add\r\n\t */\r\n\tpublic pushAll(values: Array<T>): void {\r\n\t\t$array.each(values, (value) => {\r\n\t\t\tthis.push(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies and adds items from abother list.\r\n\t *\r\n\t * @param source  A list top copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tthis.pushAll(source._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the last item from the list, and removes it.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic pop(): $type.Optional<T> {\r\n\t\tlet index = this._values.length - 1;\r\n\t\treturn index < 0 ? undefined : this.removeIndex(this._values.length - 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the first item from the list, and removes it.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic shift(): $type.Optional<T> {\r\n\t\treturn this._values.length ? this.removeIndex(0) : undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets multiple items to the list.\r\n\t *\r\n\t * All current items are removed.\r\n\t *\r\n\t * @param newArray  New items\r\n\t */\r\n\tpublic setAll(newArray: Array<T>): void {\r\n\t\t// @tod if a value exists in both the new and old arrays, don't send remove/insert events\r\n\t\tconst oldArray = $array.copy(this._values);\r\n\r\n\t\tthis._values.length = 0;\r\n\r\n\t\t$array.each(newArray, (value) => {\r\n\t\t\tthis._values.push(value);\r\n\t\t});\r\n\r\n\t\tif (this.events.isEnabled(\"setAll\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"setAll\", {\r\n\t\t\t\ttype: \"setAll\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\toldArray: oldArray,\r\n\t\t\t\tnewArray: this._values // TODO make a copy ?\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t$array.each(oldArray, (x) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: x\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t$array.each(this._values, (x) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: x\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the list.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis.setAll([]);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<T> {\r\n\t\treturn $iter.fromArray(this._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the list.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<T> {\r\n\t\tconst length = this._values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tyield this._values[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each element in the list.\r\n\t *\r\n\t * `f` should have at least one parameter defined which will get a current\r\n\t * item, with optional second argument - index.\r\n\t */\r\n\tpublic each(f: (value: T, index: number) => void): void {\r\n\t\t$array.each(this._values, f);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a specific range of list items, which can be iterated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Code duplication with IndexedIterable\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return Range\r\n\t */\r\n\tpublic range(start: number, end: number): IndexedIterable<T> {\r\n\t\tif (start <= end) {\r\n\t\t\tconst diff = end - start;\r\n\r\n\t\t\tstart = Math.max(start, 0);\r\n\t\t\tend = Math.min(start + diff, this._values.length);\r\n\r\n\t\t\treturn new IndexedIterable(this._values, start, end);\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Start index must be lower than end index\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator that has list items sorted backwards.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return List\r\n\t */\r\n\tpublic backwards(): IndexedIterable<T> {\r\n\t\treturn new IndexedIterable(this._values, this._values.length, 0);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class ListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends List<T> implements IClone<ListTemplate<T>> {\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.push(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.push(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an exact clone of the list, including its items and template.\r\n\t *\r\n\t * @return New list\r\n\t */\r\n\tpublic clone(): ListTemplate<T> {\r\n\t\tconst out = new ListTemplate(this.template);\r\n\r\n\t\tconst values = this.values;\r\n\r\n\t\tconst length = values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tout.push(values[i].clone());\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}