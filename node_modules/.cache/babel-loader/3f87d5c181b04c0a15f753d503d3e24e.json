{"ast":null,"code":"/**\r\n * Functionality for drawing a trapezoid.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../Registry\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\n\nvar Trapezoid =\n/** @class */\nfunction (_super) {\n  __extends(Trapezoid, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Trapezoid() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Trapezoid\";\n    _this.element = _this.paper.add(\"path\");\n    _this.topSide = percent(100);\n    _this.bottomSide = percent(100);\n    _this.leftSide = percent(100);\n    _this.rightSide = percent(100);\n    _this.isMeasured = false; // todo: add measureElement\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Trapezoid.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n    var ts = $utils.relativeToValue(this.topSide, w);\n    var bs = $utils.relativeToValue(this.bottomSide, w);\n    var ls = $utils.relativeToValue(this.leftSide, h);\n    var rs = $utils.relativeToValue(this.rightSide, h); // 1----2\n    // |    |\n    // 4----3\n\n    var x0 = (w - ts) / 2;\n    var y0 = (h - ls) / 2;\n    var x1 = w - (w - ts) / 2;\n    var y1 = (h - rs) / 2;\n    var x2 = w - (w - bs) / 2;\n    var y2 = h - (h - rs) / 2;\n    var x3 = (w - bs) / 2;\n    var y3 = h - (h - ls) / 2;\n    var mt = \"\";\n    var mr = \"\";\n    var mb = \"\";\n    var ml = \"\";\n\n    if ($type.hasValue(this.horizontalNeck)) {\n      var hn = this.horizontalNeck.value;\n      mt = $path.lineTo({\n        x: w * hn,\n        y: Math.max(y0, y1)\n      });\n      mb = $path.lineTo({\n        x: w * hn,\n        y: Math.min(y2, y3)\n      });\n    }\n\n    if ($type.hasValue(this.verticalNeck)) {\n      var vn = this.verticalNeck.value;\n      mr = $path.lineTo({\n        x: Math.min(x1, x2),\n        y: h * vn\n      });\n      ml = $path.lineTo({\n        x: Math.max(x0, x3),\n        y: h * vn\n      });\n    }\n\n    var path = $path.moveTo({\n      x: x0,\n      y: y0\n    }) + mt + $path.lineTo({\n      x: x1,\n      y: y1\n    }) + mr + $path.lineTo({\n      x: x2,\n      y: y2\n    }) + mb + $path.lineTo({\n      x: x3,\n      y: y3\n    }) + ml;\n    this.path = path;\n  };\n\n  Object.defineProperty(Trapezoid.prototype, \"topSide\", {\n    /**\r\n     * @return Width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topSide\");\n    },\n\n    /**\r\n     * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"topSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"bottomSide\", {\n    /**\r\n     * @return Width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomSide\");\n    },\n\n    /**\r\n     * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"leftSide\", {\n    /**\r\n     * @return Height\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"leftSide\");\n    },\n\n    /**\r\n     * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Height\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"leftSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"rightSide\", {\n    /**\r\n     * @return Height\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rightSide\");\n    },\n\n    /**\r\n     * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(100)\r\n     * @param value  Height\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"rightSide\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"horizontalNeck\", {\n    /**\r\n     * @return Horizontal neck position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalNeck\");\n    },\n\n    /**\r\n     * A relative vertical position of the \"neck\". If the top and bottom sides\r\n     * are of different width, and `horizontalNeck` is set, a choke point\r\n     * will be created at that position, creating a funnel shape.\r\n     *\r\n     * @param value  Horizontal neck position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"horizontalNeck\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Trapezoid.prototype, \"verticalNeck\", {\n    /**\r\n     * @return Vertical neck position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"verticalNeck\");\n    },\n\n    /**\r\n     * A relative horizontal position of the \"neck\". If the left and right sides\r\n     * are of different height, and `verticalNeck` is set, a choke point\r\n     * will be created at that position, creating a funnel shape.\r\n     *\r\n     * @param value  Vertical neck position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"verticalNeck\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Trapezoid;\n}(Sprite);\n\nexport { Trapezoid };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;","map":{"version":3,"sources":["../../../../../src/.internal/core/elements/Trapezoid.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functionality for drawing a trapezoid.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\ttopSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tbottomSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tleftSide?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\trightSide?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\thorizontalNeck?: Percent;\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t */\r\n\tverticalNeck?: Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Trapezoid]].\r\n */\r\nexport interface ITrapezoidEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Trapezoid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITrapezoidAdapters extends ISpriteAdapters, ITrapezoidProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\r\nexport class Trapezoid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITrapezoidProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITrapezoidAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITrapezoidEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Trapezoid\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.topSide = percent(100);\r\n\t\tthis.bottomSide = percent(100);\r\n\t\tthis.leftSide = percent(100);\r\n\t\tthis.rightSide = percent(100);\r\n\r\n\t\tthis.isMeasured = false; // todo: add measureElement\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this.pixelHeight;\r\n\r\n\t\tlet ts: number = $utils.relativeToValue(this.topSide, w);\r\n\t\tlet bs: number = $utils.relativeToValue(this.bottomSide, w);\r\n\t\tlet ls: number = $utils.relativeToValue(this.leftSide, h);\r\n\t\tlet rs: number = $utils.relativeToValue(this.rightSide, h);\r\n\r\n\t\t// 1----2\r\n\t\t// |    |\r\n\t\t// 4----3\r\n\r\n\t\tlet x0: number = (w - ts) / 2;\r\n\t\tlet y0: number = (h - ls) / 2;\r\n\r\n\t\tlet x1: number = w - (w - ts) / 2;\r\n\t\tlet y1: number = (h - rs) / 2;\r\n\r\n\t\tlet x2: number = w - (w - bs) / 2;\r\n\t\tlet y2: number = h - (h - rs) / 2;\r\n\r\n\t\tlet x3: number = (w - bs) / 2;\r\n\t\tlet y3: number = h - (h - ls) / 2;\r\n\r\n\t\tlet mt: string = \"\";\r\n\t\tlet mr: string = \"\";\r\n\t\tlet mb: string = \"\";\r\n\t\tlet ml: string = \"\";\r\n\r\n\t\tif ($type.hasValue(this.horizontalNeck)) {\r\n\t\t\tlet hn: number = this.horizontalNeck.value;\r\n\t\t\tmt = $path.lineTo({ x: w * hn, y: Math.max(y0, y1) });\r\n\t\t\tmb = $path.lineTo({ x: w * hn, y: Math.min(y2, y3) });\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(this.verticalNeck)) {\r\n\t\t\tlet vn: number = this.verticalNeck.value;\r\n\t\t\tmr = $path.lineTo({ x: Math.min(x1, x2), y: h * vn });\r\n\t\t\tml = $path.lineTo({ x: Math.max(x0, x3), y: h * vn });\r\n\t\t}\r\n\r\n\r\n\t\tlet path: string = $path.moveTo({ x: x0, y: y0 })\r\n\t\t\t+ mt\r\n\t\t\t+ $path.lineTo({ x: x1, y: y1 })\r\n\t\t\t+ mr\r\n\t\t\t+ $path.lineTo({ x: x2, y: y2 })\r\n\t\t\t+ mb\r\n\t\t\t+ $path.lineTo({ x: x3, y: y3 })\r\n\t\t\t+ ml\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set topSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get topSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Width\r\n\t */\r\n\tpublic set bottomSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width\r\n\t */\r\n\tpublic get bottomSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set leftSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"leftSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get leftSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"leftSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @param value  Height\r\n\t */\r\n\tpublic set rightSide(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"rightSide\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Height\r\n\t */\r\n\tpublic get rightSide(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"rightSide\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position of the \"neck\". If the top and bottom sides\r\n\t * are of different width, and `horizontalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Horizontal neck position\r\n\t */\r\n\tpublic set horizontalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"horizontalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal neck position\r\n\t */\r\n\tpublic get horizontalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"horizontalNeck\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position of the \"neck\". If the left and right sides\r\n\t * are of different height, and `verticalNeck` is set, a choke point\r\n\t * will be created at that position, creating a funnel shape.\r\n\t *\r\n\t * @param value  Vertical neck position\r\n\t */\r\n\tpublic set verticalNeck(value: Percent) {\r\n\t\tthis.setPropertyValue(\"verticalNeck\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical neck position\r\n\t */\r\n\tpublic get verticalNeck(): Percent {\r\n\t\treturn this.getPropertyValue(\"verticalNeck\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}