{"ast":null,"code":"/**\r\n * Defines Percent Chart Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Series, SeriesDataItem } from \"./Series\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { Label } from \"../../core/elements/Label\";\nimport { Color } from \"../../core/utils/Color\";\nimport { Tick } from \"../elements/Tick\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Container } from \"../../core/Container\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PercentSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PercentSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PercentSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Adds an `id` attribute the the slice element and returns its id.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentSeriesDataItem.prototype.uidAttr = function () {\n    return this.slice.uidAttr();\n  };\n  /**\r\n   * Hide the data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param toValue   Target value for animation\r\n   * @param fields    Fields to animate while hiding\r\n   */\n\n\n  PercentSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    if (!fields) {\n      fields = [\"value\"];\n    }\n\n    return _super.prototype.hide.call(this, duration, delay, 0, fields);\n  };\n  /**\r\n   * Sets visibility of the Data Item.\r\n   *\r\n   * @param value Data Item\r\n   */\n\n\n  PercentSeriesDataItem.prototype.setVisibility = function (value, noChangeValues) {\n    if (!noChangeValues) {\n      if (value) {\n        this.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\n      } else {\n        this.setWorkingValue(\"value\", 0, 0, 0);\n      }\n    }\n\n    _super.prototype.setVisibility.call(this, value, noChangeValues);\n  };\n  /**\r\n   * Show hidden data item (and corresponding visual elements).\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param delay     Delay hiding (ms)\r\n   * @param fields    Fields to animate while hiding\r\n   */\n\n\n  PercentSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    if (!fields) {\n      fields = [\"value\"];\n    }\n\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"category\", {\n    /**\r\n     * @return Category\r\n     */\n    get: function () {\n      return this.properties.category;\n    },\n\n    /**\r\n     * Category.\r\n     *\r\n     * @param value  Category\r\n     */\n    set: function (value) {\n      this.setProperty(\"category\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a marker used in the legend for this slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Marker container\r\n   */\n\n  PercentSeriesDataItem.prototype.createLegendMarker = function (marker) {\n    this.component.createLegendMarker(marker, this);\n  };\n\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"tick\", {\n    /**\r\n     * A Tick element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Tick element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._tick) {\n        var tick_1 = this.component.ticks.create();\n        this._tick = tick_1;\n        this.addSprite(tick_1);\n\n        this._disposers.push(tick_1);\n\n        tick_1.parent = this.component.ticksContainer;\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.ticks.removeValue(tick_1);\n          }\n        }));\n\n        tick_1.visible = this.visible;\n      }\n\n      return this._tick;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"label\", {\n    /**\r\n     * A Label element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Label element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._label) {\n        var label_1 = this.component.labels.create();\n        this.addSprite(label_1);\n        this._label = label_1;\n\n        this._disposers.push(label_1);\n\n        label_1.parent = this.component.labelsContainer;\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.labels.removeValue(label_1);\n          }\n        }));\n\n        label_1.visible = this.visible;\n      }\n\n      return this._label;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"slice\", {\n    /**\r\n     * An element, related to this data item. (slice)\r\n     *\r\n     * @readonly\r\n     * @return Slice element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._slice) {\n        var component_1 = this.component;\n        var slice_1 = component_1.slices.create();\n        this.addSprite(slice_1);\n        this._slice = slice_1;\n\n        this._disposers.push(slice_1);\n\n        slice_1.parent = component_1.slicesContainer;\n\n        this._disposers.push(new Disposer(function () {\n          component_1.slices.removeValue(slice_1);\n        }));\n\n        slice_1.visible = this.visible; // Apply accessibility\n\n        if (component_1.itemsFocusable()) {\n          if (!$type.hasValue(this.component.role)) {\n            this.component.role = \"menu\";\n          }\n\n          if (!$type.hasValue(slice_1.role)) {\n            slice_1.role = \"menuitem\";\n          }\n\n          slice_1.focusable = true;\n        } else {\n          if (!$type.hasValue(this.component.role)) {\n            this.component.role = \"list\";\n          }\n\n          if (!$type.hasValue(slice_1.role)) {\n            slice_1.role = \"listitem\";\n          }\n\n          slice_1.focusable = false;\n        } // Apply screen reader label\n\n\n        if (slice_1.focusable) {\n          slice_1.events.on(\"focus\", function (ev) {\n            slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\n          }, undefined, false);\n          slice_1.events.on(\"blur\", function (ev) {\n            slice_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n\n        if (slice_1.hoverable) {\n          slice_1.events.on(\"over\", function (ev) {\n            slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\n          }, undefined, false);\n          slice_1.events.on(\"out\", function (ev) {\n            slice_1.readerTitle = \"\";\n          }, undefined, false);\n        }\n      }\n\n      return this._slice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeriesDataItem.prototype, \"hiddenInLegend\", {\n    /**\r\n     * @return Disabled in legend?\r\n     */\n    get: function () {\n      return this.properties.hiddenInLegend;\n    },\n\n    /**\r\n     * Should dataItem (slice) be hidden in legend?\r\n     *\r\n     * @param value Visible in legend?\r\n     */\n    set: function (value) {\n      this.setProperty(\"hiddenInLegend\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PercentSeriesDataItem;\n}(SeriesDataItem);\n\nexport { PercentSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\n\nvar PercentSeries =\n/** @class */\nfunction (_super) {\n  __extends(PercentSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PercentSeries\";\n    _this._addAllDataItems = false;\n    _this.colors = new ColorSet();\n    _this.colors.step = 1;\n    _this.isMeasured = true;\n    _this.calculatePercent = true;\n\n    var slicesContainer = _this.createChild(Container);\n\n    slicesContainer.shouldClone = false;\n    slicesContainer.isMeasured = false;\n    _this.slicesContainer = slicesContainer;\n\n    var ticksContainer = _this.createChild(Container);\n\n    ticksContainer.shouldClone = false;\n    ticksContainer.isMeasured = false;\n    ticksContainer.layout = \"none\";\n    _this.ticksContainer = ticksContainer;\n\n    var labelsContainer = _this.createChild(Container);\n\n    labelsContainer.shouldClone = false;\n    labelsContainer.isMeasured = false;\n    labelsContainer.layout = \"none\";\n    _this.labelsContainer = labelsContainer;\n    _this.alignLabels = false;\n\n    _this.bulletsContainer.toFront(); // Make all slices focusable\n\n\n    _this.skipFocusThreshold = 50;\n    var defaultState = _this.defaultState;\n    defaultState.transitionEasing = $ease.sinOut; // Accessibility\n\n    _this.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creates a slice element.\r\n   *\r\n   * @return Slice\r\n   */\n\n\n  PercentSeries.prototype.createSlice = function () {\n    return new Sprite();\n  };\n  /**\r\n   * Creates a tick element.\r\n   *\r\n   * @return Tick\r\n   */\n\n\n  PercentSeries.prototype.createTick = function () {\n    return new Tick();\n  };\n  /**\r\n   * Sreates label element.\r\n   *\r\n   * @return label\r\n   */\n\n\n  PercentSeries.prototype.createLabel = function () {\n    return new Label();\n  };\n\n  Object.defineProperty(PercentSeries.prototype, \"slices\", {\n    /**\r\n     * A list of slice elements for the series.\r\n     *\r\n     * Use its `template` to configure look and behavior of the slices. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.stroke = am4core.color(\"#fff\");\r\n     * series.slices.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.stroke = am4core.color(\"#fff\");\r\n     * series.slices.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"stroke\": \"#fff\",\r\n     *       \"strokeWidth\": 2\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Slices\r\n     */\n    get: function () {\n      if (!this._slices) {\n        var slice = this.createSlice();\n        slice.applyOnClones = true;\n\n        this._disposers.push(slice);\n\n        this.initSlice(slice);\n        this._slices = new ListTemplate(slice);\n\n        this._disposers.push(new ListDisposer(this._slices));\n      }\n\n      return this._slices;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"ticks\", {\n    /**\r\n     * A list of tick elements for the series. Ticks connect slice to its label.\r\n     *\r\n     * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.ticks.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.ticks.template.strokeWidth = 2;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"ticks\": {\r\n     *       \"strokeWidth\": 2\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Ticks\r\n     */\n    get: function () {\n      if (!this._ticks) {\n        var tick = this.createTick();\n        tick.applyOnClones = true;\n\n        this._disposers.push(tick);\n\n        this.initTick(tick);\n        this._ticks = new ListTemplate(tick);\n\n        this._disposers.push(new ListDisposer(this._ticks));\n      }\n\n      return this._ticks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"labels\", {\n    /**\r\n     * A list of slice label elements for the series.\r\n     *\r\n     * Use its `template` to configure look and behavior of the labels. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.labels.template.fill = am4core.color(\"#c00\");\r\n     * series.labels.template.fontSize = 20;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.labels.template.fill = am4core.color(\"#c00\");\r\n     * series.labels.template.fontSize = 20;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"labels\": {\r\n     *       \"stroke\": \"#c00\",\r\n     *       \"fontSize\": 20\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n     * @return Labels\r\n     */\n    get: function () {\n      if (!this._labels) {\n        var label = this.createLabel();\n        label.applyOnClones = true;\n\n        this._disposers.push(label);\n\n        this.initLabel(label);\n        this._labels = new ListTemplate(label);\n\n        this._disposers.push(new ListDisposer(this._labels));\n      }\n\n      return this._labels;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n  PercentSeries.prototype.createDataItem = function () {\n    return new PercentSeriesDataItem();\n  };\n  /**\r\n   * Creates and returns a new slice element.\r\n   *\r\n   * @param sliceType  Type of the slice element\r\n   * @return Slice\r\n   */\n\n\n  PercentSeries.prototype.initSlice = function (slice) {};\n\n  PercentSeries.prototype.initLabel = function (label) {\n    label.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\n    label.isMeasured = false;\n    label.padding(5, 5, 5, 5);\n  };\n\n  PercentSeries.prototype.initTick = function (label) {};\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentSeries.prototype.validateDataItems = function () {\n    this.colors.reset();\n\n    if (this.patterns) {\n      this.patterns.reset();\n    }\n\n    _super.prototype.validateDataItems.call(this);\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  PercentSeries.prototype.validateDataElement = function (dataItem) {\n    var slice = dataItem.slice;\n\n    if (slice) {\n      if (slice.fill == undefined) {\n        if (this.patterns) {\n          if (!$type.hasValue(slice.stroke)) {\n            slice.stroke = this.colors.next();\n          }\n\n          slice.fill = this.patterns.next();\n\n          if ($type.hasValue(slice.fillOpacity)) {\n            slice.fill.backgroundOpacity = slice.fillOpacity;\n          }\n\n          if (slice.stroke instanceof Color) {\n            slice.fill.stroke = slice.stroke;\n            slice.fill.fill = slice.stroke;\n          }\n        } else {\n          slice.fill = this.colors.next();\n        }\n      } else {\n        this.colors.currentStep += this.colors.step;\n      }\n\n      if (slice.stroke == undefined) {\n        slice.stroke = slice.fill;\n      }\n    } // do this at the end, otherwise bullets won't be positioned properly\n\n\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    if (slice) {\n      dataItem.bullets.each(function (key, bullet) {\n        if (bullet.fill == undefined) {\n          bullet.fill = slice.fill;\n        }\n\n        if (bullet.stroke == undefined) {\n          bullet.stroke = slice.stroke;\n        }\n      });\n    }\n\n    this.updateLegendValue(dataItem);\n  };\n  /**\r\n   * Validates (processes) data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentSeries.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n\n    if (this.chart) {\n      this.chart.feedLegend();\n    }\n  };\n  /**\r\n   * Arranges slice labels according to position settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItems  Data items\r\n   */\n\n\n  PercentSeries.prototype.arrangeLabels = function (dataItems) {\n    for (var i = 0, len = dataItems.length; i < len; i++) {\n      var dataItem = dataItems[i];\n      var label = dataItem.label;\n\n      if (label) {\n        if (label.invalid) {\n          label.validate();\n        }\n\n        var lh = label.measuredHeight;\n\n        if (!label.visible) {\n          lh = 0;\n        }\n\n        if (label.pixelY - lh / 2 < -this.maxHeight / 2) {\n          label.y = -this.maxHeight / 2 + lh / 2;\n        }\n\n        var nextLabel = this.getNextLabel(i + 1, dataItems);\n        var bottom = label.pixelY + lh;\n\n        if (nextLabel) {\n          if (nextLabel.y < bottom) {\n            nextLabel.y = bottom;\n          }\n        }\n      }\n    }\n  };\n\n  PercentSeries.prototype.arrangeLabels2 = function (dataItems) {\n    var previousTop = this.maxHeight / 2;\n\n    for (var i = dataItems.length - 1; i >= 0; i--) {\n      var dataItem = dataItems[i];\n      var label = dataItem.label;\n\n      if (label) {\n        if (label.invalid) {\n          label.validate();\n        }\n\n        var lh = label.measuredHeight;\n\n        if (!label.visible) {\n          lh = 0;\n        }\n\n        if (i == dataItems.length - 1) {\n          previousTop += lh / 2;\n        }\n\n        if (label.pixelY + lh > previousTop) {\n          label.y = previousTop - lh;\n          previousTop = label.y;\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns the next label according to `index`.\r\n   *\r\n   * @param index      Current index\r\n   * @param dataItems  Data items\r\n   * @return Label element\r\n   */\n\n\n  PercentSeries.prototype.getNextLabel = function (index, dataItems) {\n    if (dataItems.length >= index) {\n      var nextDataItem = dataItems[index];\n\n      if (nextDataItem) {\n        if (nextDataItem.label) {\n          if (nextDataItem.visible) {\n            return nextDataItem.label;\n          } else {\n            return this.getNextLabel(index + 1, dataItems);\n          }\n        } else {\n          return this.getNextLabel(index + 1, dataItems);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(PercentSeries.prototype, \"colors\", {\n    /**\r\n     * @return Color set\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"colors\");\n    },\n\n    /**\r\n     * A color set to be used for slices.\r\n     *\r\n     * For each new subsequent slice, the chart will assign the next color in\r\n     * this set.\r\n     *\r\n     * @param value  Color set\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"colors\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PercentSeries.prototype, \"patterns\", {\n    /**\r\n     * @return Pattern set\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"patterns\");\n    },\n\n    /**\r\n     * A [[PatternSet]] to use when creating patterned fills for slices.\r\n     *\r\n     * @since 4.7.5\r\n     * @param value  Pattern set\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"patterns\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Binds related legend data item's visual settings to this series' visual\r\n   * settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker    Container\r\n   * @param dataItem  Data item\r\n   */\n\n  PercentSeries.prototype.createLegendMarker = function (marker, dataItem) {\n    $iter.each(marker.children.iterator(), function (child) {\n      var slice = dataItem.slice;\n      child.defaultState.properties.fill = slice.fill;\n      child.defaultState.properties.stroke = slice.stroke;\n      child.defaultState.properties.fillOpacity = slice.fillOpacity;\n      child.defaultState.properties.strokeOpacity = slice.strokeOpacity;\n      child.fill = slice.fill;\n      child.stroke = slice.stroke;\n      child.fillOpacity = slice.fillOpacity;\n      child.strokeOpacity = slice.strokeOpacity;\n\n      if (child.fill == undefined) {\n        child.__disabled = true;\n      }\n\n      var legendDataItem = marker.dataItem;\n      legendDataItem.color = slice.fill;\n      legendDataItem.colorOrig = slice.fill;\n      child.addDisposer(slice.events.on(\"propertychanged\", function (ev) {\n        if (ev.property == \"fill\") {\n          child.__disabled = false;\n\n          if (!child.isActive) {\n            child.fill = slice.fill;\n          }\n\n          child.defaultState.properties.fill = slice.fill;\n          legendDataItem.color = slice.fill;\n          legendDataItem.colorOrig = slice.fill;\n        }\n\n        if (ev.property == \"stroke\") {\n          if (!child.isActive) {\n            child.stroke = slice.stroke;\n          }\n\n          child.defaultState.properties.stroke = slice.stroke;\n        }\n      }, undefined, false));\n    });\n  };\n  /**\r\n   * Repositions bullets when slice's size changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  PercentSeries.prototype.handleSliceScale = function (event) {\n    var _this = this;\n\n    var slice = event.target;\n    var dataItem = slice.dataItem;\n    $iter.each(dataItem.bullets.iterator(), function (a) {\n      var value = a[1];\n\n      _this.positionBullet(value);\n    });\n  };\n  /**\r\n   * Repositions bullet and labels when slice moves.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  PercentSeries.prototype.handleSliceMove = function (event) {};\n  /**\r\n   * Copies all properties from another instance of [[PercentSeries]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  PercentSeries.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.slices.template.copyFrom(source.slices.template);\n    this.labels.template.copyFrom(source.labels.template);\n    this.ticks.template.copyFrom(source.ticks.template);\n    this.colors = source.colors.clone();\n  };\n\n  Object.defineProperty(PercentSeries.prototype, \"alignLabels\", {\n    /**\r\n     * @return Align labels?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"alignLabels\");\n    },\n\n    /**\r\n     * Align labels into nice vertical columns?\r\n     *\r\n     * This will ensure that labels never overlap with each other.\r\n     *\r\n     * Arranging labels into columns makes them more readble, and better user\r\n     * experience.\r\n     *\r\n     * If set to `false` labels will be positioned at `label.radius` distance,\r\n     * and may, in some cases, overlap.\r\n     *\r\n     * @default true\r\n     * @param value  Align labels?\r\n     */\n    set: function (value) {\n      this.setAlignLabels(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  PercentSeries.prototype.setAlignLabels = function (value) {\n    this.setPropertyValue(\"alignLabels\", value, true);\n  };\n\n  Object.defineProperty(PercentSeries.prototype, \"ignoreZeroValues\", {\n    /**\r\n     * @return Ignore zero values\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"ignoreZeroValues\");\n    },\n\n    /**\r\n     * If set to `true` the chart will not show slices with zero values.\r\n     *\r\n     * @default false\r\n     * @since 4.7.9\r\n     * @param  value  Ignore zero values\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"ignoreZeroValues\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates corresponding legend data item with current values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  PercentSeries.prototype.updateLegendValue = function (dataItem) {\n    if (dataItem) {\n      var legendDataItem = dataItem.legendDataItem;\n      var legendSettings = dataItem.legendSettings;\n\n      if (legendDataItem && legendSettings) {\n        if (legendSettings) {\n          if (legendSettings.labelText) {\n            legendDataItem.label.text = legendSettings.labelText;\n          }\n\n          if (legendSettings.itemLabelText) {\n            legendDataItem.label.text = legendSettings.itemLabelText;\n          }\n\n          if (legendSettings.valueText) {\n            legendDataItem.valueLabel.text = legendSettings.valueText;\n          }\n\n          if (legendSettings.itemValueText) {\n            legendDataItem.valueLabel.text = legendSettings.itemValueText;\n          }\n        }\n      }\n    }\n  };\n\n  return PercentSeries;\n}(Series);\n\nexport { PercentSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Disable labels and ticks.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof PercentSeries) {\n      var state = target.states.create(stateId);\n      var labelState = target.labels.template.states.create(stateId);\n      labelState.properties.disabled = true;\n      var tickState = target.ticks.template.states.create(stateId);\n      tickState.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"sources":["../../../../../src/.internal/charts/series/PercentSeries.ts"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;AAKG;;AACH,SAAS,MAAT,EAAiB,cAAjB,QAA6G,UAA7G;AAEA,SAAS,MAAT,QAAuB,mBAAvB;AACA,SAAS,KAAT,QAAsB,2BAAtB;AACA,SAAS,KAAT,QAAsB,wBAAtB;AACA,SAAS,IAAT,QAAqB,kBAArB;AACA,SAAS,YAAT,EAAuB,YAAvB,QAA2C,uBAA3C;AACA,SAAS,SAAT,QAA0B,sBAA1B;AAGA,SAAS,QAAT,QAAyB,2BAAzB;AAEA,SAAS,QAAT,QAAyB,qBAAzB;AAEA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,SAAS,QAAT,QAAyB,2BAAzB;AACA,SAAS,YAAT,EAAuB,qBAAvB,QAAoD,6BAApD;AAIA;;;;;AAKG;AAEH;;AAEA;;;;AAIG;;AACH,IAAA,qBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAA2C,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;EAsC1C;;AAEG;;;EACH,SAAA,qBAAA,GAAA;IAAA,IAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;IAEC,KAAI,CAAC,SAAL,GAAiB,uBAAjB;;IAEA,KAAI,CAAC,UAAL;;;EACA;EAGD;;;;AAIG;;;EACI,qBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;IACC,OAAO,KAAK,KAAL,CAAW,OAAX,EAAP;EACA,CAFM;EAIP;;;;;;;AAOG;;;EACI,qBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,QAAZ,EAA+B,KAA/B,EAA+C,OAA/C,EAAiE,MAAjE,EAAkF;IACjF,IAAI,CAAC,MAAL,EAAa;MACZ,MAAM,GAAG,CAAC,OAAD,CAAT;IACA;;IAED,OAAO,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV,EAAW,QAAX,EAAqB,KAArB,EAA4B,CAA5B,EAA+B,MAA/B,CAAP;EACA,CANM;EAQP;;;;AAIG;;;EACI,qBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,KAArB,EAAqC,cAArC,EAA6D;IAC5D,IAAI,CAAC,cAAL,EAAqB;MACpB,IAAI,KAAJ,EAAW;QACV,KAAK,eAAL,CAAqB,OAArB,EAA8B,KAAK,MAAL,CAAY,OAAZ,EAAqB,KAAnD,EAA0D,CAA1D,EAA6D,CAA7D;MACA,CAFD,MAGK;QACJ,KAAK,eAAL,CAAqB,OAArB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;MACA;IACD;;IAED,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,KAApB,EAA2B,cAA3B;EACA,CAXM;EAaP;;;;;;AAMG;;;EACI,qBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,QAAZ,EAA+B,KAA/B,EAA+C,MAA/C,EAAgE;IAC/D,IAAI,CAAC,MAAL,EAAa;MACZ,MAAM,GAAG,CAAC,OAAD,CAAT;IACA;;IACD,OAAO,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV,EAAW,QAAX,EAAqB,KAArB,EAA4B,MAA5B,CAAP;EACA,CALM;;EAYP,MAAA,CAAA,cAAA,CAAW,qBAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;IAInB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,UAAL,CAAgB,QAAvB;IACA,CATkB;;IALnB;;;;AAIG;SACH,UAAoB,KAApB,EAAiC;MAChC,KAAK,WAAL,CAAiB,UAAjB,EAA6B,KAA7B;IACA,CAFkB;oBAAA;;EAAA,CAAnB;EAYA;;;;;AAKG;;EACI,qBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,MAA1B,EAA2C;IAC1C,KAAK,SAAL,CAAe,kBAAf,CAAkC,MAAlC,EAA0C,IAA1C;EACA,CAFM;;EASP,MAAA,CAAA,cAAA,CAAW,qBAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;IAUzB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,eAAZ;IACA,CAfwB;;IALzB;;;;AAIG;SACH,UAA0B,KAA1B,EAA+C;MAC9C,KAAK,eAAL,GAAuB,KAAvB;;MACA,IAAI,KAAK,CAAC,KAAV,EAAiB;QAChB,KAAK,CAAC,KAAN,CAAY,QAAZ,GAAuB,IAAvB;MACA;;MACD,IAAI,KAAK,CAAC,UAAV,EAAsB;QACrB,KAAK,CAAC,UAAN,CAAiB,QAAjB,GAA4B,IAA5B;MACA;IACD,CARwB;oBAAA;;EAAA,CAAzB;EAuBA,MAAA,CAAA,cAAA,CAAW,qBAAA,CAAA,SAAX,EAAW,MAAX,EAAe;IANf;;;;;AAKG;SACH,YAAA;MAAA,IAAA,KAAA,GAAA,IAAA;;MACC,IAAI,CAAC,KAAK,KAAV,EAAiB;QAChB,IAAI,MAAI,GAAG,KAAK,SAAL,CAAe,KAAf,CAAqB,MAArB,EAAX;QACA,KAAK,KAAL,GAAa,MAAb;QACA,KAAK,SAAL,CAAe,MAAf;;QACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,MAArB;;QACA,MAAI,CAAC,MAAL,GAAc,KAAK,SAAL,CAAe,cAA7B;;QAEA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,QAAJ,CAAa,YAAA;UACjC,IAAI,KAAI,CAAC,SAAT,EAAoB;YACnB,KAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,WAArB,CAAiC,MAAjC;UACA;QACD,CAJoB,CAArB;;QAOA,MAAI,CAAC,OAAL,GAAe,KAAK,OAApB;MACA;;MACD,OAAO,KAAK,KAAZ;IACA,CAlBc;oBAAA;;EAAA,CAAf;EA0BA,MAAA,CAAA,cAAA,CAAW,qBAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;IANhB;;;;;AAKG;SACH,YAAA;MAAA,IAAA,KAAA,GAAA,IAAA;;MACC,IAAI,CAAC,KAAK,MAAV,EAAkB;QACjB,IAAI,OAAK,GAAG,KAAK,SAAL,CAAe,MAAf,CAAsB,MAAtB,EAAZ;QACA,KAAK,SAAL,CAAe,OAAf;QACA,KAAK,MAAL,GAAc,OAAd;;QAEA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,OAArB;;QACA,OAAK,CAAC,MAAN,GAAe,KAAK,SAAL,CAAe,eAA9B;;QAEA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,QAAJ,CAAa,YAAA;UACjC,IAAI,KAAI,CAAC,SAAT,EAAoB;YACnB,KAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,WAAtB,CAAkC,OAAlC;UACA;QACD,CAJoB,CAArB;;QAMA,OAAK,CAAC,OAAN,GAAgB,KAAK,OAArB;MACA;;MACD,OAAO,KAAK,MAAZ;IACA,CAlBe;oBAAA;;EAAA,CAAhB;EA0BA,MAAA,CAAA,cAAA,CAAW,qBAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;IANhB;;;;;AAKG;SACH,YAAA;MAAA,IAAA,KAAA,GAAA,IAAA;;MACC,IAAI,CAAC,KAAK,MAAV,EAAkB;QAEjB,IAAI,WAAS,GAAG,KAAK,SAArB;QAEA,IAAI,OAAK,GAAG,WAAS,CAAC,MAAV,CAAiB,MAAjB,EAAZ;QACA,KAAK,SAAL,CAAe,OAAf;QAEA,KAAK,MAAL,GAAc,OAAd;;QACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,OAArB;;QACA,OAAK,CAAC,MAAN,GAAe,WAAS,CAAC,eAAzB;;QAEA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,QAAJ,CAAa,YAAA;UACjC,WAAS,CAAC,MAAV,CAAiB,WAAjB,CAA6B,OAA7B;QACA,CAFoB,CAArB;;QAKA,OAAK,CAAC,OAAN,GAAgB,KAAK,OAArB,CAhBiB,CAkBjB;;QACA,IAAI,WAAS,CAAC,cAAV,EAAJ,EAAgC;UAC/B,IAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAK,SAAL,CAAe,IAA9B,CAAL,EAA0C;YACzC,KAAK,SAAL,CAAe,IAAf,GAAsB,MAAtB;UACA;;UACD,IAAI,CAAC,KAAK,CAAC,QAAN,CAAe,OAAK,CAAC,IAArB,CAAL,EAAiC;YAChC,OAAK,CAAC,IAAN,GAAa,UAAb;UACA;;UACD,OAAK,CAAC,SAAN,GAAkB,IAAlB;QACA,CARD,MASK;UACJ,IAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAK,SAAL,CAAe,IAA9B,CAAL,EAA0C;YACzC,KAAK,SAAL,CAAe,IAAf,GAAsB,MAAtB;UACA;;UACD,IAAI,CAAC,KAAK,CAAC,QAAN,CAAe,OAAK,CAAC,IAArB,CAAL,EAAiC;YAChC,OAAK,CAAC,IAAN,GAAa,UAAb;UACA;;UACD,OAAK,CAAC,SAAN,GAAkB,KAAlB;QACA,CApCgB,CAsCjB;;;QACA,IAAI,OAAK,CAAC,SAAV,EAAqB;UACpB,OAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,OAAhB,EAAyB,UAAC,EAAD,EAAG;YAC3B,OAAK,CAAC,WAAN,GAAoB,WAAS,CAAC,cAAV,CAAyB,WAAS,CAAC,cAAnC,EAAmD,KAAnD,CAApB;UACA,CAFD,EAEG,SAFH,EAEc,KAFd;UAGA,OAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,UAAC,EAAD,EAAG;YAC1B,OAAK,CAAC,WAAN,GAAoB,EAApB;UACA,CAFD,EAEG,SAFH,EAEc,KAFd;QAGA;;QACD,IAAI,OAAK,CAAC,SAAV,EAAqB;UACpB,OAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,UAAC,EAAD,EAAG;YAC1B,OAAK,CAAC,WAAN,GAAoB,WAAS,CAAC,cAAV,CAAyB,WAAS,CAAC,cAAnC,EAAmD,KAAnD,CAApB;UACA,CAFD,EAEG,SAFH,EAEc,KAFd;UAGA,OAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,KAAhB,EAAuB,UAAC,EAAD,EAAG;YACzB,OAAK,CAAC,WAAN,GAAoB,EAApB;UACA,CAFD,EAEG,SAFH,EAEc,KAFd;QAGA;MACD;;MACD,OAAO,KAAK,MAAZ;IACA,CA1De;oBAAA;;EAAA,CAAhB;EAiEA,MAAA,CAAA,cAAA,CAAW,qBAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;IAIzB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,UAAL,CAAgB,cAAvB;IACA,CATwB;;IALzB;;;;AAIG;SACH,UAA0B,KAA1B,EAAwC;MACvC,KAAK,WAAL,CAAiB,gBAAjB,EAAmC,KAAnC;IACA,CAFwB;oBAAA;;EAAA,CAAzB;EAUD,OAAA,qBAAA;AAAC,CAhSD,CAA2C,cAA3C,CAAA;;;AA4WA;;;;;AAKG;;AAEH;;;;;;AAMG;;AACH,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAmC,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EAgFlC;;AAEG;;;EACH,SAAA,aAAA,GAAA;IAAA,IAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;IAGC,KAAI,CAAC,SAAL,GAAiB,eAAjB;IAEA,KAAI,CAAC,gBAAL,GAAwB,KAAxB;IAEA,KAAI,CAAC,MAAL,GAAc,IAAI,QAAJ,EAAd;IACA,KAAI,CAAC,MAAL,CAAY,IAAZ,GAAmB,CAAnB;IACA,KAAI,CAAC,UAAL,GAAkB,IAAlB;IACA,KAAI,CAAC,gBAAL,GAAwB,IAAxB;;IAEA,IAAI,eAAe,GAAG,KAAI,CAAC,WAAL,CAAiB,SAAjB,CAAtB;;IACA,eAAe,CAAC,WAAhB,GAA8B,KAA9B;IACA,eAAe,CAAC,UAAhB,GAA6B,KAA7B;IACA,KAAI,CAAC,eAAL,GAAuB,eAAvB;;IAEA,IAAI,cAAc,GAAG,KAAI,CAAC,WAAL,CAAiB,SAAjB,CAArB;;IACA,cAAc,CAAC,WAAf,GAA6B,KAA7B;IACA,cAAc,CAAC,UAAf,GAA4B,KAA5B;IACA,cAAc,CAAC,MAAf,GAAwB,MAAxB;IACA,KAAI,CAAC,cAAL,GAAsB,cAAtB;;IAEA,IAAI,eAAe,GAAG,KAAI,CAAC,WAAL,CAAiB,SAAjB,CAAtB;;IACA,eAAe,CAAC,WAAhB,GAA8B,KAA9B;IACA,eAAe,CAAC,UAAhB,GAA6B,KAA7B;IACA,eAAe,CAAC,MAAhB,GAAyB,MAAzB;IACA,KAAI,CAAC,eAAL,GAAuB,eAAvB;IAEA,KAAI,CAAC,WAAL,GAAmB,KAAnB;;IAEA,KAAI,CAAC,gBAAL,CAAsB,OAAtB,GA/BD,CAiCC;;;IACA,KAAI,CAAC,kBAAL,GAA0B,EAA1B;IAEA,IAAI,YAAY,GAAG,KAAI,CAAC,YAAxB;IACA,YAAY,CAAC,gBAAb,GAAgC,KAAK,CAAC,MAAtC,CArCD,CAuCC;;IACA,KAAI,CAAC,cAAL,GAAsB,kDAAtB;;IAEA,KAAI,CAAC,UAAL;;;EACA;EAED;;;;AAIG;;;EACO,aAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;IACC,OAAO,IAAI,MAAJ,EAAP;EACA,CAFS;EAIV;;;;AAIG;;;EACO,aAAA,CAAA,SAAA,CAAA,UAAA,GAAV,YAAA;IACC,OAAO,IAAI,IAAJ,EAAP;EACA,CAFS;EAIV;;;;AAIG;;;EACO,aAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;IACC,OAAO,IAAI,KAAJ,EAAP;EACA,CAFS;;EAiCV,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;IA7BjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;SACH,YAAA;MACC,IAAI,CAAC,KAAK,OAAV,EAAmB;QAClB,IAAI,KAAK,GAAG,KAAK,WAAL,EAAZ;QAEA,KAAK,CAAC,aAAN,GAAsB,IAAtB;;QACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB;;QACA,KAAK,SAAL,CAAe,KAAf;QAEA,KAAK,OAAL,GAAe,IAAI,YAAJ,CAAiB,KAAjB,CAAf;;QACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,YAAJ,CAAiB,KAAK,OAAtB,CAArB;MACA;;MACD,OAAO,KAAK,OAAZ;IACA,CAZgB;oBAAA;;EAAA,CAAjB;EAwCA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;IA1BhB;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;SACH,YAAA;MACC,IAAI,CAAC,KAAK,MAAV,EAAkB;QACjB,IAAI,IAAI,GAAG,KAAK,UAAL,EAAX;QACA,IAAI,CAAC,aAAL,GAAqB,IAArB;;QACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB;;QACA,KAAK,QAAL,CAAc,IAAd;QAEA,KAAK,MAAL,GAAc,IAAI,YAAJ,CAAiB,IAAjB,CAAd;;QACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,YAAJ,CAAiB,KAAK,MAAtB,CAArB;MACA;;MACD,OAAO,KAAK,MAAZ;IACA,CAXe;oBAAA;;EAAA,CAAhB;EA0CA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;IA7BjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;SACH,YAAA;MACC,IAAI,CAAC,KAAK,OAAV,EAAmB;QAClB,IAAI,KAAK,GAAG,KAAK,WAAL,EAAZ;QACA,KAAK,CAAC,aAAN,GAAsB,IAAtB;;QACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB;;QACA,KAAK,SAAL,CAAe,KAAf;QAEA,KAAK,OAAL,GAAe,IAAI,YAAJ,CAAiB,KAAjB,CAAf;;QACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,YAAJ,CAAiB,KAAK,OAAtB,CAArB;MACA;;MACD,OAAO,KAAK,OAAZ;IACA,CAXgB;oBAAA;;EAAA,CAAjB;EAaA;;;;;AAKG;;EACO,aAAA,CAAA,SAAA,CAAA,cAAA,GAAV,YAAA;IACC,OAAO,IAAI,qBAAJ,EAAP;EACA,CAFS;EAIV;;;;;AAKG;;;EACO,aAAA,CAAA,SAAA,CAAA,SAAA,GAAV,UAAoB,KAApB,EAAyC,CAExC,CAFS;;EAIA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAV,UAAoB,KAApB,EAAyC;IACxC,KAAK,CAAC,IAAN,GAAa,kDAAb;IACA,KAAK,CAAC,UAAN,GAAmB,KAAnB;IACA,KAAK,CAAC,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;EACA,CAJS;;EAMA,aAAA,CAAA,SAAA,CAAA,QAAA,GAAV,UAAmB,KAAnB,EAAuC,CAEtC,CAFS;EAIV;;;;AAIG;;;EACI,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;IACC,KAAK,MAAL,CAAY,KAAZ;;IACA,IAAI,KAAK,QAAT,EAAmB;MAClB,KAAK,QAAL,CAAc,KAAd;IACA;;IACD,MAAA,CAAA,SAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB;EACA,CANM;EAQP;;;;;AAKG;;;EACI,aAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,QAA3B,EAAsD;IAErD,IAAI,KAAK,GAAG,QAAQ,CAAC,KAArB;;IAEA,IAAI,KAAJ,EAAW;MACV,IAAI,KAAK,CAAC,IAAN,IAAc,SAAlB,EAA6B;QAC5B,IAAI,KAAK,QAAT,EAAmB;UAClB,IAAI,CAAC,KAAK,CAAC,QAAN,CAAe,KAAK,CAAC,MAArB,CAAL,EAAmC;YAClC,KAAK,CAAC,MAAN,GAAe,KAAK,MAAL,CAAY,IAAZ,EAAf;UACA;;UACD,KAAK,CAAC,IAAN,GAAa,KAAK,QAAL,CAAc,IAAd,EAAb;;UACA,IAAI,KAAK,CAAC,QAAN,CAAe,KAAK,CAAC,WAArB,CAAJ,EAAuC;YACtC,KAAK,CAAC,IAAN,CAAW,iBAAX,GAA+B,KAAK,CAAC,WAArC;UACA;;UACD,IAAI,KAAK,CAAC,MAAN,YAAwB,KAA5B,EAAmC;YAClC,KAAK,CAAC,IAAN,CAAW,MAAX,GAAoB,KAAK,CAAC,MAA1B;YACA,KAAK,CAAC,IAAN,CAAW,IAAX,GAAkB,KAAK,CAAC,MAAxB;UACA;QACD,CAZD,MAaK;UACJ,KAAK,CAAC,IAAN,GAAa,KAAK,MAAL,CAAY,IAAZ,EAAb;QACA;MACD,CAjBD,MAkBK;QACJ,KAAK,MAAL,CAAY,WAAZ,IAA2B,KAAK,MAAL,CAAY,IAAvC;MACA;;MAED,IAAI,KAAK,CAAC,MAAN,IAAgB,SAApB,EAA+B;QAC9B,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,IAArB;MACA;IACD,CA9BoD,CAgCrD;;;IACA,MAAA,CAAA,SAAA,CAAM,mBAAN,CAAyB,IAAzB,CAAyB,IAAzB,EAA0B,QAA1B;;IAEA,IAAI,KAAJ,EAAW;MACV,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAAsB,UAAC,GAAD,EAAM,MAAN,EAAY;QACjC,IAAI,MAAM,CAAC,IAAP,IAAe,SAAnB,EAA8B;UAC7B,MAAM,CAAC,IAAP,GAAc,KAAK,CAAC,IAApB;QACA;;QACD,IAAI,MAAM,CAAC,MAAP,IAAiB,SAArB,EAAgC;UAC/B,MAAM,CAAC,MAAP,GAAgB,KAAK,CAAC,MAAtB;QACA;MACD,CAPD;IAQA;;IAED,KAAK,iBAAL,CAAuB,QAAvB;EACA,CA/CM;EAiDP;;;;AAIG;;;EACI,aAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;IACC,MAAA,CAAA,SAAA,CAAM,YAAN,CAAkB,IAAlB,CAAkB,IAAlB;;IACA,IAAI,KAAK,KAAT,EAAgB;MACf,KAAK,KAAL,CAAW,UAAX;IACA;EACD,CALM;EAOP;;;;;AAKG;;;EACO,aAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,SAAxB,EAAsD;IACrD,KAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,SAAS,CAAC,MAAhC,EAAwC,CAAC,GAAG,GAA5C,EAAiD,CAAC,EAAlD,EAAsD;MACrD,IAAI,QAAQ,GAAsB,SAAS,CAAC,CAAD,CAA3C;MAEA,IAAI,KAAK,GAAG,QAAQ,CAAC,KAArB;;MAEA,IAAI,KAAJ,EAAW;QAEV,IAAI,KAAK,CAAC,OAAV,EAAmB;UAClB,KAAK,CAAC,QAAN;QACA;;QAED,IAAI,EAAE,GAAG,KAAK,CAAC,cAAf;;QACA,IAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;UACnB,EAAE,GAAG,CAAL;QACA;;QAED,IAAI,KAAK,CAAC,MAAN,GAAe,EAAE,GAAG,CAApB,GAAwB,CAAC,KAAK,SAAN,GAAkB,CAA9C,EAAiD;UAChD,KAAK,CAAC,CAAN,GAAU,CAAC,KAAK,SAAN,GAAkB,CAAlB,GAAsB,EAAE,GAAG,CAArC;QACA;;QAED,IAAI,SAAS,GAAG,KAAK,YAAL,CAAkB,CAAC,GAAG,CAAtB,EAAyB,SAAzB,CAAhB;QAEA,IAAI,MAAM,GAAW,KAAK,CAAC,MAAN,GAAe,EAApC;;QAEA,IAAI,SAAJ,EAAe;UACd,IAAI,SAAS,CAAC,CAAV,GAAc,MAAlB,EAA0B;YACzB,SAAS,CAAC,CAAV,GAAc,MAAd;UACA;QACD;MACD;IACD;EACD,CAhCS;;EAmCA,aAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,SAAzB,EAAuD;IAEtD,IAAI,WAAW,GAAG,KAAK,SAAL,GAAiB,CAAnC;;IAEA,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAhC,EAAmC,CAAC,IAAI,CAAxC,EAA2C,CAAC,EAA5C,EAAgD;MAC/C,IAAI,QAAQ,GAAsB,SAAS,CAAC,CAAD,CAA3C;MAEA,IAAI,KAAK,GAAG,QAAQ,CAAC,KAArB;;MAEA,IAAI,KAAJ,EAAW;QACV,IAAI,KAAK,CAAC,OAAV,EAAmB;UAClB,KAAK,CAAC,QAAN;QACA;;QAED,IAAI,EAAE,GAAG,KAAK,CAAC,cAAf;;QACA,IAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;UACnB,EAAE,GAAG,CAAL;QACA;;QAED,IAAI,CAAC,IAAI,SAAS,CAAC,MAAV,GAAmB,CAA5B,EAA+B;UAC9B,WAAW,IAAI,EAAE,GAAG,CAApB;QACA;;QAED,IAAI,KAAK,CAAC,MAAN,GAAe,EAAf,GAAoB,WAAxB,EAAqC;UACpC,KAAK,CAAC,CAAN,GAAU,WAAW,GAAG,EAAxB;UACA,WAAW,GAAG,KAAK,CAAC,CAApB;QACA;MACD;IACD;EACD,CA7BS;EA+BV;;;;;;AAMG;;;EACO,aAAA,CAAA,SAAA,CAAA,YAAA,GAAV,UAAuB,KAAvB,EAAsC,SAAtC,EAAoE;IACnE,IAAI,SAAS,CAAC,MAAV,IAAoB,KAAxB,EAA+B;MAC9B,IAAI,YAAY,GAAsB,SAAS,CAAC,KAAD,CAA/C;;MACA,IAAI,YAAJ,EAAkB;QACjB,IAAI,YAAY,CAAC,KAAjB,EAAwB;UACvB,IAAI,YAAY,CAAC,OAAjB,EAA0B;YACzB,OAAO,YAAY,CAAC,KAApB;UACA,CAFD,MAGK;YACJ,OAAO,KAAK,YAAL,CAAkB,KAAK,GAAG,CAA1B,EAA6B,SAA7B,CAAP;UACA;QACD,CAPD,MAQK;UACJ,OAAO,KAAK,YAAL,CAAkB,KAAK,GAAG,CAA1B,EAA6B,SAA7B,CAAP;QACA;MACD;IACD;EACD,CAjBS;;EA2BV,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;IAIjB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;IACA,CATgB;;IARjB;;;;;;;AAOG;SACH,UAAkB,KAAlB,EAAiC;MAChC,KAAK,gBAAL,CAAsB,QAAtB,EAAgC,KAAhC,EAAuC,IAAvC;IACA,CAFgB;oBAAA;;EAAA,CAAjB;EAiBA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;IAInB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,gBAAL,CAAsB,UAAtB,CAAP;IACA,CATkB;;IANnB;;;;;AAKG;SACH,UAAoB,KAApB,EAAqC;MACpC,KAAK,gBAAL,CAAsB,UAAtB,EAAkC,KAAlC,EAAyC,IAAzC;IACA,CAFkB;oBAAA;;EAAA,CAAnB;EAWA;;;;;;;AAOG;;EACI,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,MAA1B,EAA6C,QAA7C,EAAyE;IACxE,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,QAAP,CAAgB,QAAhB,EAAX,EAAuC,UAAC,KAAD,EAAM;MAC5C,IAAI,KAAK,GAAmB,QAAQ,CAAC,KAArC;MAEA,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,IAA9B,GAAqC,KAAK,CAAC,IAA3C;MACA,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,MAA9B,GAAuC,KAAK,CAAC,MAA7C;MACA,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,WAA9B,GAA4C,KAAK,CAAC,WAAlD;MACA,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,aAA9B,GAA8C,KAAK,CAAC,aAApD;MAEA,KAAK,CAAC,IAAN,GAAa,KAAK,CAAC,IAAnB;MACA,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,MAArB;MACA,KAAK,CAAC,WAAN,GAAoB,KAAK,CAAC,WAA1B;MACA,KAAK,CAAC,aAAN,GAAsB,KAAK,CAAC,aAA5B;;MAEA,IAAI,KAAK,CAAC,IAAN,IAAc,SAAlB,EAA6B;QAC5B,KAAK,CAAC,UAAN,GAAmB,IAAnB;MACA;;MAED,IAAI,cAAc,GAAmB,MAAM,CAAC,QAA5C;MACA,cAAc,CAAC,KAAf,GAAuB,KAAK,CAAC,IAA7B;MACA,cAAc,CAAC,SAAf,GAA2B,KAAK,CAAC,IAAjC;MAEA,KAAK,CAAC,WAAN,CAAkB,KAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,iBAAhB,EAAmC,UAAC,EAAD,EAAG;QACvD,IAAI,EAAE,CAAC,QAAH,IAAe,MAAnB,EAA2B;UAE1B,KAAK,CAAC,UAAN,GAAmB,KAAnB;;UAEA,IAAI,CAAC,KAAK,CAAC,QAAX,EAAqB;YACpB,KAAK,CAAC,IAAN,GAAa,KAAK,CAAC,IAAnB;UACA;;UACD,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,IAA9B,GAAqC,KAAK,CAAC,IAA3C;UACA,cAAc,CAAC,KAAf,GAAuB,KAAK,CAAC,IAA7B;UACA,cAAc,CAAC,SAAf,GAA2B,KAAK,CAAC,IAAjC;QACA;;QAED,IAAI,EAAE,CAAC,QAAH,IAAe,QAAnB,EAA6B;UAC5B,IAAI,CAAC,KAAK,CAAC,QAAX,EAAqB;YACpB,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,MAArB;UACA;;UACD,KAAK,CAAC,YAAN,CAAmB,UAAnB,CAA8B,MAA9B,GAAuC,KAAK,CAAC,MAA7C;QACA;MACD,CAnBiB,EAmBf,SAnBe,EAmBJ,KAnBI,CAAlB;IAoBA,CAzCD;EA0CA,CA3CM;EA6CP;;;;;AAKG;;;EACO,aAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,UAA2B,KAA3B,EAA2F;IAA3F,IAAA,KAAA,GAAA,IAAA;;IACC,IAAI,KAAK,GAAmB,KAAK,CAAC,MAAlC;IACA,IAAI,QAAQ,GAAyC,KAAK,CAAC,QAA3D;IACA,KAAK,CAAC,IAAN,CAAW,QAAQ,CAAC,OAAT,CAAiB,QAAjB,EAAX,EAAwC,UAAC,CAAD,EAAE;MACzC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAD,CAAb;;MACA,KAAI,CAAC,cAAL,CAAoB,KAApB;IACA,CAHD;EAIA,CAPS;EASV;;;;;AAKG;;;EACO,aAAA,CAAA,SAAA,CAAA,eAAA,GAAV,UAA0B,KAA1B,EAA0F,CAEzF,CAFS;EAIV;;;;AAIG;;;EACI,aAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,MAAhB,EAA4B;IAC3B,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,MAAf;;IACA,KAAK,MAAL,CAAY,QAAZ,CAAqB,QAArB,CAA8B,MAAM,CAAC,MAAP,CAAc,QAA5C;IACA,KAAK,MAAL,CAAY,QAAZ,CAAqB,QAArB,CAA8B,MAAM,CAAC,MAAP,CAAc,QAA5C;IACA,KAAK,KAAL,CAAW,QAAX,CAAoB,QAApB,CAA6B,MAAM,CAAC,KAAP,CAAa,QAA1C;IACA,KAAK,MAAL,GAAc,MAAM,CAAC,MAAP,CAAc,KAAd,EAAd;EACA,CANM;;EAsBP,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;IAItB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,gBAAL,CAAsB,aAAtB,CAAP;IACA,CATqB;;IAdtB;;;;;;;;;;;;;AAaG;SACH,UAAuB,KAAvB,EAAqC;MACpC,KAAK,cAAL,CAAoB,KAApB;IACA,CAFqB;oBAAA;;EAAA,CAAtB;EAWA;;AAEG;;EACO,aAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,KAAzB,EAAuC;IACtC,KAAK,gBAAL,CAAsB,aAAtB,EAAqC,KAArC,EAA4C,IAA5C;EACA,CAFS;;EAWV,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,kBAAX,EAA2B;IAI3B;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,gBAAL,CAAsB,kBAAtB,CAAP;IACA,CAT0B;;IAP3B;;;;;;AAMG;SACH,UAA4B,KAA5B,EAA0C;MACzC,KAAK,gBAAL,CAAsB,kBAAtB,EAA0C,KAA1C,EAAiD,IAAjD;IACA,CAF0B;oBAAA;;EAAA,CAA3B;EAWA;;;;;AAKG;;EACI,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,QAAzB,EAAqD;IACpD,IAAI,QAAJ,EAAc;MACb,IAAI,cAAc,GAAG,QAAQ,CAAC,cAA9B;MACA,IAAI,cAAc,GAAG,QAAQ,CAAC,cAA9B;;MAEA,IAAI,cAAc,IAAI,cAAtB,EAAsC;QAErC,IAAI,cAAJ,EAAoB;UACnB,IAAI,cAAc,CAAC,SAAnB,EAA8B;YAC7B,cAAc,CAAC,KAAf,CAAqB,IAArB,GAA4B,cAAc,CAAC,SAA3C;UACA;;UACD,IAAI,cAAc,CAAC,aAAnB,EAAkC;YACjC,cAAc,CAAC,KAAf,CAAqB,IAArB,GAA4B,cAAc,CAAC,aAA3C;UACA;;UACD,IAAI,cAAc,CAAC,SAAnB,EAA8B;YAC7B,cAAc,CAAC,UAAf,CAA0B,IAA1B,GAAiC,cAAc,CAAC,SAAhD;UACA;;UACD,IAAI,cAAc,CAAC,aAAnB,EAAkC;YACjC,cAAc,CAAC,UAAf,CAA0B,IAA1B,GAAiC,cAAc,CAAC,aAAhD;UACA;QACD;MACD;IACD;EACD,CAvBM;;EAwBR,OAAA,aAAA;AAAC,CAtrBD,CAAmC,MAAnC,CAAA;;;AAwrBA;;;;;AAKG;;AACH,QAAQ,CAAC,iBAAT,CAA2B,eAA3B,IAA8C,aAA9C;AACA,QAAQ,CAAC,iBAAT,CAA2B,uBAA3B,IAAsD,qBAAtD;AAEA;;AAEG;;AAEH;;AAEG;;AACH,YAAY,CAAC,IAAb,CAAkB;EACjB,QAAQ,EAAE,qBAAqB,CAAC,OADf;EAEjB,KAAK,EAAE,UAAS,MAAT,EAAiB,OAAjB,EAAwB;IAC9B,IAAI,MAAM,YAAY,aAAtB,EAAqC;MACpC,IAAI,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,OAArB,CAAZ;MAEA,IAAI,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,QAAd,CAAuB,MAAvB,CAA8B,MAA9B,CAAqC,OAArC,CAAjB;MACA,UAAU,CAAC,UAAX,CAAsB,QAAtB,GAAiC,IAAjC;MAEA,IAAI,SAAS,GAAG,MAAM,CAAC,KAAP,CAAa,QAAb,CAAsB,MAAtB,CAA6B,MAA7B,CAAoC,OAApC,CAAhB;MACA,SAAS,CAAC,UAAV,CAAqB,QAArB,GAAgC,IAAhC;MACA,OAAO,KAAP;IACA;;IAED,OAAO,IAAP;EACA;AAfgB,CAAlB","sourcesContent":["/**\r\n * Defines Percent Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { PercentChart } from \"../types/PercentChart\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, 0, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tif (!noChangeValues) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): this[\"_tick\"] {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet tick = this.component.ticks.create();\r\n\t\t\tthis._tick = tick;\r\n\t\t\tthis.addSprite(tick);\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\ttick.parent = this.component.ticksContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.ticks.removeValue(tick);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\r\n\t\t\ttick.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): this[\"_label\"] {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._label = label;\r\n\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.component.labelsContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tlabel.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet slice = component.slices.create();\r\n\t\t\tthis.addSprite(slice);\r\n\r\n\t\t\tthis._slice = slice;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tslice.parent = component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tcomponent.slices.removeValue(slice);\r\n\t\t\t}));\r\n\r\n\r\n\t\t\tslice.visible = this.visible;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (component.itemsFocusable()) {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"menu\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"list\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (slice.focusable) {\r\n\t\t\t\tslice.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t\tif (slice.hoverable) {\r\n\t\t\t\tslice.events.on(\"over\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"out\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t */\r\n\thiddenInLegend?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesProperties extends ISeriesProperties {\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Pattern set to apply to fills.\r\n\t * \r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\talignLabels?: boolean;\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t */\r\n\tignoreZeroValues?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentSeriesAdapters extends ISeriesAdapters, IPercentSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\r\nexport class PercentSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the slice elements for the series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * Defines type of the tick elements for the series.\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * Defines type of the label elements for the series.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: PercentChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPercentSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PercentSeriesDataItem;\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _slices: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tick\"]>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_label\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PercentSeries\";\r\n\r\n\t\tthis._addAllDataItems = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.alignLabels = false;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a slice element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Sprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a tick element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new Tick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sreates label element.\r\n\t *\r\n\t * @return label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new Label();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the slices. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"stroke\": \"#fff\",\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Slices\r\n\t */\r\n\tpublic get slices(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._slices) {\r\n\t\t\tlet slice = this.createSlice();\r\n\r\n\t\t\tslice.applyOnClones = true;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tthis.initSlice(slice);\r\n\r\n\t\t\tthis._slices = new ListTemplate(slice);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._slices));\r\n\t\t}\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of tick elements for the series. Ticks connect slice to its label.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"ticks\": {\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Ticks\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tick\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\tthis.initTick(tick);\r\n\r\n\t\t\tthis._ticks = new ListTemplate(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice label elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the labels. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"stroke\": \"#c00\",\r\n\t *       \"fontSize\": 20\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Labels\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_label\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tthis.initLabel(label);\r\n\r\n\t\t\tthis._labels = new ListTemplate(label);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PercentSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param sliceType  Type of the slice element\r\n\t * @return Slice\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\r\n\t}\r\n\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\tprotected initTick(label: this[\"_tick\"]) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\tthis.colors.reset();\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.reset();\r\n\t\t}\r\n\t\tsuper.validateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tif (slice) {\r\n\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(slice.stroke)) {\r\n\t\t\t\t\t\tslice.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tslice.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(slice.fillOpacity)) {\r\n\t\t\t\t\t\tslice.fill.backgroundOpacity = slice.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (slice.stroke instanceof Color) {\r\n\t\t\t\t\t\tslice.fill.stroke = slice.stroke;\r\n\t\t\t\t\t\tslice.fill.fill = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.colors.currentStep += this.colors.step;\r\n\t\t\t}\r\n\r\n\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\tslice.stroke = slice.fill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (slice) {\r\n\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\tif (bullet.fill == undefined) {\r\n\t\t\t\t\tbullet.fill = slice.fill;\r\n\t\t\t\t}\r\n\t\t\t\tif (bullet.stroke == undefined) {\r\n\t\t\t\t\tbullet.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.updateLegendValue(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i = 0, len = dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY - lh / 2 < -this.maxHeight / 2) {\r\n\t\t\t\t\tlabel.y = -this.maxHeight / 2 + lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet nextLabel = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\tlet bottom: number = label.pixelY + lh;\r\n\r\n\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected arrangeLabels2(dataItems: this[\"_dataItem\"][]): void {\r\n\r\n\t\tlet previousTop = this.maxHeight / 2;\r\n\r\n\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i == dataItems.length - 1) {\r\n\t\t\t\t\tpreviousTop += lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY + lh > previousTop) {\r\n\t\t\t\t\tlabel.y = previousTop - lh;\r\n\t\t\t\t\tpreviousTop = label.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param index      Current index\r\n\t * @param dataItems  Data items\r\n\t * @return Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): this[\"_label\"] {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\tif (nextDataItem.visible) {\r\n\t\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker    Container\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: this[\"_slice\"] = dataItem.slice;\r\n\r\n\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\tchild.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tchild.fill = slice.fill;\r\n\t\t\tchild.stroke = slice.stroke;\r\n\t\t\tchild.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tif (child.fill == undefined) {\r\n\t\t\t\tchild.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\r\n\t\t\tchild.addDisposer(slice.events.on(\"propertychanged\", (ev) => {\r\n\t\t\t\tif (ev.property == \"fill\") {\r\n\r\n\t\t\t\t\tchild.__disabled = false;\r\n\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.fill = slice.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"stroke\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.stroke = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: this[\"_slice\"] = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PercentSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.colors = source.colors.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setAlignLabels(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t * @param  value  Ignore zero values\r\n\t */\r\n\tpublic set ignoreZeroValues(value: boolean) {\r\n\t\tthis.setPropertyValue(\"ignoreZeroValues\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore zero values\r\n\t */\r\n\tpublic get ignoreZeroValues(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreZeroValues\");\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tif (dataItem) {\r\n\t\t\tlet legendDataItem = dataItem.legendDataItem;\r\n\t\t\tlet legendSettings = dataItem.legendSettings;\r\n\r\n\t\t\tif (legendDataItem && legendSettings) {\r\n\r\n\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\r\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable labels and ticks.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof PercentSeries) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\r\n\t\t\tlet labelState = target.labels.template.states.create(stateId);\r\n\t\t\tlabelState.properties.disabled = true;\r\n\r\n\t\t\tlet tickState = target.ticks.template.states.create(stateId);\r\n\t\t\ttickState.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}