{"ast":null,"code":"import { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      } else if (args === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}","map":{"version":3,"names":["maxArgumentCount","factory","name","dependencies","createMap","_ref","typed","_map","MatrixFunction","x","callback","map","array","args","recurse","value","index","Array","isArray","child","i","concat"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/ReactMumer-main/node_modules/mathjs/lib/esm/function/matrix/map.js"],"sourcesContent":["import { maxArgumentCount } from '../../utils/function.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed\n  } = _ref;\n\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      } else if (args === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,yBAAjC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;EAC1E,IAAI;IACFC;EADE,IAEAD,IAFJ;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOC,KAAK,CAACJ,IAAD,EAAO;IACjB,mBAAmBK,IADF;IAEjB,oBAAoB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,QAA3B,EAAqC;MACvD,OAAOD,CAAC,CAACE,GAAF,CAAMD,QAAN,CAAP;IACD;EAJgB,CAAP,CAAZ;AAMD,CAnC4C,CAAtC;AAoCP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASH,IAAT,CAAcK,KAAd,EAAqBF,QAArB,EAA+B;EAC7B;EACA,IAAIG,IAAI,GAAGb,gBAAgB,CAACU,QAAD,CAA3B;;EAEA,IAAII,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;IAC3C,IAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;MACxB,OAAOA,KAAK,CAACJ,GAAN,CAAU,UAAUQ,KAAV,EAAiBC,CAAjB,EAAoB;QACnC;QACA,OAAON,OAAO,CAACK,KAAD,EAAQH,KAAK,CAACK,MAAN,CAAaD,CAAb,CAAR,CAAd;MACD,CAHM,CAAP;IAID,CALD,MAKO;MACL;MACA,IAAIP,IAAI,KAAK,CAAb,EAAgB;QACd,OAAOH,QAAQ,CAACK,KAAD,CAAf;MACD,CAFD,MAEO,IAAIF,IAAI,KAAK,CAAb,EAAgB;QACrB,OAAOH,QAAQ,CAACK,KAAD,EAAQC,KAAR,CAAf;MACD,CAFM,MAEA;QACL;QACA,OAAON,QAAQ,CAACK,KAAD,EAAQC,KAAR,EAAeJ,KAAf,CAAf;MACD;IACF;EACF,CAjBD;;EAmBA,OAAOE,OAAO,CAACF,KAAD,EAAQ,EAAR,CAAd;AACD"},"metadata":{},"sourceType":"module"}