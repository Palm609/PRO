{"ast":null,"code":"/**\r\n * Base functionality\r\n*/\nimport { __extends } from \"tslib\";\nimport { List, ListTemplate } from \"./utils/List\";\nimport { OrderedListTemplate, SortedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\nimport { Disposer } from \"./utils/Disposer\";\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Color, color } from \"./utils/Color\";\nimport { Percent, percent } from \"./utils/Percent\";\nimport { registry } from \"./Registry\";\nimport { cache } from \"./utils/Cache\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\"; //import * as $debug from \"./utils/Debug\";\n\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\n\nvar BaseObject =\n/** @class */\nfunction () {\n  //protected _classes: { [index: string]: any } = {};\n\n  /**\r\n   * Constructor\r\n   * * Sets class name\r\n   */\n  function BaseObject() {\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n    this._disposed = false;\n    /**\r\n     * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n     */\n\n    this._disposers = [];\n    this.className = \"BaseObject\"; //this.debug();\n  }\n\n  BaseObject.prototype.debug = function () {//$debug.debug(this);\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"uid\", {\n    /**\r\n     * Returns object's internal unique ID.\r\n     *\r\n     * @return Unique ID\r\n     */\n    get: function () {\n      if (!this._uid) {\n        this._uid = registry.getUniqueId();\n        registry.map.setKey(this._uid, this);\n      }\n\n      return this._uid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"id\", {\n    /**\r\n     * @return Id\r\n     */\n    get: function () {\n      return this._id;\n    },\n\n    /**\r\n     * Sets the user-defined id of the element.\r\n     *\r\n     * @param value Id\r\n     */\n    set: function (value) {\n      //registry.map.setKey(value, this); // registry.map only stores by uid\n      this._id = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"map\", {\n    /**\r\n     * Returns a universal collection for mapping ids with objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._map) {\n        this._map = new Dictionary();\n      }\n\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"delayedMap\", {\n    /**\r\n     * Returns mapping for objects referenced by id in JSON config that are not yet\r\n     * available at processing time.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Logs an id and property of the target element that is not yet available\r\n   * for later assignment.\r\n   *\r\n   * @ignore\r\n   * @param  property  Property to set\r\n   * @param  id        ID of the target element\r\n   */\n\n  BaseObject.prototype.addDelayedMap = function (property, id) {\n    var map = this.delayedMap;\n\n    if (!map.hasKey(id)) {\n      map.setKey(id, []);\n    }\n\n    var list = map.getKey(id);\n    list.push({\n      property: property,\n      target: this\n    });\n  };\n  /**\r\n   * Processes delayed JSON config items.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  BaseObject.prototype.processDelayedMap = function () {\n    var _this = this;\n\n    this.delayedMap.each(function (id, list) {\n      if (_this.map.hasKey(id)) {\n        var target_1 = _this.map.getKey(id);\n\n        $array.each(list, function (item) {\n          item.target[item.property] = target_1;\n        });\n\n        _this.delayedMap.removeKey(id);\n      }\n    });\n  };\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  BaseObject.prototype.applyTheme = function () {\n    var _this = this; // TODO is this needed ?\n\n\n    if (registry) {\n      var themes = this.getCurrentThemes(); // TODO is this needed ?\n\n      if (themes) {\n        $array.each(themes, function (theme, index) {\n          theme(_this);\n        });\n      }\n    }\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"themes\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return An array of themes\r\n     */\n    get: function () {\n      return this._themes;\n    },\n\n    /**\r\n     * A list of themes to be used for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value An array of themes\r\n     */\n    set: function (value) {\n      this._themes = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a list of themes that should be applied to this element. It could\r\n   * either be a list of themes set explicitly on this element, or system-wide.\r\n   *\r\n   * @return List of themes\r\n   */\n\n  BaseObject.prototype.getCurrentThemes = function () {\n    return this.themes || registry.themes;\n  };\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n\n\n  BaseObject.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  BaseObject.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._disposers;\n      this._disposers = null;\n\n      while (a.length !== 0) {\n        var disposer = a.shift();\n        disposer.dispose();\n      } // Clear cache\n\n\n      this.clearCache(); // remove from clones list\n\n      if (this.clonedFrom) {\n        this.clonedFrom.clones.removeValue(this);\n      }\n\n      var uid = this._uid;\n\n      if (uid != null) {\n        registry.map.removeKey(uid);\n      }\n    }\n  };\n  /**\r\n   * Adds an IDisposer, which will be disposed when this object is disposed.\r\n   *\r\n   * @param target Object to dispose\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  BaseObject.prototype.addDisposer = function (target) {\n    this._disposers.push(target);\n  };\n  /**\r\n   * Disposes disposable object and removes it from `_disposers`.\r\n   *\r\n   * @param target Object to dispose\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  BaseObject.prototype.removeDispose = function (target) {\n    //if(target){\n    if (!this._disposed) {\n      var index = $array.indexOf(this._disposers, target);\n\n      if (index > -1) {\n        this._disposers.splice(index, 1);\n      }\n    }\n\n    target.dispose(); //}\n  };\n  /**\r\n   * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n   *\r\n   * @param cloneId  An id to use for clone (if not set a unique id will be generated)\r\n   * @returns Clone\r\n   */\n\n\n  BaseObject.prototype.clone = function (cloneId) {\n    if (!cloneId) {\n      cloneId = \"clone-\" + registry.getUniqueId();\n    }\n\n    var newObject = new this.constructor();\n    newObject.cloneId = cloneId;\n    newObject.copyFrom(this); // add to clones list\n    // this.clones.push(newObject); // moved this to copyFrom\n\n    return newObject;\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"clones\", {\n    /**\r\n     * Returns a collection of object's clones.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Clones\r\n     */\n    get: function () {\n      if (!this._clones) {\n        this._clones = new List();\n      }\n\n      return this._clones;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from different element.\r\n   *\r\n   * @param object Source element\r\n   */\n\n  BaseObject.prototype.copyFrom = function (object) {\n    object.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\n\n    this.clonedFrom = object;\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"className\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this._className;\n    },\n\n    /**\r\n     * Element's class name. (a class that was used to instantiate the element)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Class name\r\n     */\n    set: function (value) {\n      this._className = value;\n      /*if (registry) {\r\n          registry.registeredClasses[value] = typeof this;\r\n      }*/\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Caches value in object's cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value\r\n   * @param ttl    TTL in seconds\r\n   */\n\n  BaseObject.prototype.setCache = function (key, value, ttl) {\n    cache.set(this.uid, key, value, ttl);\n  };\n  /**\r\n   * Retrieves cached value.\r\n   *\r\n   * If optional second padarameter is specified, it will return that value\r\n   * if cache is not available or is expired.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value to return if cache is not available\r\n   * @return Value\r\n   */\n\n\n  BaseObject.prototype.getCache = function (key, value) {\n    if (value === void 0) {\n      value = undefined;\n    }\n\n    return cache.get(this.uid, key, value);\n  };\n  /**\r\n   * Clears object's local cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  BaseObject.prototype.clearCache = function () {\n    cache.clear(this.uid);\n  };\n  /**\r\n   * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n   * timeouts created by the object will be cleared when object itself is\r\n   * disposed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fn     Callback function\r\n   * @param delay  Timeout (ms)\r\n   * @return Disposer for timeout\r\n   */\n\n\n  BaseObject.prototype.setTimeout = function (fn, delay) {\n    var _this = this;\n\n    var id = setTimeout(function () {\n      _this.removeDispose(disposer);\n\n      fn();\n    }, delay);\n    var disposer = new Disposer(function () {\n      clearTimeout(id);\n    });\n\n    this._disposers.push(disposer);\n\n    return disposer;\n  };\n  /**\r\n   * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n   * timeouts created by the object will be cleared when object itself is\r\n   * disposed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fn     Callback function\r\n   * @param delay  Timeout (ms)\r\n   * @return Disposer for timeout\r\n   */\n\n\n  BaseObject.prototype.setInterval = function (fn, delay) {\n    var _this = this;\n\n    var id = setInterval(function () {\n      _this.removeDispose(disposer);\n\n      fn();\n    }, delay);\n    var disposer = new Disposer(function () {\n      clearTimeout(id);\n    });\n\n    this._disposers.push(disposer);\n\n    return disposer;\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"config\", {\n    /**\r\n     * ==========================================================================\r\n     * JSON-BASED CONFIG PROCESSING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Use this property to set JSON-based config. When set, triggers processing\r\n     * routine, which will go through all properties, and try to apply values,\r\n     * create instances, etc.\r\n     *\r\n     * Use this with caution, as it is a time-consuming process. It's used for\r\n     * initialchart setup only, not routine operations.\r\n     *\r\n     * @param json JSON config\r\n     */\n    set: function (config) {\n      try {\n        this.processConfig(config);\n      } catch (e) {\n        /*if (this instanceof Sprite) {\r\n            this.raiseCriticalError(e);\r\n        }*/\n        this.raiseCriticalError(e);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes the JSON config.\r\n   *\r\n   * @param json  JSON config\r\n   * @ignore Exclude from docs\r\n   */\n\n  BaseObject.prototype.processConfig = function (config) {\n    var _this = this;\n\n    if (!config) {\n      return;\n    } // Get target\n\n\n    var target = this; // Iterate through all of the items\n\n    $object.eachOrdered(config, function (configKey, value) {\n      var configValue = value; // Is this a callback?\n\n      if (configKey == \"callback\" && typeof value == \"function\") {\n        value.call(target);\n      } // Check if there's a property in target\n\n\n      if (_this.hasProperty(configKey)) {\n        var item_1; // Do we have instructions to create an object?\n        // We create a new object if \"type\" key is set, but only if the\n        // target object is of different type.\n\n        if ($type.isObject(configValue) && $type.hasValue(configValue[\"type\"]) && (!$type.isObject(target[configKey]) || !$type.hasValue(target[configKey].className) || configValue[\"forceCreate\"] || target[configKey].className != configValue[\"type\"]) && !_this.asIs(configKey)) {\n          item_1 = _this.createClassInstance(configValue[\"type\"]); // Create new instance\n\n          if (item_1) {\n            target[configKey] = item_1;\n          } else {\n            item_1 = target[configKey];\n          }\n        } else {\n          // Get item from the object\n          item_1 = target[configKey];\n        }\n        /**\r\n         * It is...\r\n         * --------------------------------------------------------------------\r\n         */\n\n\n        if (item_1 instanceof Adapter) {\n          // ... an Adapter, try to add handlers to it\n          // ------------------------------------------------------------------\n          _this.processAdapters(item_1, configValue);\n        } else if (item_1 instanceof EventDispatcher) {\n          // ... an EventDispatcher, try to add handlers to it\n          // ------------------------------------------------------------------\n          _this.processEvents(item_1, configValue);\n        } else if (configKey == \"locale\" && $type.isString(configValue)) {\n          // ... a locale specified as string, e.g. \"fr_FR\"\n          // ------------------------------------------------------------------\n          if (window[\"am4lang_\" + configValue]) {\n            target[configKey] = window[\"am4lang_\" + configValue];\n          }\n        } else if (configKey == \"parent\" && $type.isString(configValue)) {\n          // ... a parent referred via its it\n          // ------------------------------------------------------------------\n          var parent_1 = _this.map.getKey(configValue);\n\n          if (parent_1) {\n            target[configKey] = parent_1;\n          } else {\n            _this.addDelayedMap(\"parent\", configValue);\n          }\n        } else if (_this.asIs(configKey)) {\n          // ... a special field, just set it to new value\n          // ------------------------------------------------------------------\n          // (no need to add each indvidual item)\n          target[configKey] = configValue;\n        } else if (_this.asFunction(configKey) && $type.isString(configValue)) {\n          // ... a field indicating function name to look for in registry\n          // ------------------------------------------------------------------\n          if ($type.hasValue(registry.registeredClasses[configValue])) {\n            target[configKey] = registry.registeredClasses[configValue];\n          } else {\n            throw Error(\"Invalid easing function: \" + configValue);\n          }\n        } else if (configValue instanceof BaseObject) {\n          // ... a BaseObject object, we just going to use it as it is\n          // ------------------------------------------------------------------\n          target[configKey] = configValue;\n        } else if (item_1 instanceof BaseObject) {\n          // ... another child BaseObject\n          // ------------------------------------------------------------------\n          // Let's just pass in config part in and let itself deal with it\n          item_1.config = configValue;\n        } else if (item_1 instanceof ListTemplate || item_1 instanceof OrderedListTemplate || item_1 instanceof SortedListTemplate) {\n          // ... a list with template\n          // ------------------------------------------------------------------\n          // Let's see what we can do with it\n          if ($type.isArray(configValue)) {\n            // It's an array.\n            // Create a list item for entry, or try to apply properties to an\n            // existing entry if possible and it is present.\n            if (item_1 instanceof ListTemplate) {\n              _this.processListTemplate(configValue, item_1);\n            } else {\n              _this.processOrderedTemplate(configValue, item_1);\n            }\n          } else if ($type.isObject(configValue)) {\n            // It's a single oject.\n            // Treat it as a template.\n            if (configValue instanceof BaseObject) {\n              // Item is already a BaseObject, no need to process it further\n              item_1.template = configValue;\n            } else {\n              // Now let's find out if the whole object if a template, or we\n              // need to get it from `template` key\n              var templateValue = void 0;\n\n              if ($type.hasValue(configValue.template)) {\n                templateValue = configValue.template;\n              } else {\n                templateValue = configValue;\n              }\n\n              if (item_1.template instanceof BaseObject) {\n                // Template is a BaseObject so we will just let its config\n                // deal with the configuration\n                item_1.template.config = templateValue;\n              } else {\n                $object.each(templateValue, function (entryKey, entryValue) {\n                  var listItem = item_1.template[entryKey];\n\n                  if (listItem instanceof Adapter) {\n                    _this.processAdapters(listItem, entryValue);\n                  } else if (listItem instanceof EventDispatcher) {\n                    _this.processEvents(listItem, entryValue);\n                  } else if (listItem instanceof DictionaryTemplate) {\n                    _this.processDictionaryTemplate(listItem, entryValue);\n                  } else if (item_1.template[entryKey] instanceof BaseObject) {\n                    // Template is a BaseObject. Let it deal with its own config.\n                    item_1.template[entryKey].config = entryValue;\n                  } else if ($type.isObject(entryValue) && $type.hasValue(entryValue[\"type\"])) {\n                    listItem = _this.createClassInstance(entryValue[\"type\"]);\n\n                    if (listItem) {\n                      if (listItem instanceof BaseObject) {\n                        listItem.config = entryValue;\n                      }\n\n                      item_1.template[entryKey] = listItem;\n                    } else {\n                      item_1.template[entryKey] = entryValue;\n                    }\n                  } else if (listItem instanceof List) {\n                    // It's List, process it\n                    _this.processList(entryValue, listItem);\n                  } else {\n                    // Aything else. Just assing and be done with it.\n                    item_1.template[entryKey] = _this.maybeColorOrPercent(entryValue);\n                  }\n                });\n              } // Check maybe there are `values` to insert\n\n\n              if ($type.hasValue(configValue.values)) {\n                if (item_1 instanceof ListTemplate) {\n                  _this.processListTemplate(configValue.values, item_1);\n                } else {\n                  _this.processOrderedTemplate(configValue.values, item_1);\n                }\n              }\n            }\n          } else {// Something else?\n            // Not sure what to do with it on a list - ignore\n          }\n        } else if (item_1 instanceof List) {\n          // ... a list\n          // ------------------------------------------------------------------\n          if (configKey == \"children\") {\n            _this.processList(configValue, item_1, _this);\n          } else {\n            _this.processList(configValue, item_1);\n          }\n        } else if (item_1 instanceof DictionaryTemplate) {\n          // ... a dictionary with template\n          // ------------------------------------------------------------------\n          _this.processDictionaryTemplate(item_1, configValue);\n        } else if (item_1 instanceof Dictionary) {\n          // ... a dictionary\n          // ------------------------------------------------------------------\n          _this.processDictionary(item_1, configValue);\n        } else if (item_1 instanceof Color || item_1 instanceof Percent) {\n          // ... it's a Color or Percent\n          // ------------------------------------------------------------------\n          target[configKey] = _this.maybeColorOrPercent(configValue);\n        } else if ($type.isObject(item_1) && $type.isObject(configValue)) {\n          // ... a regular object\n          // ------------------------------------------------------------------\n          $object.copyAllProperties(configValue, item_1);\n        } else {\n          // ... something else - probably a simple property or object\n          // ------------------------------------------------------------------\n          // Maybe convert to `Percent` or `Color`?\n          configValue = _this.maybeColorOrPercent(configValue); // Assign\n\n          target[configKey] = configValue;\n        }\n      } else if (!_this.isReserved(configKey)) {\n        // Doesn't have property set. But we're going to assume JSON config\n        // creator knows what he/she is doing and set it anyway.\n        target[configKey] = configValue;\n      }\n    }, this.configOrder); // Any errors?\n\n    if (this.processingErrors.length) {\n      var errors = this.processingErrors.join(\"\\n\");\n      this._processingErrors = [];\n      throw Error(errors);\n    }\n  };\n  /**\r\n   * Tries to detect if value is color or percent and converts to proper object\r\n   * if necessary.\r\n   *\r\n   * Returns the same source value if no color/percent detected\r\n   *\r\n   * @param value  Source value\r\n   * @return Converted value\r\n   */\n\n\n  BaseObject.prototype.maybeColorOrPercent = function (value) {\n    if ($type.isString(value)) {\n      if (value.match(/^[\\-]?[0-9.]+\\%$/)) {\n        return percent($type.toNumber(value));\n      } else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\n        return color(value);\n      }\n    }\n\n    return value;\n  };\n\n  BaseObject.prototype.processAdapters = function (item, config) {\n    var _this = this;\n\n    if ($type.isArray(config)) {\n      $array.each(config, function (entry, index) {\n        item.add(entry.key, entry.callback, entry.priority || 0, _this);\n      });\n    } else if ($type.isObject(config)) {\n      $object.each(config, function (key, entry) {\n        if (!item.has(key, entry)) {\n          item.add(key, entry);\n        }\n      });\n    }\n  };\n\n  BaseObject.prototype.processEvents = function (item, config) {\n    var _this = this;\n\n    if ($type.isArray(config)) {\n      $array.each(config, function (entry, index) {\n        item.on(entry.type, entry.callback, _this);\n      });\n    } else if ($type.isObject(config)) {\n      $object.each(config, function (key, entry) {\n        if (!item.has(key, entry)) {\n          item.on(key, entry);\n        }\n      });\n    }\n  };\n  /**\r\n   * Processes JSON config for a [[DictionaryTemplate]] item.\r\n   *\r\n   * @todo Description\r\n   * @param item    Item\r\n   * @param config  Config\r\n   */\n\n\n  BaseObject.prototype.processDictionaryTemplate = function (item, config) {\n    // We can only process object\n    // Not sure what to do with other types - ignore\n    if ($type.isObject(config)) {\n      // Create an entry for each item, or override properties for\n      // existing one.\n      $object.each(config, function (entryKey, entryValue) {\n        var listItem; // Get existing one, or create a new one\n\n        if (entryKey == \"template\") {\n          listItem = item.template;\n        } else if (item.hasKey(entryKey)) {\n          listItem = item.getKey(entryKey);\n        } else {\n          listItem = item.create(entryKey);\n        } // Set data\n\n\n        if (listItem instanceof BaseObject) {\n          listItem.config = entryValue;\n        } else if ($type.isObject(listItem) && $type.isObject(entryValue)) {\n          $object.copyAllProperties(entryValue, listItem);\n        } else {\n          listItem.setKey(entryKey, entryValue);\n        }\n      });\n    }\n  };\n  /**\r\n   * Processes JSON config for a [[Dictionary]] item.\r\n   *\r\n   * @todo Description\r\n   * @param item    Item\r\n   * @param config  Config\r\n   */\n\n\n  BaseObject.prototype.processDictionary = function (item, config) {\n    // We can only process object\n    // Not sure what to do with other types - ignore\n    if ($type.isObject(config)) {\n      // Create an entry for each item, or override properties for\n      // existing one.\n      // @todo support for non-basic types\n      $object.each(config, function (entryKey, entryValue) {\n        item.setKey(entryKey, entryValue);\n      });\n    }\n  };\n  /**\r\n   * Processes [[ListTemplate]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n\n\n  BaseObject.prototype.processListTemplate = function (configValue, item) {\n    var _this = this;\n\n    $array.each(configValue, function (entry, index) {\n      var type = _this.getConfigEntryType(entry);\n\n      var listItem;\n\n      if (item.hasIndex(index) && !entry[\"forceCreate\"]) {\n        listItem = item.getIndex(index);\n      } else if (entry instanceof BaseObject) {\n        // Item is already a BaseObject, no need to process it further\n        item.push(entry);\n        return;\n      } else if (type) {\n        listItem = item.create(type);\n      } else {\n        listItem = item.create();\n      }\n\n      if (entry === listItem) {// It's already the same item, do nothing\n      } else {\n        if ($type.isObject(entry)) {\n          // If the list item is BaseObject, we just need to let it\n          // deal if its own config\n          if (listItem instanceof BaseObject) {\n            listItem.config = entry;\n          } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n            $object.copyAllProperties(entry, listItem);\n          } else {\n            item.setIndex(item.indexOf(listItem), entry);\n          }\n        }\n      }\n    }); // Truncate the list if it contains less items than the config\n    // array\n\n    while (configValue.length > item.length) {\n      item.pop();\n    }\n  };\n  /**\r\n   * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n\n\n  BaseObject.prototype.processOrderedTemplate = function (configValue, item) {\n    var _this = this;\n\n    $array.each(configValue, function (entry, index) {\n      var type = _this.getConfigEntryType(entry);\n\n      var listItem;\n\n      if (type) {\n        listItem = item.create(type);\n      } else {\n        listItem = item.create();\n      }\n\n      if ($type.isObject(entry)) {\n        // If the list item is BaseObject, we just need to let it\n        // deal if its own config\n        if (listItem instanceof BaseObject) {\n          listItem.config = entry;\n        } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n          $object.copyAllProperties(entry, listItem);\n        } else {\n          item.insert(entry);\n        }\n      }\n    });\n  };\n  /**\r\n   * Processes [[List]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n\n\n  BaseObject.prototype.processList = function (configValue, item, parent) {\n    var _this = this; // Convert to array if necessary\n\n\n    if (!$type.isArray(configValue)) {\n      configValue = [configValue];\n    } // It's an array\n    // Create a list item for entry\n\n\n    var itemCount = item.length;\n    $array.each(configValue, function (entry, index) {\n      if ($type.isObject(entry)) {\n        // An object.\n        //\n        // Let's see if we can instantiate a class out of it, or we need\n        // to push it into list as it is.\n        //\n        // If there are items already at the specified index in the list,\n        // apply properties rather than create a new one.\n        var listItem = void 0;\n\n        if (index < itemCount && !entry[\"forceCreate\"]) {\n          listItem = item.getIndex(index);\n        } else if (entry instanceof BaseObject) {\n          // Item is already a BaseObject, no need to process it further\n          item.push(entry);\n          return;\n        } else {\n          listItem = _this.createEntryInstance(entry);\n\n          if (parent) {\n            listItem.parent = parent;\n          } else {\n            item.push(listItem);\n          }\n        } // If the list item is BaseObject, we just need to let it\n        // deal if its own config\n\n\n        if (listItem instanceof BaseObject) {\n          listItem.config = entry;\n        } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n          $object.copyAllProperties(entry, listItem);\n        }\n      } else {\n        // Basic value.\n        // Just push it into list, or override existing value\n        if (item.hasIndex(index)) {\n          item.setIndex(index, entry);\n        } else {\n          item.push(entry);\n        }\n      }\n    }); // Truncate the list if it contains less items than the config\n    // array\n\n    while (configValue.length < item.length) {\n      item.pop();\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  BaseObject.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Language must come first, so it's all set up when the rest of the\n    // elements are being instantiated\n    else if (a == \"language\") {\n      return -1;\n    } else if (b == \"language\") {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Checks if field should be just assigned as is, without any checking when\r\n   * processing JSON config.\r\n   *\r\n   * Extending functions can override this function to do their own checks.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n\n\n  BaseObject.prototype.asIs = function (field) {\n    return $array.indexOf([\"locale\"], field) != -1;\n  };\n  /**\r\n   * Checks if field needs to be converted to function, if it is specified\r\n   * as string.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n\n  BaseObject.prototype.asFunction = function (field) {\n    return false;\n  };\n  /**\r\n   * Creates a relevant class instance if such class definition exists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param className  Class name\r\n   * @return Instance\r\n   */\n\n\n  BaseObject.prototype.createClassInstance = function (className) {\n    if ($type.hasValue(registry.registeredClasses[className])) {\n      return new registry.registeredClasses[className]();\n    } else {\n      throw Error(\"Invalid type: \\\"\" + className + \"\\\".\");\n    }\n  };\n  /**\r\n   * Creates a class instance for a config entry using it's type. (as set in\r\n   * `type` property)\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config part\r\n   * @return Instance\r\n   */\n\n\n  BaseObject.prototype.createEntryInstance = function (config) {\n    var res;\n\n    if ($type.hasValue(config[\"type\"])) {\n      res = this.createClassInstance(config[\"type\"]);\n    }\n\n    if (!res) {\n      return config;\n    }\n\n    return res;\n  };\n  /**\r\n   * Determines config object type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config part\r\n   * @return Type\r\n   */\n\n\n  BaseObject.prototype.getConfigEntryType = function (config) {\n    if ($type.hasValue(config[\"type\"])) {\n      if ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\n        return registry.registeredClasses[config[\"type\"]];\n      } else {\n        throw Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\n      }\n    }\n\n    return;\n  };\n  /**\r\n   * Checks if this element has a property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param prop  Property name\r\n   * @return Has property?\r\n   */\n\n\n  BaseObject.prototype.hasProperty = function (prop) {\n    return prop in this ? true : false;\n  };\n  /**\r\n   * Checkes whether JSON key is a reserved keyword.\r\n   *\r\n   * @param key  Key\r\n   * @return Reserved\r\n   */\n\n\n  BaseObject.prototype.isReserved = function (key) {\n    return [\"type\", \"forceCreate\"].indexOf(key) !== -1;\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"processingErrors\", {\n    /**\r\n     * A list of errors that happened during JSON processing.\r\n     *\r\n     * @return Errors\r\n     */\n    get: function () {\n      if (!this._processingErrors) {\n        this._processingErrors = [];\n      }\n\n      return this._processingErrors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BaseObject;\n}();\n\nexport { BaseObject };\n;\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\n\nvar BaseObjectEvents =\n/** @class */\nfunction (_super) {\n  __extends(BaseObjectEvents, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function BaseObjectEvents() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"BaseObjectEvents\";\n    return _this;\n  }\n\n  Object.defineProperty(BaseObjectEvents.prototype, \"events\", {\n    /**\r\n     * An [[EventDispatcher]] instance\r\n     */\n    get: function () {\n      if (!this._eventDispatcher) {\n        this._eventDispatcher = new EventDispatcher();\n\n        this._disposers.push(this._eventDispatcher);\n      }\n\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  }); //public set events(value:EventDispatcher<AMEvent<this, this[\"_events\"]>>){\n  //\tthis._eventDispatcher = value;\n  //}\n\n  /**\r\n   * Dispatches an event using own event dispatcher. Will automatically\r\n   * populate event data object with event type and target (this element).\r\n   * It also checks if there are any handlers registered for this sepecific\r\n   * event.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n\n  BaseObjectEvents.prototype.dispatch = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this._eventDispatcher) {\n      if (this.events.isEnabled(eventType)) {\n        if (data) {\n          data.type = eventType;\n          data.target = data.target || this;\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this\n          });\n        } else {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Works like `dispatch`, except event is triggered immediately, without\r\n   * waiting for the next frame cycle.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n\n\n  BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this._eventDispatcher) {\n      if (this.events.isEnabled(eventType)) {\n        if (data) {\n          data.type = eventType;\n          data.target = data.target || this;\n          this.events.dispatchImmediately(eventType, data);\n        } else {\n          this.events.dispatchImmediately(eventType, {\n            type: eventType,\n            target: this\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source object\r\n   */\n\n\n  BaseObjectEvents.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (source._eventDispatcher) {\n      this.events.copyFrom(source._eventDispatcher);\n    }\n  };\n\n  return BaseObjectEvents;\n}(BaseObject);\n\nexport { BaseObjectEvents };","map":{"version":3,"sources":["../../../../src/.internal/core/Base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Base functionality\r\n*/\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IClone } from \"./utils/Clone\";\r\nimport { List, ListTemplate } from \"./utils/List\";\r\nimport { OrderedListTemplate, SortedListTemplate } from \"./utils/SortedList\";\r\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\r\nimport { Disposer, IDisposer } from \"./utils/Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Color, color } from \"./utils/Color\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { Ordering } from \"./utils/Order\";\r\n\r\nimport { registry } from \"./Registry\";\r\nimport { cache } from \"./utils/Cache\";\r\n\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n//import * as $debug from \"./utils/Debug\";\r\n\r\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\r\nexport class BaseObject implements IClone<BaseObject>, IDisposer {\r\n\r\n\t/**\r\n\t * A unique ID for this object.\r\n\t *\r\n\t * Generated on first access by `uid()` getter.\r\n\t */\r\n\tprotected _uid: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * User-defined id of the object.\r\n\t */\r\n\tprotected _id: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Holds a universal mapping collection, so that elements and their children\r\n\t * can create and look up all kinds of relations between id and object.\r\n\t */\r\n\tprotected _map: $type.Optional<Dictionary<string, any>>;\r\n\r\n\t/**\r\n\t * Holds mapping for objects referenced by id in JSON config that are not yet\r\n\t * available at processing time.\r\n\t */\r\n\tprotected _delayedMap: $type.Optional<Dictionary<string, any>>;\r\n\r\n\t/**\r\n\t * The theme used by this object.\r\n\t */\r\n\tprotected _themes: $type.Optional<ITheme[]>;\r\n\r\n\t// @review\r\n\t/**\r\n\t * A list of objects that are clones of this object. An object needs to\r\n\t * maintain a list of its clones so that properties can be re-applied to\r\n\t * clones whenever property on the object they were cloned from changes.\r\n\t */\r\n\tprotected _clones: $type.Optional<List<this>>;\r\n\r\n\r\n\t// @review\r\n\t/**\r\n\t * Reference to the original object this object was cloned from. We need to\r\n\t * keep this so we can disassociate it from source object when this object\r\n\t * is disposed.\r\n\t */\r\n\tpublic clonedFrom: $type.Optional<this>;\r\n\r\n\t/**\r\n\t * A class name for the object.\r\n\t *\r\n\t * This property is used by deriving classes to identify which class it is.\r\n\t * We could derive the class name from the object itself, however method of\r\n\t * doing so is too costly, so we are relying on this property to quickly\r\n\t * access type of class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _className: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * [cloneId description]\r\n\t *\r\n\t * @todo Needs description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic cloneId: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Holds processing error list.\r\n\t */\r\n\tprotected _processingErrors: string[];\r\n\r\n\t//protected _classes: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t * * Sets class name\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.className = \"BaseObject\";\r\n\t\t//this.debug();\r\n\t}\r\n\r\n\tprotected debug(): void {\r\n\t\t//$debug.debug(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns object's internal unique ID.\r\n\t *\r\n\t * @return Unique ID\r\n\t */\r\n\tpublic get uid(): string {\r\n\t\tif (!this._uid) {\r\n\t\t\tthis._uid = registry.getUniqueId();\r\n\t\t\tregistry.map.setKey(this._uid, this);\r\n\t\t}\r\n\t\treturn this._uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the user-defined id of the element.\r\n\t *\r\n\t * @param value Id\r\n\t */\r\n\tpublic set id(value: $type.Optional<string>) {\r\n\t\t//registry.map.setKey(value, this); // registry.map only stores by uid\r\n\t\tthis._id = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Id\r\n\t */\r\n\tpublic get id(): $type.Optional<string> {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a universal collection for mapping ids with objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tif (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns mapping for objects referenced by id in JSON config that are not yet\r\n\t * available at processing time.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get delayedMap(): Dictionary<string, any> {\r\n\t\tif (!this._delayedMap) {\r\n\t\t\tthis._delayedMap = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._delayedMap;\r\n\t}\r\n\r\n\t/**\r\n\t * Logs an id and property of the target element that is not yet available\r\n\t * for later assignment.\r\n\t * \r\n\t * @ignore\r\n\t * @param  property  Property to set\r\n\t * @param  id        ID of the target element\r\n\t */\r\n\tpublic addDelayedMap(property: string, id: string): void {\r\n\t\tconst map = this.delayedMap;\r\n\t\tif (!map.hasKey(id)) {\r\n\t\t\tmap.setKey(id, []);\r\n\t\t}\r\n\t\tconst list = map.getKey(id);\r\n\t\tlist.push({\r\n\t\t\tproperty: property,\r\n\t\t\ttarget: this\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes delayed JSON config items.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic processDelayedMap(): void {\r\n\t\tthis.delayedMap.each((id, list) => {\r\n\t\t\tif (this.map.hasKey(id)) {\r\n\t\t\t\tconst target = this.map.getKey(id);\r\n\t\t\t\t$array.each(list, (item: any) => {\r\n\t\t\t\t\titem.target[item.property] = target;\r\n\t\t\t\t});\r\n\t\t\t\tthis.delayedMap.removeKey(id);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Applies properties from all assigned themes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\t// TODO is this needed ?\r\n\t\tif (registry) {\r\n\t\t\tlet themes = this.getCurrentThemes();\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\tif (themes) {\r\n\t\t\t\t$array.each(themes, (theme, index) => {\r\n\t\t\t\t\ttheme(this);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of themes to be used for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value An array of themes\r\n\t */\r\n\tpublic set themes(value: $type.Optional<ITheme[]>) {\r\n\t\tthis._themes = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return An array of themes\r\n\t */\r\n\tpublic get themes(): $type.Optional<ITheme[]> {\r\n\t\treturn this._themes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of themes that should be applied to this element. It could\r\n\t * either be a list of themes set explicitly on this element, or system-wide.\r\n\t *\r\n\t * @return List of themes\r\n\t */\r\n\tpublic getCurrentThemes(): ITheme[] {\r\n\t\treturn this.themes || registry.themes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\t// Clear cache\r\n\t\t\tthis.clearCache();\r\n\r\n\t\t\t// remove from clones list\r\n\t\t\tif (this.clonedFrom) {\r\n\t\t\t\tthis.clonedFrom.clones.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tconst uid = this._uid;\r\n\r\n\t\t\tif (uid != null) {\r\n\t\t\t\tregistry.map.removeKey(uid);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an IDisposer, which will be disposed when this object is disposed.\r\n\t *\r\n\t * @param target Object to dispose\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addDisposer(target: IDisposer): void {\r\n\t\tthis._disposers.push(target);\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes disposable object and removes it from `_disposers`.\r\n\t *\r\n\t * @param target Object to dispose\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic removeDispose(target: IDisposer): void {\r\n\t\t//if(target){\r\n\t\tif (!this._disposed) {\r\n\t\t\tlet index = $array.indexOf(this._disposers, target);\r\n\t\t\tif (index > -1) {\r\n\t\t\t\tthis._disposers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttarget.dispose();\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n\t *\r\n\t * @param cloneId  An id to use for clone (if not set a unique id will be generated)\r\n\t * @returns Clone\r\n\t */\r\n\tpublic clone<A extends this>(cloneId?: string): this {\r\n\t\tif (!cloneId) {\r\n\t\t\tcloneId = \"clone-\" + registry.getUniqueId();\r\n\t\t}\r\n\r\n\t\tlet newObject: this = new (<{ new(): A; }>this.constructor)();\r\n\t\tnewObject.cloneId = cloneId;\r\n\r\n\t\tnewObject.copyFrom(this);\r\n\r\n\t\t// add to clones list\r\n\t\t// this.clones.push(newObject); // moved this to copyFrom\r\n\r\n\r\n\t\treturn newObject;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a collection of object's clones.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Clones\r\n\t */\r\n\tpublic get clones(): List<this> {\r\n\t\tif (!this._clones) {\r\n\t\t\tthis._clones = new List<this>();\r\n\t\t}\r\n\t\treturn this._clones;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from different element.\r\n\t *\r\n\t * @param object Source element\r\n\t */\r\n\tpublic copyFrom(object: this): void {\r\n\t\tobject.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\r\n\t\tthis.clonedFrom = object;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's class name. (a class that was used to instantiate the element)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Class name\r\n\t */\r\n\tpublic set className(value: $type.Optional<string>) {\r\n\t\tthis._className = value;\r\n\t\t/*if (registry) {\r\n\t\t\tregistry.registeredClasses[value] = typeof this;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Class name\r\n\t */\r\n\tpublic get className(): $type.Optional<string> {\r\n\t\treturn this._className;\r\n\t}\r\n\r\n\t/**\r\n\t * Caches value in object's cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value\r\n\t * @param ttl    TTL in seconds\r\n\t */\r\n\tpublic setCache(key: string, value: any, ttl?: number): void {\r\n\t\tcache.set(this.uid, key, value, ttl);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves cached value.\r\n\t *\r\n\t * If optional second padarameter is specified, it will return that value\r\n\t * if cache is not available or is expired.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key    Key\r\n\t * @param value  Value to return if cache is not available\r\n\t * @return Value\r\n\t */\r\n\tpublic getCache(key: string, value: any = undefined): any {\r\n\t\treturn cache.get(this.uid, key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears object's local cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic clearCache(): void {\r\n\t\tcache.clear(this.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n\t * timeouts created by the object will be cleared when object itself is\r\n\t * disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fn     Callback function\r\n\t * @param delay  Timeout (ms)\r\n\t * @return Disposer for timeout\r\n\t */\r\n\tpublic setTimeout(fn: () => void, delay: number): IDisposer {\r\n\t\tconst id = setTimeout(() => {\r\n\t\t\tthis.removeDispose(disposer);\r\n\t\t\tfn();\r\n\t\t}, delay);\r\n\r\n\t\tconst disposer = new Disposer(() => {\r\n\t\t\tclearTimeout(id);\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(disposer);\r\n\t\treturn disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n\t * timeouts created by the object will be cleared when object itself is\r\n\t * disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fn     Callback function\r\n\t * @param delay  Timeout (ms)\r\n\t * @return Disposer for timeout\r\n\t */\r\n\tpublic setInterval(fn: () => void, delay: number): IDisposer {\r\n\t\tconst id = setInterval(() => {\r\n\t\t\tthis.removeDispose(disposer);\r\n\t\t\tfn();\r\n\t\t}, delay);\r\n\r\n\t\tconst disposer = new Disposer(() => {\r\n\t\t\tclearTimeout(id);\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(disposer);\r\n\t\treturn disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * JSON-BASED CONFIG PROCESSING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Use this property to set JSON-based config. When set, triggers processing\r\n\t * routine, which will go through all properties, and try to apply values,\r\n\t * create instances, etc.\r\n\t *\r\n\t * Use this with caution, as it is a time-consuming process. It's used for\r\n\t * initialchart setup only, not routine operations.\r\n\t *\r\n\t * @param json JSON config\r\n\t */\r\n\tpublic set config(config: object) {\r\n\t\ttry {\r\n\t\t\tthis.processConfig(config);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\t/*if (this instanceof Sprite) {\r\n\t\t\t\tthis.raiseCriticalError(e);\r\n\t\t\t}*/\r\n\t\t\t(<any>this).raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the JSON config.\r\n\t *\r\n\t * @param json  JSON config\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected processConfig(config?: object): void {\r\n\r\n\t\tif (!config) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get target\r\n\t\tlet target = <any>this;\r\n\r\n\t\t// Iterate through all of the items\r\n\t\t$object.eachOrdered(config, (configKey, value) => {\r\n\t\t\tlet configValue: any = value;\r\n\r\n\t\t\t// Is this a callback?\r\n\t\t\tif (configKey == \"callback\" && typeof value == \"function\") {\r\n\t\t\t\t(<any>value).call(target);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if there's a property in target\r\n\t\t\tif (this.hasProperty(configKey)) {\r\n\r\n\t\t\t\tlet item: any;\r\n\r\n\t\t\t\t// Do we have instructions to create an object?\r\n\t\t\t\t// We create a new object if \"type\" key is set, but only if the\r\n\t\t\t\t// target object is of different type.\r\n\t\t\t\tif (\r\n\t\t\t\t\t$type.isObject(configValue)\r\n\t\t\t\t\t&& $type.hasValue((<any>configValue)[\"type\"])\r\n\t\t\t\t\t&& (\r\n\t\t\t\t\t\t!$type.isObject(target[configKey])\r\n\t\t\t\t\t\t|| !$type.hasValue(target[configKey].className)\r\n\t\t\t\t\t\t|| (<any>configValue)[\"forceCreate\"]\r\n\t\t\t\t\t\t|| target[configKey].className != (<any>configValue)[\"type\"]\r\n\t\t\t\t\t)\r\n\t\t\t\t\t&& !this.asIs(configKey)\r\n\t\t\t\t) {\r\n\t\t\t\t\titem = this.createClassInstance((<any>configValue)[\"type\"]);\r\n\r\n\t\t\t\t\t// Create new instance\r\n\t\t\t\t\tif (item) {\r\n\t\t\t\t\t\ttarget[configKey] = item;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\titem = target[configKey];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Get item from the object\r\n\t\t\t\t\titem = target[configKey];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * It is...\r\n\t\t\t\t * --------------------------------------------------------------------\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif (item instanceof Adapter) {\r\n\r\n\t\t\t\t\t// ... an Adapter, try to add handlers to it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tthis.processAdapters(item, configValue);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof EventDispatcher) {\r\n\r\n\t\t\t\t\t// ... an EventDispatcher, try to add handlers to it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tthis.processEvents(item, configValue);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (configKey == \"locale\" && $type.isString(configValue)) {\r\n\r\n\t\t\t\t\t// ... a locale specified as string, e.g. \"fr_FR\"\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tif ((<any>window)[\"am4lang_\" + configValue]) {\r\n\t\t\t\t\t\ttarget[configKey] = (<any>window)[\"am4lang_\" + configValue];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (configKey == \"parent\" && $type.isString(configValue)) {\r\n\r\n\t\t\t\t\t// ... a parent referred via its it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tconst parent = this.map.getKey(configValue);\r\n\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\ttarget[configKey] = parent;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.addDelayedMap(\"parent\", configValue);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.asIs(configKey)) {\r\n\r\n\t\t\t\t\t// ... a special field, just set it to new value\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// (no need to add each indvidual item)\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.asFunction(configKey) && $type.isString(configValue)) {\r\n\r\n\t\t\t\t\t// ... a field indicating function name to look for in registry\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tif ($type.hasValue(registry.registeredClasses[configValue])) {\r\n\t\t\t\t\t\ttarget[configKey] = registry.registeredClasses[configValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthrow Error(\"Invalid easing function: \" + configValue);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (<any>configValue instanceof BaseObject) {\r\n\r\n\t\t\t\t\t// ... a BaseObject object, we just going to use it as it is\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof BaseObject) {\r\n\r\n\t\t\t\t\t// ... another child BaseObject\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// Let's just pass in config part in and let itself deal with it\r\n\t\t\t\t\titem.config = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof ListTemplate || item instanceof OrderedListTemplate || item instanceof SortedListTemplate) {\r\n\r\n\t\t\t\t\t// ... a list with template\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Let's see what we can do with it\r\n\t\t\t\t\tif ($type.isArray(configValue)) {\r\n\r\n\t\t\t\t\t\t// It's an array.\r\n\t\t\t\t\t\t// Create a list item for entry, or try to apply properties to an\r\n\t\t\t\t\t\t// existing entry if possible and it is present.\r\n\t\t\t\t\t\tif (item instanceof ListTemplate) {\r\n\t\t\t\t\t\t\tthis.processListTemplate(configValue, item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.processOrderedTemplate(configValue, item);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.isObject(configValue)) {\r\n\t\t\t\t\t\t// It's a single oject.\r\n\t\t\t\t\t\t// Treat it as a template.\r\n\t\t\t\t\t\tif (<any>configValue instanceof BaseObject) {\r\n\t\t\t\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\t\t\t\titem.template = configValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t// Now let's find out if the whole object if a template, or we\r\n\t\t\t\t\t\t\t// need to get it from `template` key\r\n\t\t\t\t\t\t\tlet templateValue;\r\n\t\t\t\t\t\t\tif ($type.hasValue((<any>configValue).template)) {\r\n\t\t\t\t\t\t\t\ttemplateValue = (<any>configValue).template;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\ttemplateValue = configValue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (item.template instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t// Template is a BaseObject so we will just let its config\r\n\t\t\t\t\t\t\t\t// deal with the configuration\r\n\t\t\t\t\t\t\t\t(<any>item.template).config = templateValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t$object.each(templateValue, (entryKey, entryValue) => {\r\n\r\n\t\t\t\t\t\t\t\t\tlet listItem = (<any>item.template)[entryKey];\r\n\r\n\t\t\t\t\t\t\t\t\tif (listItem instanceof Adapter) {\r\n\t\t\t\t\t\t\t\t\t\tthis.processAdapters(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (listItem instanceof EventDispatcher) {\r\n\t\t\t\t\t\t\t\t\t\tthis.processEvents(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (listItem instanceof DictionaryTemplate) {\r\n\t\t\t\t\t\t\t\t\t\tthis.processDictionaryTemplate(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (item.template[entryKey] instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t\t\t// Template is a BaseObject. Let it deal with its own config.\r\n\t\t\t\t\t\t\t\t\t\t(<any>item.template[entryKey]).config = entryValue;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if ($type.isObject(entryValue) && $type.hasValue((<any>entryValue)[\"type\"])) {\r\n\t\t\t\t\t\t\t\t\t\tlistItem = this.createClassInstance((<any>entryValue)[\"type\"])\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (listItem) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlistItem.config = <any>entryValue;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\titem.template[entryKey] = listItem;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\titem.template[entryKey] = entryValue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (listItem instanceof List) {\r\n\t\t\t\t\t\t\t\t\t\t// It's List, process it\r\n\t\t\t\t\t\t\t\t\t\tthis.processList(entryValue, listItem);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t// Aything else. Just assing and be done with it.\r\n\t\t\t\t\t\t\t\t\t\titem.template[entryKey] = this.maybeColorOrPercent(entryValue);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check maybe there are `values` to insert\r\n\t\t\t\t\t\t\tif ($type.hasValue((<any>configValue).values)) {\r\n\t\t\t\t\t\t\t\tif (item instanceof ListTemplate) {\r\n\t\t\t\t\t\t\t\t\tthis.processListTemplate((<any>configValue).values, item);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tthis.processOrderedTemplate((<any>configValue).values, item);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t// Something else?\r\n\t\t\t\t\t\t// Not sure what to do with it on a list - ignore\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof List) {\r\n\r\n\t\t\t\t\t// ... a list\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tif (configKey == \"children\") {\r\n\t\t\t\t\t\tthis.processList(configValue, item, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.processList(configValue, item);\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof DictionaryTemplate) {\r\n\r\n\t\t\t\t\t// ... a dictionary with template\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tthis.processDictionaryTemplate(item, configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof Dictionary) {\r\n\r\n\t\t\t\t\t// ... a dictionary\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tthis.processDictionary(item, configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof Color || item instanceof Percent) {\r\n\r\n\t\t\t\t\t// ... it's a Color or Percent\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\ttarget[configKey] = this.maybeColorOrPercent(configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($type.isObject(item) && $type.isObject(configValue)) {\r\n\r\n\t\t\t\t\t// ... a regular object\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t$object.copyAllProperties(<Object>configValue, <Object>item);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// ... something else - probably a simple property or object\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Maybe convert to `Percent` or `Color`?\r\n\t\t\t\t\tconfigValue = this.maybeColorOrPercent(configValue);\r\n\r\n\t\t\t\t\t// Assign\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse if (!this.isReserved(configKey)) {\r\n\r\n\t\t\t\t// Doesn't have property set. But we're going to assume JSON config\r\n\t\t\t\t// creator knows what he/she is doing and set it anyway.\r\n\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t}\r\n\t\t}, this.configOrder);\r\n\r\n\t\t// Any errors?\r\n\t\tif (this.processingErrors.length) {\r\n\t\t\tlet errors = this.processingErrors.join(\"\\n\");\r\n\t\t\tthis._processingErrors = [];\r\n\t\t\tthrow Error(errors);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to detect if value is color or percent and converts to proper object\r\n\t * if necessary.\r\n\t *\r\n\t * Returns the same source value if no color/percent detected\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Converted value\r\n\t */\r\n\tprotected maybeColorOrPercent(value: any): any {\r\n\t\tif ($type.isString(value)) {\r\n\t\t\tif (value.match(/^[\\-]?[0-9.]+\\%$/)) {\r\n\t\t\t\treturn percent($type.toNumber(value));\r\n\t\t\t}\r\n\t\t\telse if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n\t\t\t\treturn color(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tprotected processAdapters(item: Adapter<any, any>, config: any): void {\r\n\t\tif ($type.isArray(config)) {\r\n\t\t\t$array.each(config, (entry: { key: string, callback: any, priority?: number }, index) => {\r\n\t\t\t\titem.add(entry.key, entry.callback, entry.priority || 0, this);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if ($type.isObject(config)) {\r\n\t\t\t$object.each(config, (key, entry) => {\r\n\t\t\t\tif (!item.has(key, entry)) {\r\n\t\t\t\t\titem.add(key, entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected processEvents(item: EventDispatcher<any>, config: any): void {\r\n\t\tif ($type.isArray(config)) {\r\n\t\t\t$array.each(config, (entry: { type: string, callback: any }, index) => {\r\n\t\t\t\titem.on(entry.type, entry.callback, this);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if ($type.isObject(config)) {\r\n\t\t\t$object.each(config, (key, entry) => {\r\n\t\t\t\tif (!item.has(key, entry)) {\r\n\t\t\t\t\titem.on(key, entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON config for a [[DictionaryTemplate]] item.\r\n\t *\r\n\t * @todo Description\r\n\t * @param item    Item\r\n\t * @param config  Config\r\n\t */\r\n\tprotected processDictionaryTemplate(item: DictionaryTemplate<any, any>, config: any): void {\r\n\r\n\t\t// We can only process object\r\n\t\t// Not sure what to do with other types - ignore\r\n\t\tif ($type.isObject(config)) {\r\n\r\n\t\t\t// Create an entry for each item, or override properties for\r\n\t\t\t// existing one.\r\n\t\t\t$object.each(config, (entryKey, entryValue) => {\r\n\t\t\t\tlet listItem;\r\n\r\n\t\t\t\t// Get existing one, or create a new one\r\n\t\t\t\tif (entryKey == \"template\") {\r\n\t\t\t\t\tlistItem = item.template;\r\n\t\t\t\t}\r\n\t\t\t\telse if (item.hasKey(entryKey)) {\r\n\t\t\t\t\tlistItem = item.getKey(entryKey);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem = item.create(entryKey);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set data\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\tlistItem.config = entryValue;\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entryValue)) {\r\n\t\t\t\t\t$object.copyAllProperties(<Object>entryValue, <Object>listItem);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem.setKey(entryKey, entryValue);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON config for a [[Dictionary]] item.\r\n\t *\r\n\t * @todo Description\r\n\t * @param item    Item\r\n\t * @param config  Config\r\n\t */\r\n\tprotected processDictionary(item: Dictionary<any, any>, config: any): void {\r\n\r\n\t\t// We can only process object\r\n\t\t// Not sure what to do with other types - ignore\r\n\t\tif ($type.isObject(config)) {\r\n\r\n\t\t\t// Create an entry for each item, or override properties for\r\n\t\t\t// existing one.\r\n\t\t\t// @todo support for non-basic types\r\n\t\t\t$object.each(config, (entryKey, entryValue) => {\r\n\t\t\t\titem.setKey(entryKey, entryValue);\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes [[ListTemplate]].\r\n\t *\r\n\t * @param configValue  Config value\r\n\t * @param item         Item\r\n\t */\r\n\tprotected processListTemplate(configValue: any, item: ListTemplate<any>): void {\r\n\r\n\t\t$array.each(configValue, (entry, index) => {\r\n\t\t\tlet type = this.getConfigEntryType(entry);\r\n\t\t\tlet listItem;\r\n\t\t\tif (item.hasIndex(index) && !(<any>entry)[\"forceCreate\"]) {\r\n\t\t\t\tlistItem = item.getIndex(index);\r\n\t\t\t}\r\n\t\t\telse if (<any>entry instanceof BaseObject) {\r\n\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\titem.push(entry);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse if (type) {\r\n\t\t\t\tlistItem = item.create(type);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlistItem = item.create();\r\n\t\t\t}\r\n\r\n\t\t\tif (entry === listItem) {\r\n\t\t\t\t// It's already the same item, do nothing\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t\t// deal if its own config\r\n\t\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n\t\t\t\t\t\t$object.copyAllProperties(<Object>entry, <Object>listItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\titem.setIndex(item.indexOf(listItem), entry);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Truncate the list if it contains less items than the config\r\n\t\t// array\r\n\t\twhile (configValue.length > item.length) {\r\n\t\t\titem.pop();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].\r\n\t *\r\n\t * @param configValue  Config value\r\n\t * @param item         Item\r\n\t */\r\n\tprotected processOrderedTemplate(configValue: any, item: OrderedListTemplate<any> | SortedListTemplate<any>): void {\r\n\r\n\t\t$array.each(configValue, (entry, index) => {\r\n\t\t\tlet type = this.getConfigEntryType(entry);\r\n\t\t\tlet listItem;\r\n\t\t\tif (type) {\r\n\t\t\t\tlistItem = item.create(type);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlistItem = item.create();\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t// deal if its own config\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n\t\t\t\t\t$object.copyAllProperties(<Object>entry, <Object>listItem);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\titem.insert(entry);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes [[List]].\r\n\t *\r\n\t * @param configValue  Config value\r\n\t * @param item         Item\r\n\t */\r\n\tprotected processList(configValue: any, item: List<any>, parent?: any): void {\r\n\r\n\t\t// Convert to array if necessary\r\n\t\tif (!$type.isArray(configValue)) {\r\n\t\t\tconfigValue = [configValue];\r\n\t\t}\r\n\r\n\t\t// It's an array\r\n\t\t// Create a list item for entry\r\n\t\tconst itemCount = item.length;\r\n\t\t$array.each(configValue, (entry, index) => {\r\n\r\n\t\t\tif ($type.isObject(entry)) {\r\n\r\n\r\n\t\t\t\t// An object.\r\n\t\t\t\t//\r\n\t\t\t\t// Let's see if we can instantiate a class out of it, or we need\r\n\t\t\t\t// to push it into list as it is.\r\n\t\t\t\t//\r\n\t\t\t\t// If there are items already at the specified index in the list,\r\n\t\t\t\t// apply properties rather than create a new one.\r\n\r\n\t\t\t\tlet listItem;\r\n\t\t\t\tif ((index < itemCount) && !(<any>entry)[\"forceCreate\"]) {\r\n\t\t\t\t\tlistItem = item.getIndex(index);\r\n\t\t\t\t}\r\n\t\t\t\telse if (<any>entry instanceof BaseObject) {\r\n\t\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\t\titem.push(entry);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem = this.createEntryInstance(entry);\r\n\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\tlistItem.parent = parent;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\titem.push(listItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t// deal if its own config\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n\t\t\t\t\t$object.copyAllProperties(<Object>entry, <Object>listItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Basic value.\r\n\t\t\t\t// Just push it into list, or override existing value\r\n\t\t\t\tif (item.hasIndex(index)) {\r\n\t\t\t\t\titem.setIndex(index, entry);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\titem.push(entry);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\t// Truncate the list if it contains less items than the config\r\n\t\t// array\r\n\t\twhile (configValue.length < item.length) {\r\n\t\t\titem.pop();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Language must come first, so it's all set up when the rest of the\r\n\t\t// elements are being instantiated\r\n\t\telse if (a == \"language\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"language\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if field should be just assigned as is, without any checking when\r\n\t * processing JSON config.\r\n\t *\r\n\t * Extending functions can override this function to do their own checks.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn $array.indexOf([\"locale\"], field) != -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if field needs to be converted to function, if it is specified\r\n\t * as string.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a relevant class instance if such class definition exists.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param className  Class name\r\n\t * @return Instance\r\n\t */\r\n\tprotected createClassInstance(className: string): Object {\r\n\t\tif ($type.hasValue(registry.registeredClasses[className])) {\r\n\t\t\treturn new registry.registeredClasses[className]();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow Error(\"Invalid type: \\\"\" + className + \"\\\".\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a class instance for a config entry using it's type. (as set in\r\n\t * `type` property)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config part\r\n\t * @return Instance\r\n\t */\r\n\tprotected createEntryInstance(config: any): any {\r\n\t\tlet res: Object;\r\n\t\tif ($type.hasValue(config[\"type\"])) {\r\n\t\t\tres = this.createClassInstance(config[\"type\"]);\r\n\t\t}\r\n\t\tif (!res) {\r\n\t\t\treturn config;\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines config object type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config part\r\n\t * @return Type\r\n\t */\r\n\tprotected getConfigEntryType(config: any): any {\r\n\t\tif ($type.hasValue(config[\"type\"])) {\r\n\t\t\tif ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\r\n\t\t\t\treturn registry.registeredClasses[config[\"type\"]];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this element has a property.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param prop  Property name\r\n\t * @return Has property?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop in this ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Checkes whether JSON key is a reserved keyword.\r\n\t *\r\n\t * @param key  Key\r\n\t * @return Reserved\r\n\t */\r\n\tprotected isReserved(key: string): boolean {\r\n\t\treturn [\"type\", \"forceCreate\"].indexOf(key) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of errors that happened during JSON processing.\r\n\t *\r\n\t * @return Errors\r\n\t */\r\n\tprotected get processingErrors(): string[] {\r\n\t\tif (!this._processingErrors) {\r\n\t\t\tthis._processingErrors = [];\r\n\t\t}\r\n\t\treturn this._processingErrors;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[BaseObjectEvents]].\r\n */\r\nexport interface IBaseObjectEvents { };\r\n\r\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\r\nexport class BaseObjectEvents extends BaseObject {\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"BaseObjectEvents\";\r\n\t}\r\n\r\n\tpublic _events!: IBaseObjectEvents;\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance\r\n\t * @ignore\r\n\t */\r\n\tpublic _eventDispatcher: EventDispatcher<AMEvent<this, this[\"_events\"]>>;\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance\r\n\t */\r\n\tpublic get events(): EventDispatcher<AMEvent<this, this[\"_events\"]>> {\r\n\t\tif (!this._eventDispatcher) {\r\n\t\t\tthis._eventDispatcher = new EventDispatcher();\r\n\t\t\tthis._disposers.push(this._eventDispatcher);\r\n\t\t}\r\n\t\treturn this._eventDispatcher;\r\n\t}\r\n\r\n\t//public set events(value:EventDispatcher<AMEvent<this, this[\"_events\"]>>){\r\n\t//\tthis._eventDispatcher = value;\r\n\t//}\r\n\r\n\t/**\r\n\t * Dispatches an event using own event dispatcher. Will automatically\r\n\t * populate event data object with event type and target (this element).\r\n\t * It also checks if there are any handlers registered for this sepecific\r\n\t * event.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatch<Key extends keyof this[\"_events\"]>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this._eventDispatcher) {\r\n\t\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tdata.type = eventType;\r\n\t\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Works like `dispatch`, except event is triggered immediately, without\r\n\t * waiting for the next frame cycle.\r\n\t *\r\n\t * @param eventType Event type (name)\r\n\t * @param data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatchImmediately<Key extends keyof this[\"_events\"]>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this._eventDispatcher) {\r\n\t\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tdata.type = eventType;\r\n\t\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t\t(<any>this.events).dispatchImmediately(eventType, data);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t(<any>this.events).dispatchImmediately(eventType, {\r\n\t\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\t\ttarget: this\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source object\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source._eventDispatcher) {\r\n\t\t\tthis.events.copyFrom(source._eventDispatcher);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}