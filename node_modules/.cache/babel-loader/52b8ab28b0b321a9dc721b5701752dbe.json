{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Lexer = require('./lexers/Lexer');\n\nvar _Lexer2 = _interopRequireDefault(_Lexer);\n\nvar _functions = require('./models/functions');\n\nvar _functions2 = _interopRequireDefault(_functions);\n\nvar _greekLetters = require('./models/greek-letters');\n\nvar _greekLetters2 = _interopRequireDefault(_greekLetters);\n\nvar _logger = require('./logger');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ParserLatex = function () {\n  function ParserLatex(latex, Lexer) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ParserLatex); // if (!(Lexer instanceof LexerClass)) {\n    //   throw Error('Please parse a valid lexer as second argument')\n    // }\n\n\n    this.lexer = new Lexer(latex);\n    this.options = options;\n    this.ast = null;\n    this.current_token = null;\n    this.peek_token = null;\n    this.functions = _functions2.default.concat(options.functions || []);\n  }\n\n  _createClass(ParserLatex, [{\n    key: 'parse',\n    value: function parse() {\n      (0, _logger.debug)('\\nLatex parser .parse()');\n      this.ast = this.equation();\n      this.eat('EOF');\n      return this.ast;\n    }\n  }, {\n    key: 'next_token',\n    value: function next_token() {\n      if (this.peek_token != null) {\n        this.current_token = this.peek_token;\n        this.peek_token = null;\n        (0, _logger.debug)('next token from peek', this.current_token);\n      } else {\n        this.current_token = this.lexer.next_token();\n        (0, _logger.debug)('next token', this.current_token);\n      }\n\n      return this.current_token;\n    }\n  }, {\n    key: 'peek',\n    value: function peek() {\n      if (this.peek_token == null) {\n        this.peek_token = this.lexer.next_token();\n      }\n\n      (0, _logger.debug)('next token from peek', this.peek_token);\n      return this.peek_token;\n    }\n  }, {\n    key: 'error',\n    value: function error(message) {\n      var line = this.lexer.text.split('\\n')[this.lexer.line];\n      var spacing = '';\n\n      for (var i = 0; i < this.lexer.col; i++) {\n        spacing += ' ';\n      }\n\n      throw Error('Parser error\\n' + line + '\\n' + spacing + '^\\nError at line: ' + (this.lexer.line + 1) + ' col: ' + (this.lexer.col + 1) + '\\n' + message);\n    }\n  }, {\n    key: 'eat',\n    value: function eat(token_type) {\n      if (this.next_token().type != token_type) {\n        this.error('Expected ' + token_type + ' found ' + JSON.stringify(this.current_token));\n      }\n    }\n  }, {\n    key: 'equation',\n    value: function equation() {\n      // equation : expr ( EQUAL expr )?\n      var lhs = this.expr();\n\n      if (this.peek().type != 'equal') {\n        return lhs;\n      } else {\n        this.next_token();\n      }\n\n      var rhs = this.expr();\n      return {\n        type: 'equation',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'expr',\n    value: function expr() {\n      // expr : operator\n      (0, _logger.debug)('expr');\n      this.peek();\n\n      if (this.peek_token.type == 'number' || this.peek_token.type == 'operator' || this.peek_token.type == 'variable' || this.peek_token.type == 'function' || this.peek_token.type == 'keyword' || this.peek_token.type == 'bracket') {\n        return this.operator();\n      }\n\n      if (this.peek_token.type == 'bracket' && this.peek_token.open == false) {\n        return null;\n      }\n\n      if (this.peek_token.type == 'EOF') {\n        this.next_token();\n        return null;\n      }\n\n      this.next_token();\n      this.error('Unexpected token: ' + JSON.stringify(this.current_token));\n    }\n  }, {\n    key: 'keyword',\n    value: function keyword() {\n      // keyword : KEYWORD\n      //         | fraction\n      //         | function\n      (0, _logger.debug)('keyword');\n\n      if (this.peek().type != 'keyword') {\n        throw Error('Expected keyword found ' + JSON.stringify(this.peek_token));\n      }\n\n      var kwd = this.peek_token.value;\n      kwd = kwd.toLowerCase();\n      (0, _logger.debug)('keyword -', kwd);\n\n      if (kwd == 'frac') {\n        return this.fraction();\n      }\n\n      if (kwd == 'sqrt') {\n        return this.sqrt();\n      }\n\n      if (this.functions.includes(kwd.toLowerCase())) {\n        return this.function();\n      }\n\n      this.eat('keyword');\n      return {\n        type: 'keyword',\n        value: this.current_token.value\n      };\n    }\n  }, {\n    key: 'sqrt',\n    value: function sqrt() {\n      // sqrt : SQRT (L_SQUARE_BRAC NUMBER R_SQUARE_BRAC)? GROUP\n      (0, _logger.debug)('sqrt');\n      this.eat('keyword');\n\n      if (this.current_token.value != 'sqrt') {\n        this.error('Expected sqrt found ' + JSON.stringify(this.current_token));\n      }\n\n      if (this.peek().value != '[') {\n        var content = this.group();\n        return {\n          type: 'function',\n          value: 'sqrt',\n          content: content\n        };\n      }\n\n      this.eat('bracket');\n\n      if (this.current_token.value != '[') {\n        this.error('Expected \"[\" bracket, found ' + JSON.stringify(this.current_token));\n      }\n\n      var base = this.number();\n      this.eat('bracket');\n\n      if (this.current_token.value != ']') {\n        this.error('Expected \"]\" bracket, found ' + JSON.stringify(this.current_token));\n      }\n\n      var value = this.group();\n      return {\n        type: 'operator',\n        operator: 'exponent',\n        lhs: value,\n        rhs: {\n          type: 'operator',\n          operator: 'divide',\n          lhs: {\n            type: 'number',\n            value: 1\n          },\n          rhs: base\n        }\n      };\n    }\n  }, {\n    key: 'fraction',\n    value: function fraction() {\n      // fraction : FRAC group group\n      (0, _logger.debug)('fraction');\n      this.eat('keyword');\n\n      if (this.current_token.value != 'frac') {\n        this.error('Expected fraction found ' + JSON.stringify(this.current_token));\n      }\n\n      var nominator = this.group();\n      var denominator = this.group();\n      return {\n        type: 'operator',\n        operator: 'divide',\n        lhs: nominator,\n        rhs: denominator\n      };\n    }\n  }, {\n    key: 'function',\n    value: function _function() {\n      // function : FUNCTION ( group | number )\n      (0, _logger.debug)('function');\n      this.eat('keyword');\n      var value = this.current_token.value;\n      var content = void 0;\n\n      if (this.peek().type == 'bracket') {\n        content = this.group();\n      } else {\n        content = this.number();\n      }\n\n      return {\n        type: 'function',\n        value: value,\n        content: content\n      };\n    }\n  }, {\n    key: 'group',\n    value: function group() {\n      // group : LBRACKET expr RBRACKET\n      (0, _logger.debug)('start group');\n      this.eat('bracket');\n\n      if (this.current_token.open != true) {\n        this.error('Expected opening bracket found ' + this.current_token);\n      }\n\n      var content = this.expr();\n      this.eat('bracket');\n\n      if (this.current_token.open != false) {\n        this.error('Expected closing bracket found ' + this.current_token);\n      }\n\n      (0, _logger.debug)('end group');\n      return content;\n    }\n  }, {\n    key: 'operator',\n    value: function operator() {\n      // operator : operator_term ((PLUS | MINUS) operator)?\n      (0, _logger.debug)('operator left');\n      var lhs = this.operator_multiply();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'plus' && op.value != 'minus') {\n        (0, _logger.debug)('operator only left side');\n        return lhs;\n      } // Operator token\n\n\n      this.next_token();\n      (0, _logger.debug)('operator right');\n      var rhs = this.operator();\n      return {\n        type: 'operator',\n        operator: op.value,\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_multiply',\n    value: function operator_multiply() {\n      // operator_multiply : (operator_divide | GROUP) ( (MULTIPLY operator_multiply) | number )?\n      (0, _logger.debug)('op mul left');\n      var lhs = this.operator_divide();\n      var op = this.peek();\n\n      if (op.type == 'number' || op.type == 'variable' || op.type == 'keyword' || op.type == 'bracket' && op.value == '(') {\n        op = {\n          type: 'operator',\n          value: 'multiply'\n        };\n      } else if (op.type != 'operator' || op.value != 'multiply' && op.value != 'divide') {\n        (0, _logger.debug)('term only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('op mul right');\n      var rhs = this.operator_multiply();\n      return {\n        type: 'operator',\n        operator: op.value,\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_divide',\n    value: function operator_divide() {\n      // operator_divide : operator_mod operator_divide_prime\n      (0, _logger.debug)('operator_divide');\n      var lhs = this.operator_mod();\n      var divideResult = this.operator_divide_prime(lhs);\n      return divideResult;\n    }\n  }, {\n    key: 'operator_divide_prime',\n    value: function operator_divide_prime(lhs) {\n      // operator_divide_prime : epsilon | DIVIDE operator_mod operator_divide_prime\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'divide') {\n        (0, _logger.debug)('operator_divide_prime - epsilon');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('operator_divide_prime - next operator');\n      var rhs = this.operator_mod();\n      return this.operator_divide_prime({\n        type: 'operator',\n        operator: 'divide',\n        lhs: lhs,\n        rhs: rhs\n      });\n    }\n  }, {\n    key: 'operator_mod',\n    value: function operator_mod() {\n      // operator_mod : operator_exp ( MODULUS operator_mod )?\n      (0, _logger.debug)('modulus left');\n      var lhs = this.operator_exp();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'modulus') {\n        (0, _logger.debug)('modulus only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('modulus right');\n      var rhs = this.operator_mod();\n      return {\n        type: 'operator',\n        operator: 'modulus',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_exp',\n    value: function operator_exp() {\n      // operator_exp : subscript ( EXPONENT operator_exp )?\n      var lhs = this.subscript();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'exponent') {\n        (0, _logger.debug)('modulus only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      var rhs = this.operator_exp();\n      return {\n        type: 'operator',\n        operator: 'exponent',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'variable',\n    value: function variable() {\n      this.eat('variable');\n      return {\n        type: 'variable',\n        value: this.current_token.value\n      };\n    }\n  }, {\n    key: 'subscript',\n    value: function subscript() {\n      // subscript : number ( SUBSCRIPT subscript )?\n      var base_num = this.number();\n\n      if (this.peek().type == 'underscore') {\n        this.eat('underscore');\n        var sub_value = this.subscript();\n        return {\n          type: 'subscript',\n          base: base_num,\n          subscript: sub_value\n        };\n      }\n\n      return base_num;\n    }\n  }, {\n    key: 'number',\n    value: function number() {\n      // number : NUMBER\n      //        | uni_operator\n      //        | variable\n      //        | keyword\n      //        | symbol\n      //        | group\n      (0, _logger.debug)('number');\n      this.peek();\n\n      if (this.peek_token.type == 'number') {\n        this.next_token();\n        return {\n          type: this.current_token.type,\n          value: this.current_token.value\n        };\n      }\n\n      if (this.peek_token.type == 'operator') {\n        return this.uni_operator();\n      }\n\n      if (this.peek_token.type == 'variable') {\n        return this.variable();\n      }\n\n      if (this.peek_token.type == 'keyword') {\n        return this.keyword();\n      }\n\n      if (this.peek_token.type == 'bracket') {\n        return this.group();\n      }\n\n      this.next_token();\n      this.error('Expected number, variable, function, group, or + - found ' + JSON.stringify(this.current_token));\n    }\n  }, {\n    key: 'uni_operator',\n    value: function uni_operator() {\n      this.eat('operator');\n\n      if (this.current_token.value == 'plus' || this.current_token.value == 'minus') {\n        var prefix = this.current_token.value;\n        var value = this.number();\n\n        if (value.type == 'number') {\n          return {\n            type: 'number',\n            value: prefix == 'minus' ? -value.value : value.value\n          };\n        }\n\n        return {\n          type: 'uni-operator',\n          operator: prefix,\n          value: value\n        };\n      }\n    }\n  }]);\n\n  return ParserLatex;\n}();\n\nexports.default = ParserLatex;","map":{"version":3,"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_Lexer","require","_Lexer2","_interopRequireDefault","_functions","_functions2","_greekLetters","_greekLetters2","_logger","obj","__esModule","default","_classCallCheck","instance","TypeError","ParserLatex","latex","Lexer","options","arguments","undefined","lexer","ast","current_token","peek_token","functions","concat","parse","debug","equation","eat","next_token","peek","error","message","line","text","split","spacing","col","Error","token_type","type","JSON","stringify","lhs","expr","rhs","operator","open","keyword","kwd","toLowerCase","fraction","sqrt","includes","function","content","group","base","number","nominator","denominator","_function","operator_multiply","op","operator_divide","operator_mod","divideResult","operator_divide_prime","operator_exp","subscript","variable","base_num","sub_value","uni_operator","prefix"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/Numerproject-main/node_modules/algebra-latex/lib/Parser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Lexer = require('./lexers/Lexer');\n\nvar _Lexer2 = _interopRequireDefault(_Lexer);\n\nvar _functions = require('./models/functions');\n\nvar _functions2 = _interopRequireDefault(_functions);\n\nvar _greekLetters = require('./models/greek-letters');\n\nvar _greekLetters2 = _interopRequireDefault(_greekLetters);\n\nvar _logger = require('./logger');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ParserLatex = function () {\n  function ParserLatex(latex, Lexer) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ParserLatex);\n\n    // if (!(Lexer instanceof LexerClass)) {\n    //   throw Error('Please parse a valid lexer as second argument')\n    // }\n\n    this.lexer = new Lexer(latex);\n    this.options = options;\n    this.ast = null;\n    this.current_token = null;\n    this.peek_token = null;\n    this.functions = _functions2.default.concat(options.functions || []);\n  }\n\n  _createClass(ParserLatex, [{\n    key: 'parse',\n    value: function parse() {\n      (0, _logger.debug)('\\nLatex parser .parse()');\n      this.ast = this.equation();\n\n      this.eat('EOF');\n\n      return this.ast;\n    }\n  }, {\n    key: 'next_token',\n    value: function next_token() {\n      if (this.peek_token != null) {\n        this.current_token = this.peek_token;\n        this.peek_token = null;\n        (0, _logger.debug)('next token from peek', this.current_token);\n      } else {\n        this.current_token = this.lexer.next_token();\n        (0, _logger.debug)('next token', this.current_token);\n      }\n      return this.current_token;\n    }\n  }, {\n    key: 'peek',\n    value: function peek() {\n      if (this.peek_token == null) {\n        this.peek_token = this.lexer.next_token();\n      }\n\n      (0, _logger.debug)('next token from peek', this.peek_token);\n      return this.peek_token;\n    }\n  }, {\n    key: 'error',\n    value: function error(message) {\n      var line = this.lexer.text.split('\\n')[this.lexer.line];\n      var spacing = '';\n\n      for (var i = 0; i < this.lexer.col; i++) {\n        spacing += ' ';\n      }\n\n      throw Error('Parser error\\n' + line + '\\n' + spacing + '^\\nError at line: ' + (this.lexer.line + 1) + ' col: ' + (this.lexer.col + 1) + '\\n' + message);\n    }\n  }, {\n    key: 'eat',\n    value: function eat(token_type) {\n      if (this.next_token().type != token_type) {\n        this.error('Expected ' + token_type + ' found ' + JSON.stringify(this.current_token));\n      }\n    }\n  }, {\n    key: 'equation',\n    value: function equation() {\n      // equation : expr ( EQUAL expr )?\n      var lhs = this.expr();\n\n      if (this.peek().type != 'equal') {\n        return lhs;\n      } else {\n        this.next_token();\n      }\n\n      var rhs = this.expr();\n\n      return {\n        type: 'equation',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'expr',\n    value: function expr() {\n      // expr : operator\n\n      (0, _logger.debug)('expr');\n\n      this.peek();\n\n      if (this.peek_token.type == 'number' || this.peek_token.type == 'operator' || this.peek_token.type == 'variable' || this.peek_token.type == 'function' || this.peek_token.type == 'keyword' || this.peek_token.type == 'bracket') {\n        return this.operator();\n      }\n\n      if (this.peek_token.type == 'bracket' && this.peek_token.open == false) {\n        return null;\n      }\n\n      if (this.peek_token.type == 'EOF') {\n        this.next_token();\n        return null;\n      }\n\n      this.next_token();\n      this.error('Unexpected token: ' + JSON.stringify(this.current_token));\n    }\n  }, {\n    key: 'keyword',\n    value: function keyword() {\n      // keyword : KEYWORD\n      //         | fraction\n      //         | function\n\n      (0, _logger.debug)('keyword');\n\n      if (this.peek().type != 'keyword') {\n        throw Error('Expected keyword found ' + JSON.stringify(this.peek_token));\n      }\n\n      var kwd = this.peek_token.value;\n      kwd = kwd.toLowerCase();\n\n      (0, _logger.debug)('keyword -', kwd);\n\n      if (kwd == 'frac') {\n        return this.fraction();\n      }\n\n      if (kwd == 'sqrt') {\n        return this.sqrt();\n      }\n\n      if (this.functions.includes(kwd.toLowerCase())) {\n        return this.function();\n      }\n\n      this.eat('keyword');\n      return {\n        type: 'keyword',\n        value: this.current_token.value\n      };\n    }\n  }, {\n    key: 'sqrt',\n    value: function sqrt() {\n      // sqrt : SQRT (L_SQUARE_BRAC NUMBER R_SQUARE_BRAC)? GROUP\n      (0, _logger.debug)('sqrt');\n\n      this.eat('keyword');\n\n      if (this.current_token.value != 'sqrt') {\n        this.error('Expected sqrt found ' + JSON.stringify(this.current_token));\n      }\n\n      if (this.peek().value != '[') {\n        var content = this.group();\n\n        return {\n          type: 'function',\n          value: 'sqrt',\n          content: content\n        };\n      }\n\n      this.eat('bracket');\n      if (this.current_token.value != '[') {\n        this.error('Expected \"[\" bracket, found ' + JSON.stringify(this.current_token));\n      }\n\n      var base = this.number();\n\n      this.eat('bracket');\n      if (this.current_token.value != ']') {\n        this.error('Expected \"]\" bracket, found ' + JSON.stringify(this.current_token));\n      }\n\n      var value = this.group();\n\n      return {\n        type: 'operator',\n        operator: 'exponent',\n        lhs: value,\n        rhs: {\n          type: 'operator',\n          operator: 'divide',\n          lhs: {\n            type: 'number',\n            value: 1\n          },\n          rhs: base\n        }\n      };\n    }\n  }, {\n    key: 'fraction',\n    value: function fraction() {\n      // fraction : FRAC group group\n\n      (0, _logger.debug)('fraction');\n\n      this.eat('keyword');\n\n      if (this.current_token.value != 'frac') {\n        this.error('Expected fraction found ' + JSON.stringify(this.current_token));\n      }\n\n      var nominator = this.group();\n      var denominator = this.group();\n\n      return {\n        type: 'operator',\n        operator: 'divide',\n        lhs: nominator,\n        rhs: denominator\n      };\n    }\n  }, {\n    key: 'function',\n    value: function _function() {\n      // function : FUNCTION ( group | number )\n\n      (0, _logger.debug)('function');\n\n      this.eat('keyword');\n      var value = this.current_token.value;\n\n      var content = void 0;\n      if (this.peek().type == 'bracket') {\n        content = this.group();\n      } else {\n        content = this.number();\n      }\n\n      return {\n        type: 'function',\n        value: value,\n        content: content\n      };\n    }\n  }, {\n    key: 'group',\n    value: function group() {\n      // group : LBRACKET expr RBRACKET\n\n      (0, _logger.debug)('start group');\n\n      this.eat('bracket');\n      if (this.current_token.open != true) {\n        this.error('Expected opening bracket found ' + this.current_token);\n      }\n\n      var content = this.expr();\n\n      this.eat('bracket');\n      if (this.current_token.open != false) {\n        this.error('Expected closing bracket found ' + this.current_token);\n      }\n\n      (0, _logger.debug)('end group');\n\n      return content;\n    }\n  }, {\n    key: 'operator',\n    value: function operator() {\n      // operator : operator_term ((PLUS | MINUS) operator)?\n      (0, _logger.debug)('operator left');\n      var lhs = this.operator_multiply();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'plus' && op.value != 'minus') {\n        (0, _logger.debug)('operator only left side');\n        return lhs;\n      }\n\n      // Operator token\n      this.next_token();\n\n      (0, _logger.debug)('operator right');\n      var rhs = this.operator();\n\n      return {\n        type: 'operator',\n        operator: op.value,\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_multiply',\n    value: function operator_multiply() {\n      // operator_multiply : (operator_divide | GROUP) ( (MULTIPLY operator_multiply) | number )?\n\n      (0, _logger.debug)('op mul left');\n\n      var lhs = this.operator_divide();\n\n      var op = this.peek();\n\n      if (op.type == 'number' || op.type == 'variable' || op.type == 'keyword' || op.type == 'bracket' && op.value == '(') {\n        op = {\n          type: 'operator',\n          value: 'multiply'\n        };\n      } else if (op.type != 'operator' || op.value != 'multiply' && op.value != 'divide') {\n        (0, _logger.debug)('term only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('op mul right');\n\n      var rhs = this.operator_multiply();\n\n      return {\n        type: 'operator',\n        operator: op.value,\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_divide',\n    value: function operator_divide() {\n      // operator_divide : operator_mod operator_divide_prime\n\n      (0, _logger.debug)('operator_divide');\n\n      var lhs = this.operator_mod();\n\n      var divideResult = this.operator_divide_prime(lhs);\n\n      return divideResult;\n    }\n  }, {\n    key: 'operator_divide_prime',\n    value: function operator_divide_prime(lhs) {\n      // operator_divide_prime : epsilon | DIVIDE operator_mod operator_divide_prime\n\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'divide') {\n        (0, _logger.debug)('operator_divide_prime - epsilon');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('operator_divide_prime - next operator');\n\n      var rhs = this.operator_mod();\n\n      return this.operator_divide_prime({\n        type: 'operator',\n        operator: 'divide',\n        lhs: lhs,\n        rhs: rhs\n      });\n    }\n  }, {\n    key: 'operator_mod',\n    value: function operator_mod() {\n      // operator_mod : operator_exp ( MODULUS operator_mod )?\n\n      (0, _logger.debug)('modulus left');\n\n      var lhs = this.operator_exp();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'modulus') {\n        (0, _logger.debug)('modulus only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      (0, _logger.debug)('modulus right');\n\n      var rhs = this.operator_mod();\n\n      return {\n        type: 'operator',\n        operator: 'modulus',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'operator_exp',\n    value: function operator_exp() {\n      // operator_exp : subscript ( EXPONENT operator_exp )?\n\n      var lhs = this.subscript();\n      var op = this.peek();\n\n      if (op.type != 'operator' || op.value != 'exponent') {\n        (0, _logger.debug)('modulus only left side');\n        return lhs;\n      } else {\n        // Operator token\n        this.next_token();\n      }\n\n      var rhs = this.operator_exp();\n\n      return {\n        type: 'operator',\n        operator: 'exponent',\n        lhs: lhs,\n        rhs: rhs\n      };\n    }\n  }, {\n    key: 'variable',\n    value: function variable() {\n      this.eat('variable');\n\n      return {\n        type: 'variable',\n        value: this.current_token.value\n      };\n    }\n  }, {\n    key: 'subscript',\n    value: function subscript() {\n      // subscript : number ( SUBSCRIPT subscript )?\n      var base_num = this.number();\n\n      if (this.peek().type == 'underscore') {\n        this.eat('underscore');\n\n        var sub_value = this.subscript();\n\n        return {\n          type: 'subscript',\n          base: base_num,\n          subscript: sub_value\n        };\n      }\n\n      return base_num;\n    }\n  }, {\n    key: 'number',\n    value: function number() {\n      // number : NUMBER\n      //        | uni_operator\n      //        | variable\n      //        | keyword\n      //        | symbol\n      //        | group\n\n      (0, _logger.debug)('number');\n\n      this.peek();\n\n      if (this.peek_token.type == 'number') {\n        this.next_token();\n        return {\n          type: this.current_token.type,\n          value: this.current_token.value\n        };\n      }\n\n      if (this.peek_token.type == 'operator') {\n        return this.uni_operator();\n      }\n\n      if (this.peek_token.type == 'variable') {\n        return this.variable();\n      }\n\n      if (this.peek_token.type == 'keyword') {\n        return this.keyword();\n      }\n\n      if (this.peek_token.type == 'bracket') {\n        return this.group();\n      }\n\n      this.next_token();\n      this.error('Expected number, variable, function, group, or + - found ' + JSON.stringify(this.current_token));\n    }\n  }, {\n    key: 'uni_operator',\n    value: function uni_operator() {\n      this.eat('operator');\n      if (this.current_token.value == 'plus' || this.current_token.value == 'minus') {\n        var prefix = this.current_token.value;\n        var value = this.number();\n\n        if (value.type == 'number') {\n          return {\n            type: 'number',\n            value: prefix == 'minus' ? -value.value : value.value\n          };\n        }\n\n        return {\n          type: 'uni-operator',\n          operator: prefix,\n          value: value\n        };\n      }\n    }\n  }]);\n\n  return ParserLatex;\n}();\n\nexports.default = ParserLatex;"],"mappings":"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"},"metadata":{},"sourceType":"script"}