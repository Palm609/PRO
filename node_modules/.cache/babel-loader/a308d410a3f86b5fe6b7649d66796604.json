{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar\n  } = _ref;\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR null if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n\n  return typed('intersect', {\n    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n\n      if (!_4d(plane)) {\n        throw new TypeError('Array with 4 numbers expected as third argument');\n      }\n\n      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n    },\n    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {\n      if (w.length === 2) {\n        if (!_2d(w)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n        }\n\n        return _intersect2d(w, x, y, z);\n      } else if (w.length === 3) {\n        if (!_3d(w)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n        }\n\n        if (!_3d(z)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n        }\n\n        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n      } else {\n        throw new TypeError('Arrays with two or thee dimensional points expected');\n      }\n    },\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      return matrix(this(x.valueOf(), y.valueOf(), plane.valueOf()));\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      return matrix(this(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));\n    }\n  });\n\n  function _isNumeric(a) {\n    // intersect supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n\n  function _2d(x) {\n    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);\n  }\n\n  function _3d(x) {\n    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);\n  }\n\n  function _4d(x) {\n    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);\n  }\n\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n\n    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});","map":{"version":3,"names":["isBigNumber","factory","name","dependencies","createIntersect","_ref","typed","config","abs","add","addScalar","matrix","multiply","multiplyScalar","divideScalar","subtract","smaller","equalScalar","ArrayArrayArray","x","y","plane","_3d","TypeError","_4d","_intersectLinePlane","ArrayArrayArrayArray","w","z","length","_2d","_intersect2d","_intersect3d","MatrixMatrixMatrix","valueOf","MatrixMatrixMatrixMatrix","_isNumeric","a","p1a","p1b","p2a","p2b","o1","o2","d1","d2","det","epsilon","d20o11","d21o10","d20o21","d21o20","t","_intersect3dHelper","b","c","d","e","f","g","h","i","j","k","l","add1","add2","add3","x1","y1","z1","x2","y2","z2","x3","y3","z3","x4","y4","z4","d1343","d4321","d1321","d4343","d2121","ta","tb","pax","pay","paz","pbx","pby","pbz","x1x","x2x","y1y","y2y","z1z","z2z","px","py","pz"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/ReactMumer-main/node_modules/mathjs/lib/esm/function/geometry/intersect.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar\n  } = _ref;\n\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR null if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n\n      if (!_4d(plane)) {\n        throw new TypeError('Array with 4 numbers expected as third argument');\n      }\n\n      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n    },\n    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {\n      if (w.length === 2) {\n        if (!_2d(w)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n        }\n\n        return _intersect2d(w, x, y, z);\n      } else if (w.length === 3) {\n        if (!_3d(w)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n        }\n\n        if (!_3d(z)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n        }\n\n        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n      } else {\n        throw new TypeError('Arrays with two or thee dimensional points expected');\n      }\n    },\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      return matrix(this(x.valueOf(), y.valueOf(), plane.valueOf()));\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      return matrix(this(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));\n    }\n  });\n\n  function _isNumeric(a) {\n    // intersect supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n\n  function _2d(x) {\n    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);\n  }\n\n  function _3d(x) {\n    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);\n  }\n\n  function _4d(x) {\n    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);\n  }\n\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n\n    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,EAA2B,KAA3B,EAAkC,WAAlC,EAA+C,QAA/C,EAAyD,UAAzD,EAAqE,gBAArE,EAAuF,cAAvF,EAAuG,UAAvG,EAAmH,SAAnH,EAA8H,aAA9H,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;EAChF,IAAI;IACFC,KADE;IAEFC,MAFE;IAGFC,GAHE;IAIFC,GAJE;IAKFC,SALE;IAMFC,MANE;IAOFC,QAPE;IAQFC,cARE;IASFC,YATE;IAUFC,QAVE;IAWFC,OAXE;IAYFC;EAZE,IAaAZ,IAbJ;EAeA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOC,KAAK,CAAC,WAAD,EAAc;IACxB,uBAAuB,SAASY,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+BC,KAA/B,EAAsC;MAC3D,IAAI,CAACC,GAAG,CAACH,CAAD,CAAR,EAAa;QACX,MAAM,IAAII,SAAJ,CAAc,gEAAd,CAAN;MACD;;MAED,IAAI,CAACD,GAAG,CAACF,CAAD,CAAR,EAAa;QACX,MAAM,IAAIG,SAAJ,CAAc,iEAAd,CAAN;MACD;;MAED,IAAI,CAACC,GAAG,CAACH,KAAD,CAAR,EAAiB;QACf,MAAM,IAAIE,SAAJ,CAAc,iDAAd,CAAN;MACD;;MAED,OAAOE,mBAAmB,CAACN,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,EAAmBC,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC,EAAqCC,KAAK,CAAC,CAAD,CAA1C,EAA+CA,KAAK,CAAC,CAAD,CAApD,EAAyDA,KAAK,CAAC,CAAD,CAA9D,EAAmEA,KAAK,CAAC,CAAD,CAAxE,CAA1B;IACD,CAfuB;IAgBxB,8BAA8B,SAASK,oBAAT,CAA8BC,CAA9B,EAAiCR,CAAjC,EAAoCC,CAApC,EAAuCQ,CAAvC,EAA0C;MACtE,IAAID,CAAC,CAACE,MAAF,KAAa,CAAjB,EAAoB;QAClB,IAAI,CAACC,GAAG,CAACH,CAAD,CAAR,EAAa;UACX,MAAM,IAAIJ,SAAJ,CAAc,gEAAd,CAAN;QACD;;QAED,IAAI,CAACO,GAAG,CAACX,CAAD,CAAR,EAAa;UACX,MAAM,IAAII,SAAJ,CAAc,iEAAd,CAAN;QACD;;QAED,IAAI,CAACO,GAAG,CAACV,CAAD,CAAR,EAAa;UACX,MAAM,IAAIG,SAAJ,CAAc,gEAAd,CAAN;QACD;;QAED,IAAI,CAACO,GAAG,CAACF,CAAD,CAAR,EAAa;UACX,MAAM,IAAIL,SAAJ,CAAc,iEAAd,CAAN;QACD;;QAED,OAAOQ,YAAY,CAACJ,CAAD,EAAIR,CAAJ,EAAOC,CAAP,EAAUQ,CAAV,CAAnB;MACD,CAlBD,MAkBO,IAAID,CAAC,CAACE,MAAF,KAAa,CAAjB,EAAoB;QACzB,IAAI,CAACP,GAAG,CAACK,CAAD,CAAR,EAAa;UACX,MAAM,IAAIJ,SAAJ,CAAc,gEAAd,CAAN;QACD;;QAED,IAAI,CAACD,GAAG,CAACH,CAAD,CAAR,EAAa;UACX,MAAM,IAAII,SAAJ,CAAc,iEAAd,CAAN;QACD;;QAED,IAAI,CAACD,GAAG,CAACF,CAAD,CAAR,EAAa;UACX,MAAM,IAAIG,SAAJ,CAAc,gEAAd,CAAN;QACD;;QAED,IAAI,CAACD,GAAG,CAACM,CAAD,CAAR,EAAa;UACX,MAAM,IAAIL,SAAJ,CAAc,iEAAd,CAAN;QACD;;QAED,OAAOS,YAAY,CAACL,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,EAAmBR,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC,EAAqCC,CAAC,CAAC,CAAD,CAAtC,EAA2CA,CAAC,CAAC,CAAD,CAA5C,EAAiDA,CAAC,CAAC,CAAD,CAAlD,EAAuDQ,CAAC,CAAC,CAAD,CAAxD,EAA6DA,CAAC,CAAC,CAAD,CAA9D,EAAmEA,CAAC,CAAC,CAAD,CAApE,CAAnB;MACD,CAlBM,MAkBA;QACL,MAAM,IAAIL,SAAJ,CAAc,qDAAd,CAAN;MACD;IACF,CAxDuB;IAyDxB,0BAA0B,SAASU,kBAAT,CAA4Bd,CAA5B,EAA+BC,CAA/B,EAAkCC,KAAlC,EAAyC;MACjE,OAAOV,MAAM,CAAC,KAAKQ,CAAC,CAACe,OAAF,EAAL,EAAkBd,CAAC,CAACc,OAAF,EAAlB,EAA+Bb,KAAK,CAACa,OAAN,EAA/B,CAAD,CAAb;IACD,CA3DuB;IA4DxB,kCAAkC,SAASC,wBAAT,CAAkCR,CAAlC,EAAqCR,CAArC,EAAwCC,CAAxC,EAA2CQ,CAA3C,EAA8C;MAC9E;MACA,OAAOjB,MAAM,CAAC,KAAKgB,CAAC,CAACO,OAAF,EAAL,EAAkBf,CAAC,CAACe,OAAF,EAAlB,EAA+Bd,CAAC,CAACc,OAAF,EAA/B,EAA4CN,CAAC,CAACM,OAAF,EAA5C,CAAD,CAAb;IACD;EA/DuB,CAAd,CAAZ;;EAkEA,SAASE,UAAT,CAAoBC,CAApB,EAAuB;IACrB;IACA,OAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBrC,WAAW,CAACqC,CAAD,CAA3C;EACD;;EAED,SAASP,GAAT,CAAaX,CAAb,EAAgB;IACd,OAAOA,CAAC,CAACU,MAAF,KAAa,CAAb,IAAkBO,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAA5B,IAAsCiB,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAAvD;EACD;;EAED,SAASG,GAAT,CAAaH,CAAb,EAAgB;IACd,OAAOA,CAAC,CAACU,MAAF,KAAa,CAAb,IAAkBO,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAA5B,IAAsCiB,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAAhD,IAA0DiB,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAA3E;EACD;;EAED,SAASK,GAAT,CAAaL,CAAb,EAAgB;IACd,OAAOA,CAAC,CAACU,MAAF,KAAa,CAAb,IAAkBO,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAA5B,IAAsCiB,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAAhD,IAA0DiB,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAApE,IAA8EiB,UAAU,CAACjB,CAAC,CAAC,CAAD,CAAF,CAA/F;EACD;;EAED,SAASY,YAAT,CAAsBO,GAAtB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0C;IACxC,IAAIC,EAAE,GAAGJ,GAAT;IACA,IAAIK,EAAE,GAAGH,GAAT;IACA,IAAII,EAAE,GAAG7B,QAAQ,CAAC2B,EAAD,EAAKH,GAAL,CAAjB;IACA,IAAIM,EAAE,GAAG9B,QAAQ,CAAC4B,EAAD,EAAKF,GAAL,CAAjB;IACA,IAAIK,GAAG,GAAG/B,QAAQ,CAACF,cAAc,CAAC+B,EAAE,CAAC,CAAD,CAAH,EAAQC,EAAE,CAAC,CAAD,CAAV,CAAf,EAA+BhC,cAAc,CAACgC,EAAE,CAAC,CAAD,CAAH,EAAQD,EAAE,CAAC,CAAD,CAAV,CAA7C,CAAlB;;IAEA,IAAI5B,OAAO,CAACR,GAAG,CAACsC,GAAD,CAAJ,EAAWvC,MAAM,CAACwC,OAAlB,CAAX,EAAuC;MACrC,OAAO,IAAP;IACD;;IAED,IAAIC,MAAM,GAAGnC,cAAc,CAACgC,EAAE,CAAC,CAAD,CAAH,EAAQH,EAAE,CAAC,CAAD,CAAV,CAA3B;IACA,IAAIO,MAAM,GAAGpC,cAAc,CAACgC,EAAE,CAAC,CAAD,CAAH,EAAQH,EAAE,CAAC,CAAD,CAAV,CAA3B;IACA,IAAIQ,MAAM,GAAGrC,cAAc,CAACgC,EAAE,CAAC,CAAD,CAAH,EAAQF,EAAE,CAAC,CAAD,CAAV,CAA3B;IACA,IAAIQ,MAAM,GAAGtC,cAAc,CAACgC,EAAE,CAAC,CAAD,CAAH,EAAQF,EAAE,CAAC,CAAD,CAAV,CAA3B;IACA,IAAIS,CAAC,GAAGtC,YAAY,CAACJ,SAAS,CAACK,QAAQ,CAACA,QAAQ,CAACiC,MAAD,EAASC,MAAT,CAAT,EAA2BC,MAA3B,CAAT,EAA6CC,MAA7C,CAAV,EAAgEL,GAAhE,CAApB;IACA,OAAOrC,GAAG,CAACG,QAAQ,CAACgC,EAAD,EAAKQ,CAAL,CAAT,EAAkBV,EAAlB,CAAV;EACD;;EAED,SAASW,kBAAT,CAA4BhB,CAA5B,EAA+BiB,CAA/B,EAAkCC,CAAlC,EAAqCC,CAArC,EAAwCC,CAAxC,EAA2CC,CAA3C,EAA8CC,CAA9C,EAAiDC,CAAjD,EAAoDC,CAApD,EAAuDC,CAAvD,EAA0DC,CAA1D,EAA6DC,CAA7D,EAAgE;IAC9D;IACA,IAAIC,IAAI,GAAGpD,cAAc,CAACE,QAAQ,CAACsB,CAAD,EAAIiB,CAAJ,CAAT,EAAiBvC,QAAQ,CAACwC,CAAD,EAAIC,CAAJ,CAAzB,CAAzB;IACA,IAAIU,IAAI,GAAGrD,cAAc,CAACE,QAAQ,CAAC0C,CAAD,EAAIC,CAAJ,CAAT,EAAiB3C,QAAQ,CAAC4C,CAAD,EAAIC,CAAJ,CAAzB,CAAzB;IACA,IAAIO,IAAI,GAAGtD,cAAc,CAACE,QAAQ,CAAC8C,CAAD,EAAIC,CAAJ,CAAT,EAAiB/C,QAAQ,CAACgD,CAAD,EAAIC,CAAJ,CAAzB,CAAzB;IACA,OAAOtD,SAAS,CAACA,SAAS,CAACuD,IAAD,EAAOC,IAAP,CAAV,EAAwBC,IAAxB,CAAhB;EACD;;EAED,SAASnC,YAAT,CAAsBoC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0CC,EAA1C,EAA8CC,EAA9C,EAAkDC,EAAlD,EAAsDC,EAAtD,EAA0DC,EAA1D,EAA8DC,EAA9D,EAAkEC,EAAlE,EAAsE;IACpE,IAAIC,KAAK,GAAG3B,kBAAkB,CAACe,EAAD,EAAKM,EAAL,EAASG,EAAT,EAAaH,EAAb,EAAiBL,EAAjB,EAAqBM,EAArB,EAAyBG,EAAzB,EAA6BH,EAA7B,EAAiCL,EAAjC,EAAqCM,EAArC,EAAyCG,EAAzC,EAA6CH,EAA7C,CAA9B;;IAEA,IAAIK,KAAK,GAAG5B,kBAAkB,CAACwB,EAAD,EAAKH,EAAL,EAASH,EAAT,EAAaH,EAAb,EAAiBU,EAAjB,EAAqBH,EAArB,EAAyBH,EAAzB,EAA6BH,EAA7B,EAAiCU,EAAjC,EAAqCH,EAArC,EAAyCH,EAAzC,EAA6CH,EAA7C,CAA9B;;IAEA,IAAIY,KAAK,GAAG7B,kBAAkB,CAACe,EAAD,EAAKM,EAAL,EAASH,EAAT,EAAaH,EAAb,EAAiBC,EAAjB,EAAqBM,EAArB,EAAyBH,EAAzB,EAA6BH,EAA7B,EAAiCC,EAAjC,EAAqCM,EAArC,EAAyCH,EAAzC,EAA6CH,EAA7C,CAA9B;;IAEA,IAAIa,KAAK,GAAG9B,kBAAkB,CAACwB,EAAD,EAAKH,EAAL,EAASG,EAAT,EAAaH,EAAb,EAAiBI,EAAjB,EAAqBH,EAArB,EAAyBG,EAAzB,EAA6BH,EAA7B,EAAiCI,EAAjC,EAAqCH,EAArC,EAAyCG,EAAzC,EAA6CH,EAA7C,CAA9B;;IAEA,IAAIQ,KAAK,GAAG/B,kBAAkB,CAACkB,EAAD,EAAKH,EAAL,EAASG,EAAT,EAAaH,EAAb,EAAiBI,EAAjB,EAAqBH,EAArB,EAAyBG,EAAzB,EAA6BH,EAA7B,EAAiCI,EAAjC,EAAqCH,EAArC,EAAyCG,EAAzC,EAA6CH,EAA7C,CAA9B;;IAEA,IAAIe,EAAE,GAAGvE,YAAY,CAACC,QAAQ,CAACF,cAAc,CAACmE,KAAD,EAAQC,KAAR,CAAf,EAA+BpE,cAAc,CAACqE,KAAD,EAAQC,KAAR,CAA7C,CAAT,EAAuEpE,QAAQ,CAACF,cAAc,CAACuE,KAAD,EAAQD,KAAR,CAAf,EAA+BtE,cAAc,CAACoE,KAAD,EAAQA,KAAR,CAA7C,CAA/E,CAArB;IACA,IAAIK,EAAE,GAAGxE,YAAY,CAACJ,SAAS,CAACsE,KAAD,EAAQnE,cAAc,CAACwE,EAAD,EAAKJ,KAAL,CAAtB,CAAV,EAA8CE,KAA9C,CAArB;IACA,IAAII,GAAG,GAAG7E,SAAS,CAAC0D,EAAD,EAAKvD,cAAc,CAACwE,EAAD,EAAKtE,QAAQ,CAACwD,EAAD,EAAKH,EAAL,CAAb,CAAnB,CAAnB;IACA,IAAIoB,GAAG,GAAG9E,SAAS,CAAC2D,EAAD,EAAKxD,cAAc,CAACwE,EAAD,EAAKtE,QAAQ,CAACyD,EAAD,EAAKH,EAAL,CAAb,CAAnB,CAAnB;IACA,IAAIoB,GAAG,GAAG/E,SAAS,CAAC4D,EAAD,EAAKzD,cAAc,CAACwE,EAAD,EAAKtE,QAAQ,CAAC0D,EAAD,EAAKH,EAAL,CAAb,CAAnB,CAAnB;IACA,IAAIoB,GAAG,GAAGhF,SAAS,CAACgE,EAAD,EAAK7D,cAAc,CAACyE,EAAD,EAAKvE,QAAQ,CAAC8D,EAAD,EAAKH,EAAL,CAAb,CAAnB,CAAnB;IACA,IAAIiB,GAAG,GAAGjF,SAAS,CAACiE,EAAD,EAAK9D,cAAc,CAACyE,EAAD,EAAKvE,QAAQ,CAAC+D,EAAD,EAAKH,EAAL,CAAb,CAAnB,CAAnB;IACA,IAAIiB,GAAG,GAAGlF,SAAS,CAACkE,EAAD,EAAK/D,cAAc,CAACyE,EAAD,EAAKvE,QAAQ,CAACgE,EAAD,EAAKH,EAAL,CAAb,CAAnB,CAAnB;;IAEA,IAAI3D,WAAW,CAACsE,GAAD,EAAMG,GAAN,CAAX,IAAyBzE,WAAW,CAACuE,GAAD,EAAMG,GAAN,CAApC,IAAkD1E,WAAW,CAACwE,GAAD,EAAMG,GAAN,CAAjE,EAA6E;MAC3E,OAAO,CAACL,GAAD,EAAMC,GAAN,EAAWC,GAAX,CAAP;IACD,CAFD,MAEO;MACL,OAAO,IAAP;IACD;EACF;;EAED,SAAShE,mBAAT,CAA6B2C,EAA7B,EAAiCC,EAAjC,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CC,EAA7C,EAAiDC,EAAjD,EAAqDtD,CAArD,EAAwDC,CAAxD,EAA2DQ,CAA3D,EAA8D2B,CAA9D,EAAiE;IAC/D,IAAIsC,GAAG,GAAGhF,cAAc,CAACuD,EAAD,EAAKjD,CAAL,CAAxB;IACA,IAAI2E,GAAG,GAAGjF,cAAc,CAAC0D,EAAD,EAAKpD,CAAL,CAAxB;IACA,IAAI4E,GAAG,GAAGlF,cAAc,CAACwD,EAAD,EAAKjD,CAAL,CAAxB;IACA,IAAI4E,GAAG,GAAGnF,cAAc,CAAC2D,EAAD,EAAKpD,CAAL,CAAxB;IACA,IAAI6E,GAAG,GAAGpF,cAAc,CAACyD,EAAD,EAAK1C,CAAL,CAAxB;IACA,IAAIsE,GAAG,GAAGrF,cAAc,CAAC4D,EAAD,EAAK7C,CAAL,CAAxB;IACA,IAAIwB,CAAC,GAAGtC,YAAY,CAACC,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACwC,CAAD,EAAIsC,GAAJ,CAAT,EAAmBE,GAAnB,CAAT,EAAkCE,GAAlC,CAAT,EAAiDlF,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACL,SAAS,CAACA,SAAS,CAACoF,GAAD,EAAME,GAAN,CAAV,EAAsBE,GAAtB,CAAV,EAAsCL,GAAtC,CAAT,EAAqDE,GAArD,CAAT,EAAoEE,GAApE,CAAzD,CAApB;IACA,IAAIE,EAAE,GAAGzF,SAAS,CAAC0D,EAAD,EAAKvD,cAAc,CAACuC,CAAD,EAAIrC,QAAQ,CAACwD,EAAD,EAAKH,EAAL,CAAZ,CAAnB,CAAlB;IACA,IAAIgC,EAAE,GAAG1F,SAAS,CAAC2D,EAAD,EAAKxD,cAAc,CAACuC,CAAD,EAAIrC,QAAQ,CAACyD,EAAD,EAAKH,EAAL,CAAZ,CAAnB,CAAlB;IACA,IAAIgC,EAAE,GAAG3F,SAAS,CAAC4D,EAAD,EAAKzD,cAAc,CAACuC,CAAD,EAAIrC,QAAQ,CAAC0D,EAAD,EAAKH,EAAL,CAAZ,CAAnB,CAAlB;IACA,OAAO,CAAC6B,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAP,CAX+D,CAW1C;IACrB;IACA;EACD;AACF,CAnMkD,CAA5C"},"metadata":{},"sourceType":"module"}