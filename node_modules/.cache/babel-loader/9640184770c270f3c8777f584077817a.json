{"ast":null,"code":"/**\n * @license Fraction.js v4.0.12 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n(function (root) {\n  \"use strict\"; // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n\n  var MAX_CYCLE_LEN = 2000; // Parsed data to avoid calling \"new\" all the time\n\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n    function errorConstructor() {\n      var temp = Error.apply(this, arguments);\n      temp['name'] = this['name'] = name;\n      this['stack'] = temp['stack'];\n      this['message'] = temp['message'];\n    }\n    /**\n     * Error constructor\n     *\n     * @constructor\n     */\n\n\n    function IntermediateInheritor() {}\n\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function (p1, p2) {\n    var n = 0,\n        d = 1,\n        s = 1;\n    var v = 0,\n        w = 0,\n        x = 0,\n        y = 1,\n        z = 1;\n    var A = 0,\n        B = 1;\n    var C = 1,\n        D = 1;\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else switch (typeof p1) {\n      case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1) n *= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1) d = p1[1];\n          } else {\n            throwInvalidParam();\n          }\n\n          s = n * d;\n          break;\n        }\n\n      case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) {\n            // check for != 0, scale would become NaN (log(0)), which converges really slow\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1 /= z;\n            } // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n\n                break;\n              } else {\n                if (p1 > M) {\n                  A += C;\n                  B += D;\n                } else {\n                  C += A;\n                  D += B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n\n            n *= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n\n          break;\n        }\n\n      case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n          if (B === null) throwInvalidParam();\n\n          if (B[A] === '-') {\n            // Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {\n            // Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) {\n            // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') {\n            // Check if it's a decimal number\n            if (B[A] !== '.') {\n              // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n\n            A++; // Check for decimal places\n\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            } // Check for repeating places\n\n\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A += 3;\n            }\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') {\n            // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A += 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') {\n            // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A += 5;\n          }\n\n          if (B.length <= A) {\n            // Check for more tokens on the stack\n            d = y * z;\n            s =\n            /* void */\n            n = x + d * v + z * w;\n            break;\n          }\n          /* Fall through on error */\n\n        }\n\n      default:\n        throwInvalidParam();\n    }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n    var r = 1;\n\n    for (; e > 0; b = b * b % m, e >>= 1) {\n      if (e & 1) {\n        r = r * b % m;\n      }\n    }\n\n    return r;\n  }\n\n  function cycleLen(n, d) {\n    for (; d % 2 === 0; d /= 2) {}\n\n    for (; d % 5 === 0; d /= 5) {}\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0; // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n      if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n\n    return t;\n  }\n\n  function cycleStart(n, d, len) {\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) {\n      // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n      if (rem1 === rem2) return t;\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n\n    return 0;\n  }\n\n  function gcd(a, b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    while (1) {\n      a %= b;\n      if (!a) return b;\n      b %= a;\n      if (!b) return a;\n    }\n  }\n\n  ;\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n\n  function Fraction(a, b) {\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n\n\n  Fraction['REDUCE'] = 1;\n  Fraction.prototype = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function () {\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function () {\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function (a, b) {\n      parse(a, b);\n      return new Fraction(this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function (a, b) {\n      parse(a, b);\n      return new Fraction(this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function (a, b) {\n      parse(a, b);\n      return new Fraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function (a, b) {\n      parse(a, b);\n      return new Fraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"], this[\"d\"] * P[\"n\"]);\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function () {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function (a, b) {\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n\n\n      return new Fraction(this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function (a, b) {\n      parse(a, b); // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function (a, b) {\n      parse(a, b); // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction();\n      }\n\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function () {\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function (m) {\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function (a, b) {\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function (a, b) {\n      parse(a, b);\n      var t = this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"];\n      return (0 < t) - (t < 0);\n    },\n    \"simplify\": function (eps) {\n      // First naive implementation, needs improvement\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      var cont = this['abs']()['toContinued']();\n      eps = eps || 0.001;\n\n      function rec(a) {\n        if (a.length === 1) return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n\n      for (var i = 0; i < cont.length; i++) {\n        var tmp = rec(cont.slice(0, i + 1));\n\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function (a, b) {\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || this[\"n\"] * P[\"d\"] % (P[\"n\"] * this[\"d\"]));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function () {\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function (excludeWhole) {\n      var whole,\n          str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function (excludeWhole) {\n      var whole,\n          str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function () {\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function (dec) {\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N /= g;\n        D /= g;\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n      str += N / D | 0;\n      N %= D;\n      N *= 10;\n      if (N) str += \".\";\n\n      if (cycLen) {\n        for (var i = cycOff; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n\n        str += \"(\";\n\n        for (var i = cycLen; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function () {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", {\n      'value': true\n    });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n})(this);","map":{"version":3,"names":["root","MAX_CYCLE_LEN","P","createError","name","errorConstructor","temp","Error","apply","arguments","IntermediateInheritor","prototype","DivisionByZero","Fraction","InvalidParameter","assign","n","s","isNaN","parseInt","throwInvalidParam","parse","p1","p2","d","v","w","x","y","z","A","B","C","D","N","M","undefined","Math","pow","floor","log","LN10","NaN","match","length","abs","modpow","b","e","m","r","cycleLen","rem","t","cycleStart","len","rem1","rem2","gcd","a","places","ceil","round","eps","cont","rec","slice","i","tmp","valueOf","excludeWhole","whole","str","res","push","dec","g","cycLen","cycOff","define","exports","Object","defineProperty","module"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/ReactMumer-main/node_modules/fraction.js/fraction.js"],"sourcesContent":["/**\n * @license Fraction.js v4.0.12 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function createError(name) {\n\n    function errorConstructor() {\n      var temp = Error.apply(this, arguments);\n      temp['name'] = this['name'] = name;\n      this['stack'] = temp['stack'];\n      this['message'] = temp['message'];\n    }\n\n    /**\n     * Error constructor\n     *\n     * @constructor\n     */\n    function IntermediateInheritor() { }\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');\n  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throwInvalidParam();\n    }\n    return n * s;\n  }\n\n  function throwInvalidParam() {\n    throw new InvalidParameter();\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n *= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throwInvalidParam();\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1 /= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A += C;\n                    B += D;\n                  } else {\n                    C += A;\n                    D += B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n *= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throwInvalidParam();\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A += 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A += 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A += 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throwInvalidParam();\n      }\n\n    if (d === 0) {\n      throw new DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d /= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d /= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a %= b;\n      if (!a)\n        return b;\n      b %= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    if (Fraction['REDUCE']) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse a\n    } else {\n      a = 1;\n    }\n\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  }\n\n  /**\n   * Boolean global variable to be able to disable automatic reduction of the fraction\n   *\n   */\n  Fraction['REDUCE'] = 1;\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return new Fraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return new Fraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return new Fraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return new Fraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return new Fraction;\n      }\n      return new Fraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return new Fraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return new Fraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(m) {\n\n      if (m < 0) {\n        return new Fraction(Math.pow(this['s'] * this[\"d\"], -m), Math.pow(this[\"n\"], -m));\n      } else {\n        return new Fraction(Math.pow(this['s'] * this[\"n\"], m), Math.pow(this[\"d\"], m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      // First naive implementation, needs improvement\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      var cont = this['abs']()['toContinued']();\n\n      eps = eps || 0.001;\n\n      function rec(a) {\n        if (a.length === 1)\n          return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n\n      for (var i = 0; i < cont.length; i++) {\n        var tmp = rec(cont.slice(0, i + 1));\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var g;\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      if (!Fraction['REDUCE']) {\n        g = gcd(N, D);\n        N /= g;\n        D /= g;\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] === -1 ? \"-\" : \"\";\n\n      str += N / D | 0;\n\n      N %= D;\n      N *= 10;\n\n      if (N)\n        str += \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \"(\";\n        for (var i = cycLen; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function() {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}