{"ast":null,"code":"// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nimport { isFraction, isNode, isOperatorNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createUtil } from './util.js';\nimport { noBignumber, noFraction } from '../../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    fraction,\n    bignumber,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  function simplifyConstant(expr, options) {\n    var res = foldFraction(expr, options);\n    return isNode(res) ? res : _toNode(res);\n  }\n\n  function _eval(fnname, args, options) {\n    try {\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(function (x) {\n        if (isFraction(x)) {\n          return x.valueOf();\n        }\n\n        return x;\n      });\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    }\n  }); // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n\n      return _exactFraction(s.re, options);\n    }\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n\n  function foldOp(fn, args, makeNode, options) {\n    return args.reduce(function (a, b) {\n      if (!isNode(a) && !isNode(b)) {\n        try {\n          return _eval(fn, [a, b], options);\n        } catch (ignoreandcontinue) {}\n\n        a = _toNode(a);\n        b = _toNode(b);\n      } else if (!isNode(a)) {\n        a = _toNode(a);\n      } else if (!isNode(b)) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  } // destroys the original node and returns a folded one\n\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n\n      case 'ConstantNode':\n        if (typeof node.value === 'number' || !isNaN(node.value)) {\n          return _toNumber(node.value, options);\n        }\n\n        return node;\n\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontine) {}\n            } // Convert all args to nodes and construct a symbolic function call\n\n\n            args = args.map(function (arg) {\n              return isNode(arg) ? arg : _toNode(arg);\n            });\n            return new FunctionNode(node.name, args);\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n\n          var _args;\n\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node)) {\n            _args = allChildren(node);\n            _args = _args.map(arg => foldFraction(arg, options));\n\n            if (isCommutative(fn)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n\n          return res;\n        }\n\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n\n      case 'AccessorNode':\n      /* falls through */\n\n      case 'ArrayNode':\n      /* falls through */\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'IndexNode':\n      /* falls through */\n\n      case 'ObjectNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n\n  return simplifyConstant;\n});","map":{"version":3,"names":["isFraction","isNode","isOperatorNode","factory","createUtil","noBignumber","noFraction","name","dependencies","createSimplifyConstant","_ref","typed","config","mathWithTransform","fraction","bignumber","ConstantNode","OperatorNode","FunctionNode","SymbolNode","isCommutative","isAssociative","allChildren","createMakeNodeFunction","simplifyConstant","expr","options","res","foldFraction","_toNode","_eval","fnname","args","_toNumber","apply","ignore","map","x","valueOf","Fraction","_fractionToNode","number","n","unaryMinusNode","BigNumber","Complex","s","Error","_exactFraction","exactFractions","isFinite","f","fractionsLimit","Infinity","d","stringObject","undefined","parseFloat","FractionObject","BigNumberObject","numberObject","ComplexObject","im","re","vn","foldOp","fn","makeNode","reduce","a","b","ignoreandcontinue","node","type","value","isNaN","rawArgs","operatorFunctions","indexOf","arg","some","ignoreandcontine","toString","_args","isUnary","consts","vars","i","length","push","unshift","content","concat"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/ReactMumer-main/node_modules/mathjs/lib/esm/function/algebra/simplify/simplifyConstant.js"],"sourcesContent":["// TODO this could be improved by simplifying seperated constants under associative and commutative operators\nimport { isFraction, isNode, isOperatorNode } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createUtil } from './util.js';\nimport { noBignumber, noFraction } from '../../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    fraction,\n    bignumber,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  function simplifyConstant(expr, options) {\n    var res = foldFraction(expr, options);\n    return isNode(res) ? res : _toNode(res);\n  }\n\n  function _eval(fnname, args, options) {\n    try {\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(function (x) {\n        if (isFraction(x)) {\n          return x.valueOf();\n        }\n\n        return x;\n      });\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    }\n  }); // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n\n      return _exactFraction(s.re, options);\n    }\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n\n  function foldOp(fn, args, makeNode, options) {\n    return args.reduce(function (a, b) {\n      if (!isNode(a) && !isNode(b)) {\n        try {\n          return _eval(fn, [a, b], options);\n        } catch (ignoreandcontinue) {}\n\n        a = _toNode(a);\n        b = _toNode(b);\n      } else if (!isNode(a)) {\n        a = _toNode(a);\n      } else if (!isNode(b)) {\n        b = _toNode(b);\n      }\n\n      return makeNode([a, b]);\n    });\n  } // destroys the original node and returns a folded one\n\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n\n      case 'ConstantNode':\n        if (typeof node.value === 'number' || !isNaN(node.value)) {\n          return _toNumber(node.value, options);\n        }\n\n        return node;\n\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontine) {}\n            } // Convert all args to nodes and construct a symbolic function call\n\n\n            args = args.map(function (arg) {\n              return isNode(arg) ? arg : _toNode(arg);\n            });\n            return new FunctionNode(node.name, args);\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n\n          var _args;\n\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node)) {\n            _args = allChildren(node);\n            _args = _args.map(arg => foldFraction(arg, options));\n\n            if (isCommutative(fn)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n\n          return res;\n        }\n\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n\n      case 'AccessorNode':\n      /* falls through */\n\n      case 'ArrayNode':\n      /* falls through */\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'IndexNode':\n      /* falls through */\n\n      case 'ObjectNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n\n  return simplifyConstant;\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}