{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AMElement } from \"./AMElement\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\n\nvar Group =\n/** @class */\nfunction (_super) {\n  __extends(Group, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param elementName Element type (should be \"g\")\r\n   */\n\n\n  function Group(elementName) {\n    return _super.call(this, elementName) || this;\n  }\n  /**\r\n   * Adds an element to group.\r\n   *\r\n   * This will manipulate DOM. `element` will be physically moved into group.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Group.prototype.add = function (element) {\n    if (element) {\n      this.node.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Adds an element to group.\r\n   *\r\n   * This will manipulate DOM. `element` will be physically moved into group.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Group.prototype.addToBack = function (element) {\n    if (element) {\n      var first = this.node.childNodes[0];\n\n      if (first) {\n        if (first != element.node) {\n          this.node.insertBefore(element.node, first);\n        }\n      } else {\n        this.node.appendChild(element.node);\n      }\n    }\n  };\n  /**\r\n   * Removes the `element` from group.\r\n   *\r\n   * Please note that this will not dispose the element itself, it will just\r\n   * remove it from the group.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Group.prototype.removeElement = function (element) {\n    // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\n    if (element) {\n      try {\n        if (element.node && element.node.parentNode == this.node) {\n          this.node.removeChild(element.node);\n        }\n      } catch (err) {}\n    }\n  };\n  /**\r\n   * Checks if this group already has the child element added\r\n   *\r\n   * @param element\r\n   * @return {boolean}\r\n   */\n\n\n  Group.prototype.hasChild = function (element) {\n    for (var i = 0; i < this.node.childNodes.length; i++) {\n      if (this.node.childNodes[i] == element.node) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Group.prototype, \"content\", {\n    /**\r\n     * @return SVG markup\r\n     */\n    get: function () {\n      return this.node.innerHTML;\n    },\n\n    /**\r\n     * Content of the group element.\r\n     *\r\n     * Can be used to add a lot of proprietary SVG markup into group.\r\n     *\r\n     * @param value  SVG markup\r\n     */\n    set: function (value) {\n      this.node.innerHTML = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes all children from the group.\r\n   */\n\n  Group.prototype.removeChildren = function () {\n    if (this.node.childNodes) {\n      while (this.node.childNodes.length > 0) {\n        var childNode = this.node.firstChild;\n\n        if (childNode && childNode.parentNode) {\n          childNode.parentNode.removeChild(childNode);\n        }\n      }\n    }\n  };\n\n  return Group;\n}(AMElement);\n\nexport { Group };","map":{"version":3,"sources":["../../../../../src/.internal/core/rendering/Group.ts"],"names":[],"mappings":";AAAA;;;;;AAKG;;AACH,SAAS,SAAT,QAA0B,aAA1B;AAGA;;;;;AAKG;;AAEH;;;;;;AAMG;;AACH,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAA2B,SAAA,CAAA,KAAA,EAAA,MAAA,CAAA;EAE1B;;;;AAIG;;;EACH,SAAA,KAAA,CAAY,WAAZ,EAA+B;WAC9B,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN,KAAkB,I;EAClB;EAED;;;;;;AAMG;;;EACI,KAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,OAAX,EAA6B;IAC5B,IAAI,OAAJ,EAAa;MACZ,KAAK,IAAL,CAAU,WAAV,CAAsB,OAAO,CAAC,IAA9B;IACA;EACD,CAJM;EAMP;;;;;;AAMG;;;EACI,KAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,OAAjB,EAAmC;IAClC,IAAI,OAAJ,EAAa;MACZ,IAAI,KAAK,GAAG,KAAK,IAAL,CAAU,UAAV,CAAqB,CAArB,CAAZ;;MACA,IAAI,KAAJ,EAAW;QACV,IAAI,KAAK,IAAI,OAAO,CAAC,IAArB,EAA2B;UAC1B,KAAK,IAAL,CAAU,YAAV,CAAuB,OAAO,CAAC,IAA/B,EAAqC,KAArC;QACA;MACD,CAJD,MAKK;QACJ,KAAK,IAAL,CAAU,WAAV,CAAsB,OAAO,CAAC,IAA9B;MACA;IACD;EACD,CAZM;EAcP;;;;;;;AAOG;;;EACI,KAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,OAArB,EAAuC;IACtC;IACA,IAAI,OAAJ,EAAa;MACZ,IAAI;QACH,IAAI,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,IAAR,CAAa,UAAb,IAA2B,KAAK,IAApD,EAA0D;UACzD,KAAK,IAAL,CAAU,WAAV,CAAsB,OAAO,CAAC,IAA9B;QACA;MACD,CAJD,CAKA,OAAO,GAAP,EAAY,CAEX;IACD;EACD,CAZM;EAeP;;;;;AAKG;;;EACI,KAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,OAAhB,EAAiC;IAChC,KAAI,IAAI,CAAC,GAAG,CAAZ,EAAe,CAAC,GAAG,KAAK,IAAL,CAAU,UAAV,CAAqB,MAAxC,EAAgD,CAAC,EAAjD,EAAoD;MACnD,IAAG,KAAK,IAAL,CAAU,UAAV,CAAqB,CAArB,KAA2B,OAAO,CAAC,IAAtC,EAA2C;QAC1C,OAAO,IAAP;MACA;IACD;;IACD,OAAO,KAAP;EACA,CAPM;;EAgBP,MAAA,CAAA,cAAA,CAAW,KAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;IAIlB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,IAAL,CAAU,SAAjB;IACA,CATiB;;IAPlB;;;;;;AAMG;SACH,UAAmB,KAAnB,EAAgC;MAC/B,KAAK,IAAL,CAAU,SAAV,GAAsB,KAAtB;IACA,CAFiB;oBAAA;;EAAA,CAAlB;EAWA;;AAEG;;EACI,KAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;IACC,IAAI,KAAK,IAAL,CAAU,UAAd,EAA0B;MACzB,OAAO,KAAK,IAAL,CAAU,UAAV,CAAqB,MAArB,GAA8B,CAArC,EAAwC;QACvC,IAAI,SAAS,GAAG,KAAK,IAAL,CAAU,UAA1B;;QACA,IAAI,SAAS,IAAI,SAAS,CAAC,UAA3B,EAAuC;UACtC,SAAS,CAAC,UAAV,CAAqB,WAArB,CAAiC,SAAjC;QACA;MACD;IACD;EACD,CATM;;EAUR,OAAA,KAAA;AAAC,CAlHD,CAA2B,SAA3B,CAAA","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\r\nexport class Group extends AMElement {\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param elementName Element type (should be \"g\")\r\n\t */\r\n\tconstructor(elementName: string) {\r\n\t\tsuper(elementName);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to group.\r\n\t *\r\n\t * This will manipulate DOM. `element` will be physically moved into group.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic add(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tthis.node.appendChild(element.node);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to group.\r\n\t *\r\n\t * This will manipulate DOM. `element` will be physically moved into group.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic addToBack(element: AMElement): void {\r\n\t\tif (element) {\r\n\t\t\tlet first = this.node.childNodes[0];\r\n\t\t\tif (first) {\r\n\t\t\t\tif (first != element.node) {\r\n\t\t\t\t\tthis.node.insertBefore(element.node, first);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.node.appendChild(element.node);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the `element` from group.\r\n\t *\r\n\t * Please note that this will not dispose the element itself, it will just\r\n\t * remove it from the group.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic removeElement(element: AMElement): void {\r\n\t\t// todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\r\n\t\tif (element) {\r\n\t\t\ttry {\r\n\t\t\t\tif (element.node && element.node.parentNode == this.node) {\r\n\t\t\t\t\tthis.node.removeChild(element.node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Checks if this group already has the child element added\r\n\t *\r\n\t * @param element\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic hasChild(element:AMElement):boolean {\r\n\t\tfor(let i = 0; i < this.node.childNodes.length; i++){\r\n\t\t\tif(this.node.childNodes[i] == element.node){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Content of the group element.\r\n\t *\r\n\t * Can be used to add a lot of proprietary SVG markup into group.\r\n\t *\r\n\t * @param value  SVG markup\r\n\t */\r\n\tpublic set content(value: string) {\r\n\t\tthis.node.innerHTML = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return SVG markup\r\n\t */\r\n\tpublic get content(): string {\r\n\t\treturn this.node.innerHTML;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all children from the group.\r\n\t */\r\n\tpublic removeChildren(): void {\r\n\t\tif (this.node.childNodes) {\r\n\t\t\twhile (this.node.childNodes.length > 0) {\r\n\t\t\t\tlet childNode = this.node.firstChild;\r\n\t\t\t\tif (childNode && childNode.parentNode) {\r\n\t\t\t\t\tchildNode.parentNode.removeChild(childNode);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}