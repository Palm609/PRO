{"ast":null,"code":"/**\r\n * Axis Label module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisLabel } from \"./AxisLabel\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { Percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\n\nvar AxisLabelCircular =\n/** @class */\nfunction (_super) {\n  __extends(AxisLabelCircular, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function AxisLabelCircular() {\n    var _this = _super.call(this) || this;\n    /**\r\n     *\r\n     * @ignore\r\n     */\n\n\n    _this.fdx = 0;\n    /**\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.fdy = 0;\n    _this.className = \"AxisLabelCircular\";\n\n    _this.padding(0, 0, 0, 0);\n\n    _this.location = 0.5;\n    _this.locationOnPath = 0.5;\n    _this.radius = 0;\n    _this.isMeasured = false;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(AxisLabelCircular.prototype, \"relativeRotation\", {\n    /**\r\n     * @return Rotation angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"relativeRotation\");\n    },\n\n    /**\r\n     * Relative rotation of the label.\r\n     *\r\n     * It is an angle to circle. In case 90, labels will be positioned like rays\r\n     * of light, if 0 - positioned along the circle.\r\n     *\r\n     * @param value Rotation angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"relativeRotation\", value, true);\n\n      if (!$type.hasValue(value)) {\n        this.rotation = undefined;\n        var dataItem = this.dataItem;\n\n        if (dataItem && dataItem.component) {\n          dataItem.component.invalidateDataItems();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisLabelCircular.prototype, \"radius\", {\n    /**\r\n     * @return Distance (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Distance from axis circle to label in pixels or percent.\r\n     *\r\n     * @param value Distance (px or percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisLabelCircular.prototype, \"bent\", {\n    /**\r\n     * @return Bent?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bent\");\n    },\n\n    /**\r\n     * Specifies if label should be bent along the circle.\r\n     *\r\n     * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n     *\r\n     * @since 4.1.2\r\n     * @default false\r\n     * @param  value  Bent?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"bent\", value, true);\n      this.setPropertyValue(\"wrap\", false);\n      this.setPropertyValue(\"horizontalCenter\", \"none\");\n      this.setPropertyValue(\"verticalCenter\", \"none\");\n\n      if (value) {\n        this.setPropertyValue(\"dx\", 0);\n        this.setPropertyValue(\"dy\", 0);\n        this.setPropertyValue(\"x\", 0);\n        this.setPropertyValue(\"y\", 0);\n        this.setPropertyValue(\"rotation\", 0); //this.setPropertyValue(\"relativeRotation\", undefined);\n\n        this.fdx = 0;\n        this.fdy = 0;\n        this.textAlign = \"middle\";\n      } else {\n        if (this.textPathElement) {\n          this.textPathElement.dispose();\n          this.textPathElement = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns label radius in pixels.\r\n   *\r\n   * @param   axisRadius  Radius\r\n   * @return              Pixel radius\r\n   */\n\n  AxisLabelCircular.prototype.pixelRadius = function (axisRadius) {\n    var sign = 1;\n\n    if (this.inside) {\n      sign = -1;\n    }\n\n    return $utils.relativeToValue(this.radius, axisRadius) * sign;\n  };\n  /**\r\n   * Returns label horizontal radius in pixels.\r\n   *\r\n   * @param   axisRadius   Radius\r\n   * @param   axisRadiusY  Vertical radius\r\n   * @return               Radius\r\n   */\n\n\n  AxisLabelCircular.prototype.pixelRadiusY = function (axisRadius, axisRadiusY) {\n    var sign = 1;\n\n    if (this.inside) {\n      sign = -1;\n    }\n\n    var radius = this.radius;\n\n    if ($type.isNumber(radius)) {\n      radius *= axisRadiusY / axisRadius;\n      return $utils.relativeToValue(radius, axisRadius) * sign;\n    } else {\n      return $utils.relativeToValue(radius, axisRadiusY) * sign;\n    }\n  };\n  /**\r\n   * [fixPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param point       Label affixation point\r\n   * @param axisRadius  Distance from point (px)\r\n   */\n\n\n  AxisLabelCircular.prototype.fixPosition = function (angle, axisRadius, axisRadiusY, dx, dy) {\n    if (!$type.isNumber(axisRadiusY)) {\n      axisRadiusY = axisRadius;\n    }\n\n    if (!$type.isNumber(dx)) {\n      dx = 0;\n    }\n\n    if (!$type.isNumber(dy)) {\n      dy = 0;\n    }\n\n    var point = {\n      x: axisRadius * $math.cos(angle),\n      y: axisRadiusY * $math.sin(angle)\n    };\n\n    if (this.invalid) {\n      this.validate(); //@todo\" check if we need this\n    }\n\n    var isNegative = false;\n    var realRadius = this.radius;\n\n    if (realRadius instanceof Percent && realRadius.value < 0) {\n      isNegative = true;\n    } else if (realRadius < 0) {\n      isNegative = true;\n    }\n\n    var relativeRotation = this.relativeRotation;\n    var labelRadius = this.pixelRadius(axisRadius);\n\n    if (this.bent) {\n      var point_1 = {\n        x: (axisRadius + labelRadius) * $math.cos(angle + 180),\n        y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180)\n      };\n      this.path = $path.moveTo(point_1) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\n\n      if (this.textPathElement) {\n        this.textPathElement.attr({\n          \"startOffset\": this.locationOnPath * 100 + \"%\"\n        });\n      }\n\n      return;\n    } // WHEN ROTATED\n\n\n    if ($type.isNumber(relativeRotation)) {\n      this.horizontalCenter = \"none\";\n      this.verticalCenter = \"none\";\n      angle = $math.fitAngleToRange(angle, -180, 180);\n      var pixelWidth = this.bbox.width;\n      var pixelHeight = this.bbox.height;\n      var pixelPaddingBottom = this.pixelPaddingBottom;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n\n      if (angle > 90 || angle < -90) {\n        if (relativeRotation == -90) {\n          relativeRotation = 90;\n          pixelWidth = 0;\n        }\n      } else {\n        if (relativeRotation == -90) {\n          pixelHeight = -pixelHeight;\n        }\n\n        if (relativeRotation == 90) {\n          relativeRotation = -90;\n          pixelWidth = -pixelPaddingLeft - pixelPaddingRight;\n          pixelHeight = -pixelHeight - pixelPaddingTop - pixelPaddingBottom;\n        }\n      }\n\n      this.rotation = relativeRotation + angle + 90;\n      var dH = $math.sin(relativeRotation) / 2;\n      var dW = $math.cos(relativeRotation) / 2;\n      var rotation = this.rotation;\n      this.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\n      this.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\n\n      if (!this.inside) {\n        labelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\n      } else {\n        if (angle > 90 || angle < -90) {\n          labelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\n        } else {\n          labelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\n        }\n      }\n\n      point.x += $math.cos(angle) * labelRadius;\n      point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\n    } else {\n      // END OF ROTATED\n      this.horizontalCenter = \"middle\";\n      this.verticalCenter = \"middle\";\n\n      if (isNegative) {\n        this.dx = 0;\n        this.dy = 0;\n        point.x = (axisRadius + labelRadius) * $math.cos(angle);\n        point.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\n      } else {\n        // we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\n        // this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\n        // @todo with this math doesn't work well with inside = true\n        this.dy = this._measuredHeight / 2 * $math.sin(angle); //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\n        // simmilar with dx\n\n        this.dx = this._measuredWidth / 2 * $math.cos(angle); //(1 - (point.x + axisRadius) / (2 * axisRadius));\n\n        point.x += $math.cos(angle) * labelRadius;\n        point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\n      }\n    }\n\n    point.x += dx;\n    point.y += dy;\n    this.fdx = this.dx;\n    this.fdy = this.dy;\n    this.moveTo(point);\n  };\n\n  return AxisLabelCircular;\n}(AxisLabel);\n\nexport { AxisLabelCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/AxisLabelCircular.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tbent?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.locationOnPath = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positioned along the circle.\r\n\t *\r\n\t * @param value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tthis.rotation = undefined;\r\n\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem && dataItem.component) {\r\n\t\t\t\tdataItem.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle.\r\n\t *\r\n\t * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n\t *\r\n\t * @since 4.1.2\r\n\t * @default false\r\n\t * @param  value  Bent?\r\n\t */\r\n\tpublic set bent(value: boolean) {\r\n\t\tthis.setPropertyValue(\"bent\", value, true);\r\n\t\tthis.setPropertyValue(\"wrap\", false);\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"none\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"none\");\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.setPropertyValue(\"dx\", 0);\r\n\t\t\tthis.setPropertyValue(\"dy\", 0);\r\n\t\t\tthis.setPropertyValue(\"x\", 0);\r\n\t\t\tthis.setPropertyValue(\"y\", 0);\r\n\t\t\tthis.setPropertyValue(\"rotation\", 0)\r\n\t\t\t//this.setPropertyValue(\"relativeRotation\", undefined);\r\n\t\t\tthis.fdx = 0;\r\n\t\t\tthis.fdy = 0;\r\n\t\t\tthis.textAlign = \"middle\";\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(this.textPathElement){\r\n\t\t\t\tthis.textPathElement.dispose();\r\n\t\t\t\tthis.textPathElement = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bent?\r\n\t */\r\n\tpublic get bent(): boolean {\r\n\t\treturn this.getPropertyValue(\"bent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label radius in pixels.\r\n\t * \r\n\t * @param   axisRadius  Radius\r\n\t * @return              Pixel radius\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label horizontal radius in pixels.\r\n\t * \r\n\t * @param   axisRadius   Radius\r\n\t * @param   axisRadiusY  Vertical radius\r\n\t * @return               Radius\r\n\t */\r\n\tpublic pixelRadiusY(axisRadius: number, axisRadiusY: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet radius = this.radius;\r\n\r\n\t\tif ($type.isNumber(radius)) {\r\n\t\t\tradius *= axisRadiusY / axisRadius;\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadius) * sign;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadiusY) * sign;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param point       Label affixation point\r\n\t * @param axisRadius  Distance from point (px)\r\n\t */\r\n\tpublic fixPosition(angle: number, axisRadius: number, axisRadiusY?: number, dx?: number, dy?: number) {\r\n\t\tif (!$type.isNumber(axisRadiusY)) {\r\n\t\t\taxisRadiusY = axisRadius;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dx)) {\r\n\t\t\tdx = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dy)) {\r\n\t\t\tdy = 0;\r\n\t\t}\r\n\r\n\t\tlet point = { x: axisRadius * $math.cos(angle), y: axisRadiusY * $math.sin(angle) };\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet isNegative = false;\r\n\t\tlet realRadius = this.radius;\r\n\r\n\t\tif (realRadius instanceof Percent && realRadius.value < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\t\telse if (realRadius < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif (this.bent) {\r\n\t\t\tlet point = { x: (axisRadius + labelRadius )* $math.cos(angle + 180), y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180) };\r\n\t\t\tthis.path = $path.moveTo(point) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\r\n\t\t\t\r\n\t\t\tif (this.textPathElement) {\r\n\t\t\t\tthis.textPathElement.attr({ \"startOffset\": (this.locationOnPath * 100) + \"%\" })\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// WHEN ROTATED\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.horizontalCenter = \"none\";\r\n\t\t\tthis.verticalCenter = \"none\";\r\n\r\n\t\t\tangle = $math.fitAngleToRange(angle, -180, 180);\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = -pixelPaddingLeft - pixelPaddingRight;\r\n\t\t\t\t\tpixelHeight = - pixelHeight - pixelPaddingTop - pixelPaddingBottom;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// END OF ROTATED\r\n\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\tthis.verticalCenter = \"middle\";\r\n\r\n\t\t\tif (isNegative) {\r\n\t\t\t\tthis.dx = 0;\r\n\t\t\t\tthis.dy = 0;\r\n\t\t\t\tpoint.x = (axisRadius + labelRadius) * $math.cos(angle);\r\n\t\t\t\tpoint.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t\t\t// @todo with this math doesn't work well with inside = true\r\n\t\t\t\tthis.dy = this._measuredHeight / 2 * $math.sin(angle) //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\r\n\t\t\t\t// simmilar with dx\r\n\t\t\t\tthis.dx = this._measuredWidth / 2 * $math.cos(angle) //(1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += dx;\r\n\t\tpoint.y += dy;\r\n\r\n\t\tthis.fdx = this.dx;\r\n\t\tthis.fdy = this.dy;\r\n\r\n\t\tthis.moveTo(point);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}