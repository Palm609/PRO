{"ast":null,"code":"/**\r\n * Axis break module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar AxisBreak =\n/** @class */\nfunction (_super) {\n  __extends(AxisBreak, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function AxisBreak() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Reference to parent Axis.\r\n     */\n\n\n    _this._axis = new MutableValueDisposer();\n    /**\r\n     * A list of axis data items which fall within this break.\r\n     */\n\n    _this.dataItems = new List();\n    _this.className = \"AxisBreak\"; // Set defaults\n\n    _this.breakSize = 0.01;\n    _this.marginLeft = -5;\n    _this.marginRight = -5;\n    _this.marginTop = -5;\n    _this.marginBottom = -5;\n    var interfaceColors = new InterfaceColorSet(); // Create elements\n    // (these won't be used actually, just for setting properties)\n\n    var fillShape = new WavedLine();\n    fillShape.fill = interfaceColors.getFor(\"background\");\n    fillShape.stroke = color();\n    fillShape.fillOpacity = 0.9;\n    fillShape.zIndex = 0;\n    _this._fillShape = fillShape;\n    var startLine = new WavedLine();\n    startLine.fill = color();\n    startLine.stroke = interfaceColors.getFor(\"grid\");\n    startLine.strokeOpacity = 0.3;\n    startLine.zIndex = 1;\n    _this._startLine = startLine;\n    var endLine = new WavedLine();\n    endLine.fill = color();\n    endLine.stroke = color(\"#000000\"); // interfaceColors.getFor(\"grid\");\n\n    endLine.strokeOpacity = 0.3;\n    endLine.zIndex = 2;\n    _this._endLine = endLine;\n\n    _this._disposers.push(_this._axis); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  AxisBreak.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this._fillShape) {\n      this._fillShape.dispose();\n    }\n\n    if (this._startLine) {\n      this._startLine.dispose();\n    }\n\n    if (this._endLine) {\n      this._endLine.dispose();\n    }\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"startLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._startLine;\n    },\n\n    /**\r\n     * An element used for the starting line of the break.\r\n     *\r\n     * @param sprite  Element\r\n     */\n    set: function (sprite) {\n      if (this._startLine) {\n        this._startLine.dispose();\n      }\n\n      this._startLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._endLine;\n    },\n\n    /**\r\n     * An element used for the end line of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function (sprite) {\n      if (this._endLine) {\n        this._endLine.dispose();\n      }\n\n      this._endLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"fillShape\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._fillShape;\n    },\n\n    /**\r\n     * An element used for fill of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function (sprite) {\n      if (this._fillShape) {\n        this._fillShape.dispose();\n      }\n\n      this._fillShape = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds a break element (e.g. lines, fill) to the break, which is\r\n   * [[Container]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite Element to add\r\n   */\n\n  AxisBreak.prototype.addBreakSprite = function (sprite) {\n    sprite.parent = this;\n    sprite.isMeasured = false;\n\n    this._disposers.push(sprite);\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n\n    /**\r\n     * An Axis this Break is associated with.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this._axis.get() !== axis) {\n        this._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\n\n        axis.renderer.createBreakSprites(this); // this can't go to copyFrom, as axis is set later\n\n        var breakTemplate = axis.axisBreaks.template;\n        this.startLine.copyFrom(breakTemplate.startLine);\n        this.endLine.copyFrom(breakTemplate.endLine);\n        this.fillShape.copyFrom(breakTemplate.fillShape);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"breakSize\", {\n    /**\r\n     * @return Relative axis break\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"breakSize\");\n    },\n\n    /**\r\n     * A size of the break relative to the actual size of the scope break spans.\r\n     *\r\n     * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n     * would be 100 pixels, the break would be 10 pixels wide.\r\n     *\r\n     * 0 means the break will completely collapse and hide the values.\r\n     * 1 means break would be not collapse at all, which would make it\r\n     * effectively useless.\r\n     *\r\n     * @default 0.01\r\n     * @param value  Relative axis break\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"breakSize\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's start.\r\n     *\r\n     * @return Start point\r\n     */\n    get: function () {\n      var renderer = this.axis.renderer;\n\n      if (renderer) {\n        return renderer.positionToPoint(this.startPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's end.\r\n     *\r\n     * @return End point\r\n     */\n    get: function () {\n      var renderer = this.axis.renderer;\n\n      if (renderer) {\n        return renderer.positionToPoint(this.endPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPosition\", {\n    /**\r\n     * Returns a relative position at which axis break starts.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return Start position\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPosition\", {\n    /**\r\n     * Returns a relative position at which axis break ends.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return End position\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Draws the axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  AxisBreak.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      renderer.updateBreakElement(this);\n    }\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"startValue\", {\n    /**\r\n     * @return Starting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startValue\");\n    },\n\n    /**\r\n     * A starting value for the break.\r\n     *\r\n     * @param value  Starting value\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endValue\", {\n    /**\r\n     * @return End value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endValue\");\n    },\n\n    /**\r\n     * An end value for the break.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisBreak;\n}(Container);\n\nexport { AxisBreak };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/AxisBreak.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Axis break module\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { IWavedShape } from \"../../core/defs/IWavedShape\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t */\r\n\tbreakSize?: number;\r\n\r\n\t/**\r\n\t * Starting value.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * End value.\r\n\t */\r\n\tendValue?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines [[AxisBreak]] adapters.\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBreakAdapters extends IContainerAdapters, IAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBreak extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: Axis;\r\n\r\n\t/**\r\n\t * Reference to parent Axis.\r\n\t */\r\n\tprotected _axis = new MutableValueDisposer<this[\"_axisType\"]>();\r\n\r\n\t/**\r\n\t * A reference to starting line element.\r\n\t */\r\n\tprotected _startLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to ending line element.\r\n\t */\r\n\tprotected _endLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to fill shape.\r\n\t */\r\n\tprotected _fillShape: IWavedShape;\r\n\r\n\t/**\r\n\t * A list of axis data items which fall within this break.\r\n\t */\r\n\tpublic dataItems: List<AxisDataItem> = new List<AxisDataItem>();\r\n\r\n\t/**\r\n\t * Adjusted start value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedStartValue: number;\r\n\r\n\t/**\r\n\t * Adjusted end value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedEndValue: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisBreak\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.breakSize = 0.01;\r\n\t\tthis.marginLeft = -5;\r\n\t\tthis.marginRight = -5;\r\n\t\tthis.marginTop = -5;\r\n\t\tthis.marginBottom = -5;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create elements\r\n\t\t// (these won't be used actually, just for setting properties)\r\n\t\tlet fillShape = new WavedLine();\r\n\t\tfillShape.fill = interfaceColors.getFor(\"background\");\r\n\t\tfillShape.stroke = color();\r\n\t\tfillShape.fillOpacity = 0.9;\r\n\t\tfillShape.zIndex = 0;\r\n\t\tthis._fillShape = fillShape;\r\n\r\n\t\tlet startLine = new WavedLine();\r\n\t\tstartLine.fill = color();\r\n\t\tstartLine.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tstartLine.strokeOpacity = 0.3;\r\n\t\tstartLine.zIndex = 1;\r\n\t\tthis._startLine = startLine;\r\n\r\n\t\tlet endLine = new WavedLine();\r\n\t\tendLine.fill = color();\r\n\t\tendLine.stroke = color(\"#000000\");// interfaceColors.getFor(\"grid\");\r\n\t\tendLine.strokeOpacity = 0.3;\r\n\t\tendLine.zIndex = 2;\r\n\t\tthis._endLine = endLine;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the starting line of the break.\r\n\t *\r\n\t * @param sprite  Element\r\n\t */\r\n\tpublic set startLine(sprite: IWavedShape) {\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\t\tthis._startLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get startLine(): IWavedShape {\r\n\t\treturn this._startLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the end line of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set endLine(sprite: IWavedShape) {\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t\tthis._endLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get endLine(): IWavedShape {\r\n\t\treturn this._endLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for fill of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set fillShape(sprite: IWavedShape) {\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tthis._fillShape = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get fillShape(): IWavedShape {\r\n\t\treturn this._fillShape;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a break element (e.g. lines, fill) to the break, which is\r\n\t * [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite Element to add\r\n\t */\r\n\tpublic addBreakSprite(sprite: IWavedShape) {\r\n\t\tsprite.parent = this;\r\n\t\tsprite.isMeasured = false;\r\n\t\tthis._disposers.push(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis this Break is associated with.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: this[\"_axisType\"]) {\r\n\t\tif (this._axis.get() !== axis) {\r\n\t\t\tthis._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n\t\t\taxis.renderer.createBreakSprites(this);\r\n\r\n\t\t\t// this can't go to copyFrom, as axis is set later\r\n\t\t\tlet breakTemplate: AxisBreak = axis.axisBreaks.template;\r\n\r\n\t\t\tthis.startLine.copyFrom(breakTemplate.startLine);\r\n\t\t\tthis.endLine.copyFrom(breakTemplate.endLine);\r\n\t\t\tthis.fillShape.copyFrom(breakTemplate.fillShape);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): this[\"_axisType\"] {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t * @param value  Relative axis break\r\n\t */\r\n\tpublic set breakSize(value: number) {\r\n\t\tif (this.setPropertyValue(\"breakSize\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative axis break\r\n\t */\r\n\tpublic get breakSize(): number {\r\n\t\treturn this.getPropertyValue(\"breakSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's start.\r\n\t *\r\n\t * @return Start point\r\n\t */\r\n\tpublic get startPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.startPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's end.\r\n\t *\r\n\t * @return End point\r\n\t */\r\n\tpublic get endPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.endPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break starts.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break ends.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\t\trenderer.updateBreakElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A starting value for the break.\r\n\t *\r\n\t * @param value  Starting value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Starting value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\treturn this.getPropertyValue(\"startValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * An end value for the break.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.getPropertyValue(\"endValue\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}