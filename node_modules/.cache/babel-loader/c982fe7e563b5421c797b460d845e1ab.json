{"ast":null,"code":"/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\nimport { CSVParser } from \"./CSVParser\";\nimport { JSONParser } from \"./JSONParser\";\nimport { Adapter } from \"../utils/Adapter\";\nimport * as $net from \"../utils/Net\";\nimport * as $array from \"../utils/Array\";\n;\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\n\nvar DataLoader =\n/** @class */\nfunction () {\n  function DataLoader() {\n    /**\r\n     * Adapter.\r\n     */\n    this.adapter = new Adapter(this);\n  }\n  /**\r\n   * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n   * their respective `parse` methods.\r\n   *\r\n   * @param source  A single data source or an array of multiple of data sources\r\n   */\n\n\n  DataLoader.prototype.load = function (source) {\n    var sources = Array.isArray(source) ? source : [source]; // Add each Source to the list to be loaded simultaneously\n\n    var promises = $array.map(sources, function (x) {\n      // Dispatch events\n      x.dispatchImmediately(\"started\");\n      x.dispatchImmediately(\"loadstarted\");\n      return $net.load(x.url, x, x.requestOptions);\n    }); // Run all promises in parallel\n\n    Promise.all(promises).then(function (res) {\n      // Process each loaded source\n      $array.each(res, function (result) {\n        // Get Source\n        var source = result.target; // Dispatch events\n\n        source.dispatchImmediately(\"loadended\");\n\n        if (result.error) {\n          if (source.events.isEnabled(\"error\")) {\n            source.events.dispatchImmediately(\"error\", {\n              type: \"error\",\n              code: result.xhr.status,\n              message: source.language.translate(\"Unable to load file: %1\", null, source.url),\n              target: source\n            });\n          }\n        } else {\n          // Initiate parsing of the loaded data\n          source.processData(result.response, result.type);\n        }\n\n        source.dispatchImmediately(\"ended\");\n      });\n    }).catch(function (res) {\n      if (res.target) {\n        res.target.dispatchImmediately(\"loadended\");\n\n        if (res.target.events.isEnabled(\"error\")) {\n          res.target.events.dispatchImmediately(\"error\", {\n            type: \"error\",\n            code: res.xhr.status,\n            message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\n            target: res.target\n          });\n        }\n\n        res.target.dispatchImmediately(\"ended\");\n      }\n    });\n  };\n  /**\r\n   * Instantiates a [[DataParser]] object based on the data type.\r\n   * Built-in parser types are as follows:\r\n   *\r\n   * * \"csv\" or \"text/csv\"\r\n   * * \"json\" or \"application/json\"\r\n   *\r\n   * @param contentType  A format type\r\n   * @return A parser object\r\n   */\n\n\n  DataLoader.prototype.getParserByType = function (contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByType\", {\n      parser: null,\n      type: contentType\n    }).parser;\n\n    if (parser) {\n      return parser;\n    }\n\n    if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\n      return new CSVParser();\n    }\n\n    if (contentType == \"json\" || contentType == \"application/json\") {\n      return new JSONParser();\n    }\n\n    return;\n  };\n  /**\r\n   * Tries to determine a parser out of content type and/or actual data.\r\n   *\r\n   * @param data         Data\r\n   * @param contentType  Content-type\r\n   * @return Parser instance\r\n   */\n\n\n  DataLoader.prototype.getParserByData = function (data, contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByData\", {\n      parser: null,\n      data: data,\n      type: contentType\n    }).parser; // Check if we have parser from outside code\n\n    if (!parser) {\n      // No, let's try to figure it out\n      parser = this.getParserByType(contentType);\n\n      if (parser) {\n        // We're able to figure out parser by content-type\n        return parser;\n      } else if (JSONParser.isJSON(data)) {\n        return this.getParserByType(\"json\");\n      } else if (CSVParser.isCSV(data)) {\n        return this.getParserByType(\"csv\");\n      }\n    }\n\n    return parser;\n  };\n\n  return DataLoader;\n}();\n\nexport { DataLoader };\n/**\r\n * Create instance of Data Loader\r\n */\n\nexport var dataLoader = new DataLoader();","map":{"version":3,"sources":["../../../../../src/.internal/core/data/DataLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataSource } from \"./DataSource\";\r\nimport { DataParser } from \"./DataParser\";\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport * as $net from \"../utils/Net\";\r\nimport * as $array from \"../utils/Array\";\r\n\r\n/**\r\n * Represents a list of available adapters for Sprite\r\n */\r\nexport interface IDataLoaderAdapters {\r\n\r\n\t/**\r\n\t * Applied after the Data Loader determines suitable parser type by data\r\n\t * source's URL extension.\r\n\t */\r\n\tgetParserByType: {\r\n\t\tparser: DataParser,\r\n\t\ttype?: string\r\n\t},\r\n\r\n\t/**\r\n\t * Applied after the Data Loader determines suitable parser type based on\r\n\t * its data examination.\r\n\t */\r\n\tgetParserByData: {\r\n\t\tparser: DataParser,\r\n\t\tdata?: string,\r\n\t\ttype?: string\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n \t Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\r\nexport class DataLoader {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDataLoaderAdapters;\r\n\r\n\t/**\r\n\t * Adapter.\r\n\t */\r\n\tpublic adapter: Adapter<DataLoader, IDataLoaderAdapters> = new Adapter<DataLoader, IDataLoaderAdapters>(this);\r\n\r\n\t/**\r\n\t * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n\t * their respective `parse` methods.\r\n\t *\r\n\t * @param source  A single data source or an array of multiple of data sources\r\n\t */\r\n\tpublic load(source: DataSource | DataSource[]): void {\r\n\t\tlet sources = Array.isArray(source) ? source : [source];\r\n\r\n\t\t// Add each Source to the list to be loaded simultaneously\r\n\t\tlet promises = $array.map(sources, (x) => {\r\n\t\t\t// Dispatch events\r\n\t\t\tx.dispatchImmediately(\"started\");\r\n\t\t\tx.dispatchImmediately(\"loadstarted\");\r\n\r\n\t\t\treturn $net.load(x.url, x, x.requestOptions);\r\n\t\t});\r\n\r\n\t\t// Run all promises in parallel\r\n\t\tPromise.all(promises).then((res) => {\r\n\t\t\t// Process each loaded source\r\n\t\t\t$array.each(res, (result) => {\r\n\t\t\t\t// Get Source\r\n\t\t\t\tlet source = result.target;\r\n\r\n\t\t\t\t// Dispatch events\r\n\t\t\t\tsource.dispatchImmediately(\"loadended\");\r\n\r\n\t\t\t\tif (result.error) {\r\n\t\t\t\t\tif (source.events.isEnabled(\"error\")) {\r\n\t\t\t\t\t\tsource.events.dispatchImmediately(\"error\", {\r\n\t\t\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\t\t\tcode: result.xhr.status,\r\n\t\t\t\t\t\t\tmessage: source.language.translate(\"Unable to load file: %1\", null, source.url),\r\n\t\t\t\t\t\t\ttarget: source\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// Initiate parsing of the loaded data\r\n\t\t\t\t\tsource.processData(result.response, result.type);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsource.dispatchImmediately(\"ended\");\r\n\t\t\t});\r\n\t\t}).catch((res) => {\r\n\r\n\t\t\tif (res.target) {\r\n\r\n\t\t\t\tres.target.dispatchImmediately(\"loadended\");\r\n\r\n\t\t\t\tif (res.target.events.isEnabled(\"error\")) {\r\n\t\t\t\t\tres.target.events.dispatchImmediately(\"error\", {\r\n\t\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\t\tcode: res.xhr.status,\r\n\t\t\t\t\t\tmessage: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\r\n\t\t\t\t\t\ttarget: res.target\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tres.target.dispatchImmediately(\"ended\");\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a [[DataParser]] object based on the data type.\r\n\t * Built-in parser types are as follows:\r\n\t *\r\n\t * * \"csv\" or \"text/csv\"\r\n\t * * \"json\" or \"application/json\"\r\n\t *\r\n\t * @param contentType  A format type\r\n\t * @return A parser object\r\n\t */\r\n\tpublic getParserByType(contentType: string): DataParser {\r\n\r\n\t\t// Let some plugin decide\r\n\t\tlet parser = this.adapter.apply(\"getParserByType\", {\r\n\t\t\tparser: null,\r\n\t\t\ttype: contentType\r\n\t\t}).parser;\r\n\r\n\t\tif (parser) {\r\n\t\t\treturn parser;\r\n\t\t}\r\n\r\n\t\tif (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\r\n\t\t\treturn new CSVParser();\r\n\t\t}\r\n\t\tif (contentType == \"json\" || contentType == \"application/json\") {\r\n\t\t\treturn new JSONParser();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to determine a parser out of content type and/or actual data.\r\n\t *\r\n\t * @param data         Data\r\n\t * @param contentType  Content-type\r\n\t * @return Parser instance\r\n\t */\r\n\tpublic getParserByData(data: string, contentType?: string): DataParser {\r\n\r\n\t\t// Let some plugin decide\r\n\t\tlet parser = this.adapter.apply(\"getParserByData\", {\r\n\t\t\tparser: null,\r\n\t\t\tdata: data,\r\n\t\t\ttype: contentType\r\n\t\t}).parser;\r\n\r\n\t\t// Check if we have parser from outside code\r\n\t\tif (!parser) {\r\n\t\t\t// No, let's try to figure it out\r\n\t\t\tparser = this.getParserByType(contentType)\r\n\r\n\t\t\tif (parser) {\r\n\t\t\t\t// We're able to figure out parser by content-type\r\n\t\t\t\treturn parser;\r\n\t\t\t}\r\n\t\t\telse if (JSONParser.isJSON(data)) {\r\n\t\t\t\treturn this.getParserByType(\"json\");\r\n\t\t\t}\r\n\t\t\telse if (CSVParser.isCSV(data)) {\r\n\t\t\t\treturn this.getParserByType(\"csv\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn parser;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Create instance of Data Loader\r\n */\r\nexport let dataLoader: DataLoader = new DataLoader();\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}