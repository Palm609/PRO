{"ast":null,"code":"/**\r\n * Module for building 3D serial charts.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { Container } from \"../../core/Container\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYChart3DDataItem =\n/** @class */\nfunction (_super) {\n  __extends(XYChart3DDataItem, _super);\n\n  function XYChart3DDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChart3DDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChart3DDataItem;\n}(XYChartDataItem);\n\nexport { XYChart3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\n\nvar XYChart3D =\n/** @class */\nfunction (_super) {\n  __extends(XYChart3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChart3D() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Type of the axis renderer to use for X axes.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererX3D;\n    /**\r\n     * Type of the axis renderer to use for Y axes.\r\n     */\n\n    _this._axisRendererY = AxisRendererY3D;\n    _this.className = \"XYChart3D\"; // Set defaults\n\n    _this.depth = 30;\n    _this.angle = 30; // Creeate container for columns\n\n    var columnsContainer = _this.seriesContainer.createChild(Container);\n\n    columnsContainer.shouldClone = false;\n    columnsContainer.isMeasured = false;\n    columnsContainer.layout = \"none\";\n    _this.columnsContainer = columnsContainer;\n    _this.columnsContainer.mask = _this.createChild(Sprite); // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n\n\n  XYChart3D.prototype.updateSeriesMasks = function () {\n    _super.prototype.updateSeriesMasks.call(this);\n\n    if ($utils.isIE()) {\n      var columnsContainer = this.columnsContainer;\n      var mask = columnsContainer.mask;\n      columnsContainer.mask = undefined;\n      columnsContainer.mask = mask;\n    }\n  };\n\n  Object.defineProperty(XYChart3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth of the 3D chart / columns in pixels.\r\n     *\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle the chart is viewed at.\r\n     *\r\n     * @todo Description (review)\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dx3D\", {\n    /**\r\n     * A calculated horizontal 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return $math.cos(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dy3D\", {\n    /**\r\n     * A calculated vertical 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return -$math.sin(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates layout\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  XYChart3D.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.fixColumns();\n  };\n  /**\r\n   * Updates the layout (padding and scrollbar positions) to accommodate for\r\n   * 3D depth and angle.\r\n   */\n\n\n  XYChart3D.prototype.fixLayout = function () {\n    this.chartContainer.marginTop = -this.dy3D;\n    this.chartContainer.paddingRight = this.dx3D;\n\n    if (this.scrollbarX) {\n      this.scrollbarX.dy = this.dy3D;\n      this.scrollbarX.dx = this.dx3D;\n    }\n\n    if (this.scrollbarY) {\n      this.scrollbarY.dy = this.dy3D;\n      this.scrollbarY.dx = this.dx3D;\n    }\n\n    this.fixColumns();\n\n    _super.prototype.fixLayout.call(this);\n  };\n  /**\r\n   * Updates column positions, offset and dimensions based on chart's angle\r\n   * and depth.\r\n   */\n\n\n  XYChart3D.prototype.fixColumns = function () {\n    var _this = this;\n\n    var count = 1;\n    var i = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        if (!series.clustered && i > 0) {\n          count++;\n        }\n\n        series.depthIndex = count - 1;\n        i++;\n      }\n    });\n    var s = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        series.depth = _this.depth / count;\n        series.angle = _this.angle;\n\n        if (series.columnsContainer == _this.columnsContainer) {\n          series.dx = _this.depth / count * $math.cos(_this.angle) * series.depthIndex;\n          series.dy = -_this.depth / count * $math.sin(_this.angle) * series.depthIndex;\n        }\n\n        var inversed_1 = false;\n\n        if (series.baseAxis == series.xAxis && series.xAxis.renderer.inversed || series.baseAxis == series.yAxis && series.yAxis.renderer.inversed) {\n          inversed_1 = true;\n        }\n\n        var i_1 = 1;\n        series.dataItems.each(function (dataItem) {\n          var column = dataItem.column;\n\n          if (column) {\n            if (inversed_1) {\n              column.zIndex = 1000 * (1000 - i_1) + s - series.depthIndex * 100;\n            } else {\n              column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;\n            }\n          }\n\n          i_1++;\n        });\n\n        if (inversed_1) {\n          s--;\n        } else {\n          s++;\n        }\n      }\n    });\n    this.maskColumns();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChart3D.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"ColumnSeries3D\";\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  XYChart3D.prototype.maskColumns = function () {\n    var w = this.plotContainer.pixelWidth;\n    var h = this.plotContainer.pixelHeight;\n    var dx = this.dx3D;\n    var dy = this.dy3D;\n    var path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: h + dy\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: 0,\n      y: h\n    }) + $path.closePath();\n    var columnsContainer = this.columnsContainer;\n\n    if (columnsContainer && columnsContainer.mask) {\n      columnsContainer.mask.path = path;\n    }\n  };\n\n  return XYChart3D;\n}(XYChart);\n\nexport { XYChart3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/XYChart3D.ts"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;AAKG;;AACH,SAAS,OAAT,EAA4F,eAA5F,QAAmH,WAAnH;AACA,SAAS,SAAT,QAA0B,sBAA1B;AACA,SAAS,MAAT,QAAuB,mBAAvB;AACA,SAAS,eAAT,QAAgC,yBAAhC;AACA,SAAS,eAAT,QAAgC,yBAAhC;AACA,SAAS,cAAT,QAA+B,0BAA/B;AACA,SAAS,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AAEA;;;;;AAKG;;AAEH;;;;AAIG;;AACH,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAuC,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;;EAEtC,SAAA,iBAAA,GAAA;IAAA,IAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;IAEC,KAAI,CAAC,SAAL,GAAiB,mBAAjB;;IACA,KAAI,CAAC,UAAL;;;EACA;;EACF,OAAA,iBAAA;AAAC,CAPD,CAAuC,eAAvC,CAAA;;;AAoDA;;;;;AAKG;;AAEH;;;;;;;AAOG;;AACH,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAA+B,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;EAuC9B;;AAEG;;;EACH,SAAA,SAAA,GAAA;IAAA,IAAA,KAAA,GAEC;IACA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAHR;IApBA;;AAEG;;;IACO,KAAA,CAAA,cAAA,GAAyC,eAAzC;IAEV;;AAEG;;IACO,KAAA,CAAA,cAAA,GAAyC,eAAzC;IAgBT,KAAI,CAAC,SAAL,GAAiB,WAAjB,CAJD,CAMC;;IACA,KAAI,CAAC,KAAL,GAAa,EAAb;IACA,KAAI,CAAC,KAAL,GAAa,EAAb,CARD,CAUC;;IACA,IAAI,gBAAgB,GAAG,KAAI,CAAC,eAAL,CAAqB,WAArB,CAAiC,SAAjC,CAAvB;;IACA,gBAAgB,CAAC,WAAjB,GAA+B,KAA/B;IACA,gBAAgB,CAAC,UAAjB,GAA8B,KAA9B;IACA,gBAAgB,CAAC,MAAjB,GAA0B,MAA1B;IACA,KAAI,CAAC,gBAAL,GAAwB,gBAAxB;IAEA,KAAI,CAAC,gBAAL,CAAsB,IAAtB,GAA6B,KAAI,CAAC,WAAL,CAAiB,MAAjB,CAA7B,CAjBD,CAmBC;;IACA,KAAI,CAAC,UAAL;;;EAEA;EAED;;;AAGG;;;EACO,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;IACC,MAAA,CAAA,SAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB;;IACA,IAAI,MAAM,CAAC,IAAP,EAAJ,EAAmB;MAClB,IAAI,gBAAgB,GAAG,KAAK,gBAA5B;MACA,IAAI,IAAI,GAAG,gBAAgB,CAAC,IAA5B;MACA,gBAAgB,CAAC,IAAjB,GAAwB,SAAxB;MACA,gBAAgB,CAAC,IAAjB,GAAwB,IAAxB;IACA;EACD,CARS;;EAeV,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;IAMhB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,gBAAL,CAAsB,OAAtB,CAAP;IACA,CAXe;;IALhB;;;;AAIG;SACH,UAAiB,KAAjB,EAA8B;MAC7B,KAAK,gBAAL,CAAsB,OAAtB,EAA+B,KAA/B;MACA,KAAK,SAAL;MACA,KAAK,mBAAL;IACA,CAJe;oBAAA;;EAAA,CAAhB;EAmBA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;IAMhB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,gBAAL,CAAsB,OAAtB,CAAP;IACA,CAXe;;IANhB;;;;;AAKG;SACH,UAAiB,KAAjB,EAA8B;MAC7B,KAAK,gBAAL,CAAsB,OAAtB,EAA+B,KAA/B;MACA,KAAK,SAAL;MACA,KAAK,mBAAL;IACA,CAJe;oBAAA;;EAAA,CAAhB;EAmBA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,MAAX,EAAe;IANf;;;;;AAKG;SACH,YAAA;MACC,OAAO,KAAK,CAAC,GAAN,CAAU,KAAK,KAAf,IAAwB,KAAK,KAApC;IACA,CAFc;oBAAA;;EAAA,CAAf;EAUA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,MAAX,EAAe;IANf;;;;;AAKG;SACH,YAAA;MACC,OAAO,CAAC,KAAK,CAAC,GAAN,CAAU,KAAK,KAAf,CAAD,GAAyB,KAAK,KAArC;IACA,CAFc;oBAAA;;EAAA,CAAf;EAIA;;;;AAIG;;EACI,SAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;IACC,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB;;IACA,KAAK,UAAL;EACA,CAHM;EAKP;;;AAGG;;;EACO,SAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA;IAEC,KAAK,cAAL,CAAoB,SAApB,GAAgC,CAAC,KAAK,IAAtC;IACA,KAAK,cAAL,CAAoB,YAApB,GAAmC,KAAK,IAAxC;;IAEA,IAAI,KAAK,UAAT,EAAqB;MACpB,KAAK,UAAL,CAAgB,EAAhB,GAAqB,KAAK,IAA1B;MACA,KAAK,UAAL,CAAgB,EAAhB,GAAqB,KAAK,IAA1B;IACA;;IAED,IAAI,KAAK,UAAT,EAAqB;MACpB,KAAK,UAAL,CAAgB,EAAhB,GAAqB,KAAK,IAA1B;MACA,KAAK,UAAL,CAAgB,EAAhB,GAAqB,KAAK,IAA1B;IACA;;IAED,KAAK,UAAL;;IAEA,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf;EACA,CAlBS;EAoBV;;;AAGG;;;EACO,SAAA,CAAA,SAAA,CAAA,UAAA,GAAV,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IACC,IAAI,KAAK,GAAW,CAApB;IACA,IAAI,CAAC,GAAG,CAAR;IACA,KAAK,CAAC,IAAN,CAAW,KAAK,MAAL,CAAY,QAAZ,EAAX,EAAmC,UAAC,MAAD,EAAO;MACzC,IAAI,MAAM,YAAY,cAAtB,EAAsC;QAErC,IAAI,CAAC,MAAM,CAAC,SAAR,IAAqB,CAAC,GAAG,CAA7B,EAAgC;UAC/B,KAAK;QACL;;QAED,MAAM,CAAC,UAAP,GAAoB,KAAK,GAAG,CAA5B;QACA,CAAC;MACD;IACD,CAVD;IAYA,IAAI,CAAC,GAAW,CAAhB;IAEA,KAAK,CAAC,IAAN,CAAW,KAAK,MAAL,CAAY,QAAZ,EAAX,EAAmC,UAAC,MAAD,EAAO;MACzC,IAAI,MAAM,YAAY,cAAtB,EAAsC;QAErC,MAAM,CAAC,KAAP,GAAe,KAAI,CAAC,KAAL,GAAc,KAA7B;QACA,MAAM,CAAC,KAAP,GAAe,KAAI,CAAC,KAApB;;QACA,IAAI,MAAM,CAAC,gBAAP,IAA2B,KAAI,CAAC,gBAApC,EAAsD;UACrD,MAAM,CAAC,EAAP,GAAY,KAAI,CAAC,KAAL,GAAc,KAAd,GAAuB,KAAK,CAAC,GAAN,CAAU,KAAI,CAAC,KAAf,CAAvB,GAAgD,MAAM,CAAC,UAAnE;UACA,MAAM,CAAC,EAAP,GAAY,CAAC,KAAI,CAAC,KAAN,GAAe,KAAf,GAAwB,KAAK,CAAC,GAAN,CAAU,KAAI,CAAC,KAAf,CAAxB,GAAiD,MAAM,CAAC,UAApE;QACA;;QAED,IAAI,UAAQ,GAAG,KAAf;;QACA,IAAK,MAAM,CAAC,QAAP,IAAmB,MAAM,CAAC,KAA1B,IAAmC,MAAM,CAAC,KAAP,CAAa,QAAb,CAAsB,QAA1D,IAAwE,MAAM,CAAC,QAAP,IAAmB,MAAM,CAAC,KAA1B,IAAmC,MAAM,CAAC,KAAP,CAAa,QAAb,CAAsB,QAArI,EAAgJ;UAC/I,UAAQ,GAAG,IAAX;QACA;;QAED,IAAI,GAAC,GAAW,CAAhB;QACA,MAAM,CAAC,SAAP,CAAiB,IAAjB,CAAsB,UAAC,QAAD,EAAS;UAC9B,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAtB;;UACA,IAAI,MAAJ,EAAY;YACX,IAAI,UAAJ,EAAc;cACb,MAAM,CAAC,MAAP,GAAgB,QAAQ,OAAO,GAAf,IAAoB,CAApB,GAAwB,MAAM,CAAC,UAAP,GAAoB,GAA5D;YACA,CAFD,MAGK;cACJ,MAAM,CAAC,MAAP,GAAgB,OAAO,GAAP,GAAW,CAAX,GAAe,MAAM,CAAC,UAAP,GAAoB,GAAnD;YACA;UACD;;UACD,GAAC;QACD,CAXD;;QAYA,IAAI,UAAJ,EAAc;UACb,CAAC;QACD,CAFD,MAGK;UACJ,CAAC;QACD;MACD;IACD,CAnCD;IAoCA,KAAK,WAAL;EACA,CAtDS;EAwDV;;;;;AAKG;;;EACI,SAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,MAArB,EAAsD;IAErD,IAAI,MAAJ,EAAY;MAEX;MACA,IAAI,KAAK,CAAC,QAAN,CAAe,MAAM,CAAC,MAAtB,KAAiC,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,MAArB,CAArC,EAAmE;QAClE,KAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,MAApC,EAA4C,CAAC,GAAG,GAAhD,EAAqD,CAAC,EAAtD,EAA0D;UACzD,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,IAAjB,GAAwB,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,IAAjB,IAAyB,gBAAjD;QACA;MACD;IAED;;IAED,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,MAApB;EAEA,CAfM;;EAiBG,SAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;IACC,IAAI,CAAC,GAAW,KAAK,aAAL,CAAmB,UAAnC;IACA,IAAI,CAAC,GAAW,KAAK,aAAL,CAAmB,WAAnC;IAEA,IAAI,EAAE,GAAW,KAAK,IAAtB;IACA,IAAI,EAAE,GAAW,KAAK,IAAtB;IAEA,IAAI,IAAI,GAAG,KAAK,CAAC,MAAN,CAAa;MAAE,CAAC,EAAE,CAAL;MAAQ,CAAC,EAAE;IAAX,CAAb,IAA+B,KAAK,CAAC,MAAN,CAAa;MAAE,CAAC,EAAE,EAAL;MAAS,CAAC,EAAE;IAAZ,CAAb,CAA/B,GAAgE,KAAK,CAAC,MAAN,CAAa;MAAE,CAAC,EAAE,CAAC,GAAG,EAAT;MAAa,CAAC,EAAE;IAAhB,CAAb,CAAhE,GAAqG,KAAK,CAAC,MAAN,CAAa;MAAE,CAAC,EAAE,CAAC,GAAG,EAAT;MAAa,CAAC,EAAE,CAAC,GAAG;IAApB,CAAb,CAArG,GAA8I,KAAK,CAAC,MAAN,CAAa;MAAE,CAAC,EAAE,CAAL;MAAQ,CAAC,EAAE;IAAX,CAAb,CAA9I,GAA6K,KAAK,CAAC,MAAN,CAAa;MAAE,CAAC,EAAE,CAAL;MAAQ,CAAC,EAAE;IAAX,CAAb,CAA7K,GAA4M,KAAK,CAAC,MAAN,CAAa;MAAE,CAAC,EAAE,CAAL;MAAQ,CAAC,EAAE;IAAX,CAAb,CAA5M,GAA2O,KAAK,CAAC,SAAN,EAAtP;IAEA,IAAI,gBAAgB,GAAG,KAAK,gBAA5B;;IACA,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,IAAzC,EAA+C;MAC9C,gBAAgB,CAAC,IAAjB,CAAsB,IAAtB,GAA6B,IAA7B;IACA;EACD,CAbS;;EAcX,OAAA,SAAA;AAAC,CA5QD,CAA+B,OAA/B,CAAA;;;AA8QA;;;;;AAKG;;AACH,QAAQ,CAAC,iBAAT,CAA2B,WAA3B,IAA0C,SAA1C","sourcesContent":["/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tif (series.columnsContainer == this.columnsContainer) {\r\n\t\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tlet column = dataItem.column;\r\n\t\t\t\t\tif (column) {\r\n\t\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif (inversed) {\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}