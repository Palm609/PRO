{"ast":null,"code":"/**\r\n * Cursor for XY chart\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Cursor } from \"./Cursor\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\n\nvar XYCursor =\n/** @class */\nfunction (_super) {\n  __extends(XYCursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYCursor() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Vertical cursor line element.\r\n     */\n\n\n    _this._lineX = new MutableValueDisposer();\n    /**\r\n     * Horizontal cursor line element.\r\n     */\n\n    _this._lineY = new MutableValueDisposer();\n    /**\r\n     * Horizontal [[Axis]].\r\n     */\n\n    _this._xAxis = new MutableValueDisposer();\n    /**\r\n     * Vertical [[Axis]].\r\n     */\n\n    _this._yAxis = new MutableValueDisposer();\n    _this._snapToDisposers = [];\n    _this.className = \"XYCursor\"; // Defaults\n\n    _this.behavior = \"zoomX\";\n    _this.maxPanOut = 0.1;\n    var interfaceColors = new InterfaceColorSet();\n    _this.snapOnPan = true; // Create selection element\n\n    var selection = _this.createChild(Sprite);\n\n    selection.shouldClone = false;\n    selection.fillOpacity = 0.2;\n    selection.fill = interfaceColors.getFor(\"alternativeBackground\");\n    selection.isMeasured = false;\n    selection.visible = false;\n    selection.interactionsEnabled = false;\n    _this.selection = selection;\n\n    _this._disposers.push(_this.selection); // Create cursor's vertical line\n\n\n    var lineX = _this.createChild(Sprite);\n\n    lineX.shouldClone = false;\n    lineX.stroke = interfaceColors.getFor(\"grid\");\n    lineX.fill = color();\n    lineX.strokeDasharray = \"3,3\";\n    lineX.isMeasured = false;\n    lineX.strokeOpacity = 0.4;\n    lineX.interactionsEnabled = false;\n    lineX.y = 0; // important\n\n    _this.lineX = lineX;\n\n    _this._disposers.push(_this.lineX); // Create cursor's horizontal line\n\n\n    var lineY = _this.createChild(Sprite);\n\n    lineY.shouldClone = false;\n    lineY.stroke = interfaceColors.getFor(\"grid\");\n    lineY.fill = color();\n    lineY.strokeDasharray = \"3,3\";\n    lineY.isMeasured = false;\n    lineY.strokeOpacity = 0.4;\n    lineY.interactionsEnabled = false;\n    lineY.x = 0; // important\n\n    _this.lineY = lineY;\n\n    _this._disposers.push(_this.lineY); // Add handler for size changes\n\n\n    _this.events.on(\"sizechanged\", _this.updateSize, _this, false);\n\n    _this._disposers.push(_this._lineX);\n\n    _this._disposers.push(_this._lineY);\n\n    _this._disposers.push(_this._xAxis);\n\n    _this._disposers.push(_this._yAxis);\n\n    _this.mask = _this;\n    _this.hideSeriesTooltipsOnSelection = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Updates cursor element dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateSize = function () {\n    if (this.lineX) {\n      this.lineX.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: this.innerHeight\n      });\n    }\n\n    if (this.lineY) {\n      this.lineY.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: this.innerWidth,\n        y: 0\n      });\n    }\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n      var behavior = this.behavior;\n\n      if (downPoint) {\n        var point = this.point;\n\n        if (this.lineX) {\n          point.x = this.lineX.pixelX;\n        }\n\n        if (this.lineY) {\n          point.y = this.lineY.pixelY;\n        }\n\n        var selection = this.selection;\n        var x = Math.min(point.x, downPoint.x);\n        var y = Math.min(point.y, downPoint.y);\n        var w = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\n        var h = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\n\n        switch (behavior) {\n          case \"zoomX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n\n          case \"zoomY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n\n          case \"selectX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n\n          case \"selectY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n        }\n\n        selection.x = x;\n        selection.y = y;\n        selection.path = $path.rectangle(w, h);\n        selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\n      } else {\n        if (this._generalBehavior != \"select\") {\n          this.selection.hide();\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.fixPoint = function (point) {\n    point.x = Math.max(0, point.x);\n    point.y = Math.max(0, point.y);\n    point.x = Math.min(this.pixelWidth, point.x);\n    point.y = Math.min(this.pixelHeight, point.y);\n    return point;\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * @param point Point to place cursor at\r\n   */\n\n\n  XYCursor.prototype.triggerMoveReal = function (point, force) {\n    _super.prototype.triggerMoveReal.call(this, point, force);\n\n    var snapToSeries = this.snapToSeries;\n\n    if (snapToSeries && !this.downPoint) {\n      if (snapToSeries instanceof XYSeries) {\n        if (snapToSeries.isHidden) {\n          this.updateLinePositions(point);\n        }\n      } else {\n        var allHidden_1 = true;\n        $array.each(snapToSeries, function (s) {\n          if (!s.isHidden) {\n            allHidden_1 = false;\n          }\n        });\n\n        if (allHidden_1) {\n          this.updateLinePositions(point);\n        }\n      }\n    } else {\n      this.updateLinePositions(point);\n    }\n\n    if (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\n      if (this._generalBehavior == \"pan\") {\n        this.getPanningRanges();\n        this.dispatch(\"panning\");\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateLinePositions = function (point) {\n    point = this.fixPoint(this.point);\n\n    if (this.lineX && this.lineX.visible && !this.xAxis) {\n      this.lineX.x = point.x;\n    }\n\n    if (this.lineY && this.lineY.visible && !this.yAxis) {\n      this.lineY.y = point.y;\n    }\n\n    this.updateSelection();\n  };\n\n  XYCursor.prototype.triggerDownReal = function (point) {\n    if (this.visible && !this.isHiding) {\n      if (this._generalBehavior == \"select\") {\n        this.selection.parent = this.parent;\n      }\n\n      if (this.fitsToBounds(point)) {\n        this.downPoint = {\n          x: point.x,\n          y: point.y\n        };\n        this.updatePoint(point); //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\n\n        this.point.x = this.downPoint.x;\n        this.point.y = this.downPoint.y;\n        var selection = this.selection;\n        var selectionX = this.downPoint.x;\n        var selectionY = this.downPoint.y;\n\n        if (this._usesSelection) {\n          selection.x = selectionX;\n          selection.y = selectionY;\n          selection.path = \"\";\n          selection.show();\n        }\n\n        _super.prototype.triggerDownReal.call(this, point);\n      } else {\n        this.downPoint = undefined;\n      }\n    } else {\n      this.downPoint = undefined;\n    }\n  };\n  /**\r\n   * Updates the coordinates of where pointer down event occurred\r\n   * (was pressed).\r\n   */\n\n\n  XYCursor.prototype.updatePoint = function (point) {\n    if (this.lineX) {\n      point.x = this.lineX.pixelX;\n    }\n\n    if (this.lineY) {\n      point.y = this.lineY.pixelY;\n    }\n  };\n  /**\r\n   * Handle action when cursor is released, which should perform an operation\r\n   * based on its `behavior`, like zoom.\r\n   *\r\n   * @param  point  Release point\r\n   */\n\n\n  XYCursor.prototype.triggerUpReal = function (point) {\n    if (this.hasMoved()) {\n      if (this.downPoint) {\n        this.upPoint = point;\n        this.updatePoint(this.upPoint);\n\n        if (this._generalBehavior != \"pan\") {\n          this.getRanges();\n        }\n\n        if (this._generalBehavior != \"select\") {\n          this.selection.hide();\n        }\n\n        _super.prototype.triggerUpReal.call(this, point);\n      }\n    } else {\n      if (this._generalBehavior != \"select\") {\n        this.selection.hide(0);\n      } else {\n        this.xRange = undefined;\n        this.yRange = undefined;\n        this.dispatchImmediately(\"selectended\");\n      } // reset cursor style, just in case\n\n\n      if (this._generalBehavior == \"pan\") {\n        var interaction = getInteraction();\n        interaction.setGlobalStyle(MouseCursorStyle.default);\n      }\n\n      this.dispatchImmediately(\"behaviorcanceled\");\n    }\n\n    this.downPoint = undefined;\n    this.dispatch(\"cursorpositionchanged\");\n  };\n  /**\r\n   * Calculates if the cursor has moved enough based on its `behavior`.\r\n   *\r\n   * @return Moved?\r\n   */\n\n\n  XYCursor.prototype.hasMoved = function () {\n    var distance;\n\n    if (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\n      distance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\n    } else if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\n      distance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\n    } else {\n      distance = $math.getDistance(this._upPointOrig, this._downPointOrig);\n    }\n\n    return distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\n  };\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  XYCursor.prototype.getPanningRanges = function () {\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\n    var currentX = $math.round(this.point.x / this.innerWidth, 5);\n    var currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\n    var deltaX = startX - currentX;\n    var deltaY = startY - currentY;\n    this.xRange = {\n      start: deltaX,\n      end: 1 + deltaX\n    };\n    this.yRange = {\n      start: deltaY,\n      end: 1 + deltaY\n    };\n\n    if (this.behavior == \"panX\") {\n      this.yRange.start = 0;\n      this.yRange.end = 1;\n    }\n\n    if (this.behavior == \"panY\") {\n      this.xRange.start = 0;\n      this.xRange.end = 1;\n    }\n  };\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  XYCursor.prototype.getRanges = function () {\n    if (this.lineX) {\n      this.upPoint.x = this.lineX.pixelX;\n    }\n\n    if (this.lineY) {\n      this.upPoint.y = this.lineY.pixelY;\n    } // @todo Is this needed?\n\n\n    $utils.used(this.selection);\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var endX = $math.round(this.upPoint.x / this.innerWidth, 5);\n    var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\n    var endY = 1 - $math.round(this.upPoint.y / this.innerHeight, 5);\n    this.xRange = {\n      start: $math.min(startX, endX),\n      end: $math.max(startX, endX)\n    };\n    this.yRange = {\n      start: $math.min(startY, endY),\n      end: $math.max(startY, endY)\n    };\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"behavior\", {\n    /**\r\n     * Behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"behavior\");\n    },\n\n    /**\r\n     * Cursor's behavior when it's moved with pointer down:\r\n     *\r\n     * * `\"zoomX\"` - zooms horizontally.\r\n     * * `\"zoomY\"` - zooms vertically.\r\n     * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n     * * `\"selectX\"` - selects a range horizontally.\r\n     * * `\"selectY\"` - selects a range vertically.\r\n     * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n     * * `\"panX\"` - moves (pans) current selection horizontally.\r\n     * * `\"panY\"` - moves (pans) current selection vertically.\r\n     * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n     * * `\"none\"` - does nothing with pointer down.\r\n     *\r\n     * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n     * and dragging it will start zooming the chart.\r\n     *\r\n     * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n     * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n     *\r\n     * @param value Bheavior\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"behavior\", value, true);\n      this._usesSelection = false;\n\n      if (value.indexOf(\"zoom\") != -1) {\n        this._generalBehavior = \"zoom\";\n        this._usesSelection = true;\n      }\n\n      if (value.indexOf(\"select\") != -1) {\n        this._generalBehavior = \"select\";\n        this._usesSelection = true;\n      }\n\n      if (value.indexOf(\"pan\") != -1) {\n        this._generalBehavior = \"pan\";\n        this._usesSelection = false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Determines whether Cursor should prevent default action on move.\r\n   *\r\n   * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n   *\r\n   * @return Prevent default?\r\n   */\n\n  XYCursor.prototype.shouldPreventGestures = function (touch) {\n    return (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineX\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fullWidthLineX\");\n    },\n\n    /**\r\n     * Cursor's horizontal line is expanded to take full width of the related\r\n     * Axis' cell/category.\r\n     *\r\n     * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n     * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * @param value Full width?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"fullWidthLineX\", value);\n\n      if (!value) {\n        this.updateSize();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineY\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fullWidthLineY\");\n    },\n\n    /**\r\n     * Cursor's vertical line is expanded to take full width of the related\r\n     * Axis' cell/category.\r\n     *\r\n     * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n     * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * @param value Full width?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"fullWidthLineY\", value);\n\n      if (!value) {\n        this.updateSize();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"hideSeriesTooltipsOnSelection\", {\n    /**\r\n     * @return hide tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\n    },\n\n    /**\r\n     * If set to `true` this will hide series tooltips when selecting with cursor.\r\n     *\r\n     * @since 4.5.15\r\n     * @param  value  hide tooltips?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxTooltipDistance\", {\n    /**\r\n     * @return Distance\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxTooltipDistance\");\n    },\n\n    /**\r\n     * If set to a numeric value, cursor will display closest series' tooltips\r\n     * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n     * it.\r\n     *\r\n     * Set it to `-1` to always force one tooltip, even if there are multiple\r\n     * data items in exactly same place.\r\n     *\r\n     * @since 4.7.18\r\n     * @param  value  Distance\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxTooltipDistance\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxPanOut\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxPanOut\");\n    },\n\n    /**\r\n     * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n     * This setting specifies relative value by how much we can pan out the plot\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxPanOut\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"xAxis\", {\n    /**\r\n     * @return X axis\r\n     */\n    get: function () {\n      return this._xAxis.get();\n    },\n\n    /**\r\n     * A reference to X [[Axis]].\r\n     *\r\n     * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n     * you have axis tooltip enabled and you want cursor line to be at the same\r\n     * position as tooltip.\r\n     *\r\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n     * [[ValueAxis]].\r\n     *\r\n     * @todo Description (review)\r\n     * @param axis X axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n\n      if (this._xAxis.get() != axis) {\n        this._xAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false), axis.events.on(\"rangechangestarted\", function (event) {\n          _this.hide(0);\n\n          _this.preventShow = true;\n        }, undefined, false), axis.events.on(\"rangechangeended\", function (event) {\n          _this.preventShow = false;\n\n          _this.hide(0);\n\n          _this.dispatch(\"cursorpositionchanged\");\n        }, undefined, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"yAxis\", {\n    /**\r\n     * @return Y Axis\r\n     */\n    get: function () {\n      return this._yAxis.get();\n    },\n\n    /**\r\n     * A reference to Y [[Axis]].\r\n     *\r\n     * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n     * you have axis tooltip enabled and you want cursor line to be at the same\r\n     * position as tooltip.\r\n     *\r\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n     * [[ValueAxis]].\r\n     *\r\n     * @todo Description (review)\r\n     * @param axis Y axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n\n      if (this._yAxis.get() != axis) {\n        this._yAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false), axis.events.on(\"rangechangestarted\", function (event) {\n          _this.hide(0);\n\n          _this.__disabled = true;\n        }, undefined, false), axis.events.on(\"rangechangeended\", function (event) {\n          _this.__disabled = false;\n\n          _this.hide(0);\n\n          _this.dispatch(\"cursorpositionchanged\");\n        }, undefined, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates Cursor's position when axis tooltip changes position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original Axis event\r\n   */\n\n  XYCursor.prototype.handleXTooltipPosition = function (event) {\n    var tooltip = this.xAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var x = point.x;\n    point.y = 1;\n\n    if (this.lineX) {\n      this.lineX.x = x;\n\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n\n    if (this.xAxis && this.fullWidthLineX) {\n      var startPoint = this.xAxis.currentItemStartPoint;\n      var endPoint = this.xAxis.currentItemEndPoint;\n\n      if (startPoint && endPoint) {\n        this.lineX.x = x;\n        var width = endPoint.x - startPoint.x;\n        this.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\n      }\n    }\n  };\n  /**\r\n   * Updates Cursor's position when Y axis changes position or scale.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original Axis event\r\n   */\n\n\n  XYCursor.prototype.handleYTooltipPosition = function (event) {\n    var tooltip = this.yAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var y = point.y;\n    point.x = 1;\n\n    if (this.lineY) {\n      this.lineY.y = y;\n\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n\n    if (this.yAxis && this.fullWidthLineY) {\n      var startPoint = this.yAxis.currentItemStartPoint;\n      var endPoint = this.yAxis.currentItemEndPoint;\n\n      if (startPoint && endPoint) {\n        this.lineY.y = y;\n        var height = endPoint.y - startPoint.y;\n        this.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\n      }\n    }\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"lineX\", {\n    /**\r\n     * @return Line element\r\n     */\n    get: function () {\n      return this._lineX.get();\n    },\n\n    /**\r\n     * A Line element to use for X axis.\r\n     *\r\n     * @param lineX Line\r\n     */\n    set: function (lineX) {\n      if (lineX) {\n        lineX.setElement(this.paper.add(\"path\"));\n\n        this._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\n\n        lineX.interactionsEnabled = false;\n        lineX.parent = this;\n      } else {\n        this._lineX.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"lineY\", {\n    /**\r\n     * @return Line element\r\n     */\n    get: function () {\n      return this._lineY.get();\n    },\n\n    /**\r\n     * A Line element to use Y axis.\r\n     *\r\n     * @param lineY Line\r\n     */\n    set: function (lineY) {\n      if (lineY) {\n        lineY.setElement(this.paper.add(\"path\"));\n\n        this._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\n\n        lineY.parent = this;\n        lineY.interactionsEnabled = false;\n      } else {\n        this._lineY.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"selection\", {\n    /**\r\n     * @return Selection rectangle\r\n     */\n    get: function () {\n      return this._selection;\n    },\n\n    /**\r\n     * A selection element ([[Sprite]]).\r\n     *\r\n     * @param selection Selection rectangle\r\n     */\n    set: function (selection) {\n      this._selection = selection;\n\n      if (selection) {\n        selection.element = this.paper.add(\"path\");\n        selection.parent = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n   * with real references.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  XYCursor.prototype.processConfig = function (config) {\n    var _this = this;\n\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\n        if (this.map.hasKey(config.xAxis)) {\n          config.xAxis = this.map.getKey(config.xAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\n          delete config.xAxis;\n        }\n      }\n\n      if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\n        if (this.map.hasKey(config.yAxis)) {\n          config.yAxis = this.map.getKey(config.yAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\n          delete config.yAxis;\n        }\n      }\n\n      if ($type.hasValue(config.snapToSeries)) {\n        var snapTo_1 = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\n        var snapError_1 = false;\n        $array.each(snapTo_1, function (snap, index) {\n          if ($type.isString(snap)) {\n            if (_this.map.hasKey(snap)) {\n              snapTo_1[index] = _this.map.getKey(snap);\n            } else {\n              _this.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\n\n              snapError_1 = true;\n            }\n          }\n        });\n\n        if (snapError_1) {\n          delete config.snapToSeries;\n        } else {\n          config.snapToSeries = snapTo_1;\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"snapToSeries\", {\n    /**\r\n     * @return {XYSeries | XYSeries[]}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"snapToSeries\");\n    },\n\n    /**\r\n     * Specifies to which series cursor lines should be snapped.\r\n     *\r\n     * Can be a single series instance or an array of series.\r\n     *\r\n     * @param {XYSeries | XYSeries[]}\r\n     */\n    set: function (series) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"snapToSeries\", series)) {\n        if (series instanceof XYSeries) {\n          series = [series];\n        }\n\n        if (this._snapToDisposers) {\n          $array.each(this._snapToDisposers, function (disposer) {\n            disposer.dispose();\n          });\n        }\n\n        this._snapToDisposers = [];\n\n        if (series) {\n          $array.each(series, function (s) {\n            _this._snapToDisposers.push(s.events.on(\"tooltipshownat\", function () {\n              _this.handleSnap(s);\n            }, undefined, false));\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"snapOnPan\", {\n    /**\r\n     * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n     * the chart? (when `behavior == \"panX\"`)\r\n     *\r\n     * @default true\r\n     * @since 4.10.17\r\n     * @return Snap on pan?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"snapOnPan\");\n    },\n\n    /**\r\n     * @param value Snap on pan?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"snapOnPan\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Snaps the zoom selection after chart is panned.\r\n   *\r\n   * @ignore\r\n   */\n\n  XYCursor.prototype.handleSnap = function (series) {\n    if (!this.downPoint) {\n      var x = series.getTooltipX() + series.xAxis.pixelX;\n      var y = series.getTooltipY() + series.yAxis.pixelY;\n\n      if (this.xAxis) {\n        if (this.xAxis.renderer.opposite) {\n          y -= this.pixelHeight;\n        }\n      }\n\n      this.point = {\n        x: x,\n        y: y\n      };\n      this.getPositions();\n      var xx = x;\n      var yy = y;\n      x -= this.pixelWidth;\n\n      if (this.yAxis) {\n        if (this.yAxis.renderer.opposite) {\n          x += this.pixelWidth;\n        }\n      }\n\n      var tooltip = series.tooltip;\n      var duration = tooltip.animationDuration;\n      var easing = tooltip.animationEasing;\n      var xAxis = series.xAxis;\n      var yAxis = series.yAxis;\n\n      if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n        series.yAxis.showTooltipAtPosition(this.yPosition);\n        series.xAxis.showTooltipAtPosition(this.xPosition);\n      } else {\n        if (series.baseAxis == series.xAxis) {\n          series.yAxis.showTooltipAtPosition(this.yPosition);\n        }\n\n        if (series.baseAxis == series.yAxis) {\n          series.xAxis.showTooltipAtPosition(this.xPosition);\n        }\n      }\n\n      this.lineX.animate([{\n        property: \"y\",\n        to: y\n      }], duration, easing);\n      this.lineY.animate([{\n        property: \"x\",\n        to: x\n      }], duration, easing);\n\n      if (!this.xAxis) {\n        this.lineX.animate([{\n          property: \"x\",\n          to: xx\n        }], duration, easing);\n      }\n\n      if (!this.yAxis) {\n        this.lineY.animate([{\n          property: \"y\",\n          to: yy\n        }], duration, easing);\n      }\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  XYCursor.prototype.dispose = function () {\n    this.hide(0);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return XYCursor;\n}(Cursor);\n\nexport { XYCursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;","map":{"version":3,"sources":["../../../../../src/.internal/charts/cursors/XYCursor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t */\r\n\tsnapToSeries?: XYSeries | XYSeries[];\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t */\r\n\thideSeriesTooltipsOnSelection?: boolean;\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t */\r\n\tmaxTooltipDistance?: number;\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t */\r\n\tsnapOnPan?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposers: IDisposer[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.snapOnPan = true;\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.visible = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\tthis.hideSeriesTooltipsOnSelection = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t\tlet snapToSeries = this.snapToSeries;\r\n\t\tif ((snapToSeries && !this.downPoint)) {\r\n\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\tif (snapToSeries.isHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet allHidden = true;\r\n\t\t\t\t$array.each(snapToSeries, (s) => {\r\n\t\t\t\t\tif (!s.isHidden) {\r\n\t\t\t\t\t\tallHidden = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this._generalBehavior == \"select\") {\r\n\t\t\t\tthis.selection.parent = this.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handle action when cursor is released, which should perform an operation\r\n\t * based on its `behavior`, like zoom.\r\n\t * \r\n\t * @param  point  Release point\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint): void {\r\n\t\tif (this.hasMoved()) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tif (this._generalBehavior != \"pan\") {\r\n\t\t\t\t\tthis.getRanges();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\tthis.selection.hide(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.xRange = undefined;\r\n\t\t\t\tthis.yRange = undefined;\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the cursor has moved enough based on its `behavior`.\r\n\t * \r\n\t * @return Moved?\r\n\t */\r\n\tprivate hasMoved(): boolean {\r\n\t\tlet distance: number;\r\n\t\tif (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\r\n\t\t\tdistance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\r\n\t\t\tdistance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdistance = $math.getDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\treturn distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = startY - currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = 1 - $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * `\"zoomX\"` - zooms horizontally.\r\n\t * * `\"zoomY\"` - zooms vertically.\r\n\t * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n\t * * `\"selectX\"` - selects a range horizontally.\r\n\t * * `\"selectY\"` - selects a range vertically.\r\n\t * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n\t * * `\"panX\"` - moves (pans) current selection horizontally.\r\n\t * * `\"panY\"` - moves (pans) current selection vertically.\r\n\t * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n\t * * `\"none\"` - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n\t * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param  value  hide tooltips?\r\n\t */\r\n\tpublic set hideSeriesTooltipsOnSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return hide tooltip?\r\n\t */\r\n\tpublic get hideSeriesTooltipsOnSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t * @param  value  Distance\r\n\t */\r\n\tpublic set maxTooltipDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"maxTooltipDistance\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance\r\n\t */\r\n\tpublic get maxTooltipDistance(): number {\r\n\t\treturn this.getPropertyValue(\"maxTooltipDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.preventShow = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.preventShow = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\t\tpoint.y = 1;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\t\tpoint.x = 1;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries)) {\r\n\t\t\t\tlet snapTo = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\r\n\t\t\t\tlet snapError = false;\r\n\t\t\t\t$array.each(snapTo, (snap, index) => {\r\n\t\t\t\t\tif ($type.isString(snap)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(snap)) {\r\n\t\t\t\t\t\t\tsnapTo[index] = this.map.getKey(snap);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\r\n\t\t\t\t\t\t\tsnapError = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (snapError) {\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconfig.snapToSeries = snapTo;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t *\r\n\t * @param {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries | XYSeries[]) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\r\n\t\t\tif (series instanceof XYSeries) {\r\n\t\t\t\tseries = [series];\r\n\t\t\t}\r\n\t\t\tif (this._snapToDisposers) {\r\n\t\t\t\t$array.each(this._snapToDisposers, (disposer) => {\r\n\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tthis._snapToDisposers = [];\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\t$array.each(series, (s) => {\r\n\t\t\t\t\tthis._snapToDisposers.push(s.events.on(\"tooltipshownat\", () => { this.handleSnap(s) }, undefined, false));\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries | XYSeries[] {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t * @return Snap on pan?\r\n\t */\r\n\tpublic get snapOnPan(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapOnPan\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param value Snap on pan?\r\n\t */\r\n\tpublic set snapOnPan(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapOnPan\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Snaps the zoom selection after chart is panned.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic handleSnap(series: XYSeries) {\r\n\t\tif (!this.downPoint) {\r\n\t\t\tlet x = series.getTooltipX() + series.xAxis.pixelX;\r\n\t\t\tlet y = series.getTooltipY() + series.yAxis.pixelY;\r\n\r\n\t\t\tif (this.xAxis) {\r\n\t\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = { x: x, y: y };\r\n\t\t\tthis.getPositions();\r\n\r\n\t\t\tlet xx = x;\r\n\t\t\tlet yy = y;\r\n\r\n\t\t\tx -= this.pixelWidth;\r\n\r\n\t\t\tif (this.yAxis) {\r\n\t\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\t\tx += this.pixelWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltip = series.tooltip;\r\n\t\t\tlet duration = tooltip.animationDuration;\r\n\t\t\tlet easing = tooltip.animationEasing;\r\n\r\n\r\n\t\t\tlet xAxis = series.xAxis;\r\n\t\t\tlet yAxis = series.yAxis;\r\n\r\n\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\t\tif (!this.xAxis) {\r\n\t\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t\t}\r\n\t\t\tif (!this.yAxis) {\r\n\t\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}