{"ast":null,"code":"import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { createSimplifyCore } from './simplify/simplifyCore.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nimport { createResolve } from './simplify/resolve.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    fraction,\n    bignumber,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    SymbolNode\n  });\n  var simplifyCore = createSimplifyCore({\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    ParenthesisNode\n  });\n  var resolve = createResolve({\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  });\n  var {\n    isCommutative,\n    isAssociative,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  There is currently one option available:\n   *  - `exactFractions`: a boolean which is `true` by default.\n   *  - `fractionsLimit`: when `exactFractions` is true, a fraction will be returned\n   *    only when both numerator and denominator are smaller than `fractionsLimit`.\n   *    Default value is 10000.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     derivative, parse, evaluate, rationalize\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, {}, {});\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Object, Object': function stringObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, {}, {});\n    },\n    'string, Array, Object': function stringArrayObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Object, Object': function NodeObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, {}, {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, {}, {});\n    },\n    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      rules = _buildRules(rules);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        for (var i = 0; i < rules.length; i++) {\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n          } else {\n            flatten(res);\n            res = applyRule(res, rules[i]);\n          }\n\n          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n\n      return res;\n    }\n  });\n  simplify.simplifyCore = simplifyCore;\n  simplify.resolve = resolve;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  {\n    l: 'n-n1',\n    r: 'n+-n1'\n  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator\n  {\n    l: '-(c*v)',\n    r: '(-c) * v'\n  }, // make non-constant terms positive\n  {\n    l: '-v',\n    r: '(-1) * v'\n  }, {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, // expand nested exponentiation\n  {\n    l: '(n ^ n1) ^ n2',\n    r: 'n ^ (n1 * n2)'\n  }, // collect like factors\n  {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    l: 'n * n^n1',\n    r: 'n^(n1+1)'\n  }, {\n    l: 'n^n1 * n^n2',\n    r: 'n^(n1+n2)'\n  }, // collect like terms\n  {\n    l: 'n+n',\n    r: '2*n'\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'n1*n2 + n2',\n    r: '(n1+1)*n2'\n  }, {\n    l: 'n1*n3 + n2*n3',\n    r: '(n1+n2)*n3'\n  }, // remove parenthesis in the case of negating a quantitiy\n  {\n    l: 'n1 + -1 * (n2 + n3)',\n    r: 'n1 + -1 * n2 + -1 * n3'\n  }, simplifyConstant, {\n    l: '(-n)*n1',\n    r: '-(n*n1)'\n  }, // make factors positive (and undo 'make non-constant terms positive')\n  // ordering of constants\n  {\n    l: 'c+v',\n    r: 'v+c',\n    context: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'v*c',\n    r: 'c*v',\n    context: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    l: 'n*(n1^-1)',\n    r: 'n/n1'\n  }, // undo replace 'divide'\n  {\n    l: 'n*n1^-n2',\n    r: 'n/n1^n2'\n  }, {\n    l: 'n1^-1',\n    r: '1/n1'\n  }, {\n    l: 'n*(n1/n2)',\n    r: '(n*n1)/n2'\n  }, // '*' before '/'\n  {\n    l: 'n-(n1+n2)',\n    r: 'n-n1-n2'\n  }, // '-' before '+'\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  {\n    l: '1*n',\n    r: 'n'\n  }, // this pattern can be produced by simplifyConstant\n  {\n    l: 'n1/(n2/n3)',\n    r: '(n1*n3)/n2'\n  }];\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n  function _buildRules(rules) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          {\n            var lr = rule.split('->');\n\n            if (lr.length === 2) {\n              rule = {\n                l: lr[0],\n                r: lr[1]\n              };\n            } else {\n              throw SyntaxError('Could not parse rule: ' + rule);\n            }\n          }\n\n        /* falls through */\n\n        case 'object':\n          newRule = {\n            l: removeParens(parse(rule.l)),\n            r: removeParens(parse(rule.r))\n          };\n\n          if (rule.context) {\n            newRule.evaluate = rule.context;\n          }\n\n          if (rule.evaluate) {\n            newRule.evaluate = parse(rule.evaluate);\n          }\n\n          if (isAssociative(newRule.l)) {\n            var makeNode = createMakeNodeFunction(newRule.l);\n\n            var expandsym = _getExpandPlaceholderSymbol();\n\n            newRule.expanded = {};\n            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n            // This helps to match the newRule against nodes returned from getSplits() later on.\n\n            flatten(newRule.expanded.l);\n            unflattenr(newRule.expanded.l);\n            newRule.expanded.r = makeNode([newRule.r, expandsym]);\n          }\n\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  var applyRule = typed('applyRule', {\n    'Node, Object': function NodeObject(node, rule) {\n      // console.log('Entering applyRule(' + node.toString() + ')')\n      // Do not clone node unless we find a match\n      var res = node; // First replace our child nodes with their simplified versions\n      // If a child could not be simplified, the assignments will have\n      // no effect since the node is returned unchanged\n\n      if (res instanceof OperatorNode || res instanceof FunctionNode) {\n        if (res.args) {\n          for (var i = 0; i < res.args.length; i++) {\n            res.args[i] = applyRule(res.args[i], rule);\n          }\n        }\n      } else if (res instanceof ParenthesisNode) {\n        if (res.content) {\n          res.content = applyRule(res.content, rule);\n        }\n      } // Try to match a rule against this node\n\n\n      var repl = rule.r;\n\n      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n      if (!matches && rule.expanded) {\n        repl = rule.expanded.r;\n        matches = _ruleMatch(rule.expanded.l, res)[0];\n      }\n\n      if (matches) {\n        // const before = res.toString({parenthesis: 'all'})\n        // Create a new node by cloning the rhs of the matched rule\n        // we keep any implicit multiplication state if relevant\n        var implicit = res.implicit;\n        res = repl.clone();\n\n        if (implicit && 'implicit' in repl) {\n          res.implicit = true;\n        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n        res = res.transform(function (node) {\n          if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n            return matches.placeholders[node.name].clone();\n          } else {\n            return node;\n          }\n        }); // const after = res.toString({parenthesis: 'all'})\n        // console.log('Simplified ' + before + ' to ' + after)\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      rightArgs = node.args.slice(1);\n      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n      res.push(makeNode([node.args[0], right]));\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i]);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            return [];\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, rule.context);\n        var splitMatches = [];\n\n        for (var _i = 0; _i < splits.length; _i++) {\n          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});","map":{"version":3,"names":["isConstantNode","isParenthesisNode","factory","createUtil","createSimplifyCore","createSimplifyConstant","createResolve","hasOwnProperty","name","dependencies","createSimplify","_ref","config","typed","parse","add","subtract","multiply","divide","pow","isZero","equal","fraction","bignumber","mathWithTransform","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode","simplifyConstant","simplifyCore","resolve","isCommutative","isAssociative","flatten","unflattenr","unflattenl","createMakeNodeFunction","simplify","string","expr","rules","stringObject","scope","stringObjectObject","options","stringArray","stringArrayObject","stringArrayObjectObject","NodeObject","NodeObjectObject","Node","NodeArray","NodeArrayObject","NodeArrayObjectObject","_buildRules","res","removeParens","visited","str","toString","parenthesis","_lastsym","i","length","applyRule","node","transform","path","parent","content","SUPPORTED_CONSTANTS","true","false","e","Infinity","LN2","LN10","LOG2E","LOG10E","NaN","phi","pi","SQRT1_2","SQRT2","tau","l","r","context","commutative","ruleSet","rule","newRule","ruleType","lr","split","SyntaxError","evaluate","makeNode","expandsym","_getExpandPlaceholderSymbol","expanded","clone","TypeError","push","args","repl","matches","_ruleMatch","implicit","isSymbolNode","placeholders","getSplits","right","rightArgs","slice","splice","mergeMatch","match1","match2","key","_exactMatch","_key","combineChildMatches","list1","list2","merged","i1","i2","mergeChildMatches","childMatches","sets","reduce","uniqueSets","unique","s","JSON","stringify","isSplit","op","fn","childMatch","splits","splitMatches","_i","matchSet","concat","Error","substring","value","p","q"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/ReactMumer-main/node_modules/mathjs/lib/esm/function/algebra/simplify.js"],"sourcesContent":["import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { createSimplifyCore } from './simplify/simplifyCore.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nimport { createResolve } from './simplify/resolve.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    fraction,\n    bignumber,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    SymbolNode\n  });\n  var simplifyCore = createSimplifyCore({\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    ConstantNode,\n    OperatorNode,\n    FunctionNode,\n    ParenthesisNode\n  });\n  var resolve = createResolve({\n    parse,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  });\n  var {\n    isCommutative,\n    isAssociative,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  There is currently one option available:\n   *  - `exactFractions`: a boolean which is `true` by default.\n   *  - `fractionsLimit`: when `exactFractions` is true, a fraction will be returned\n   *    only when both numerator and denominator are smaller than `fractionsLimit`.\n   *    Default value is 10000.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     derivative, parse, evaluate, rationalize\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, {}, {});\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Object, Object': function stringObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, {}, {});\n    },\n    'string, Array, Object': function stringArrayObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Object, Object': function NodeObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, {}, {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, {}, {});\n    },\n    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      rules = _buildRules(rules);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        for (var i = 0; i < rules.length; i++) {\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n          } else {\n            flatten(res);\n            res = applyRule(res, rules[i]);\n          }\n\n          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n\n      return res;\n    }\n  });\n  simplify.simplifyCore = simplifyCore;\n  simplify.resolve = resolve;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  {\n    l: 'n-n1',\n    r: 'n+-n1'\n  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator\n  {\n    l: '-(c*v)',\n    r: '(-c) * v'\n  }, // make non-constant terms positive\n  {\n    l: '-v',\n    r: '(-1) * v'\n  }, {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, // expand nested exponentiation\n  {\n    l: '(n ^ n1) ^ n2',\n    r: 'n ^ (n1 * n2)'\n  }, // collect like factors\n  {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    l: 'n * n^n1',\n    r: 'n^(n1+1)'\n  }, {\n    l: 'n^n1 * n^n2',\n    r: 'n^(n1+n2)'\n  }, // collect like terms\n  {\n    l: 'n+n',\n    r: '2*n'\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'n1*n2 + n2',\n    r: '(n1+1)*n2'\n  }, {\n    l: 'n1*n3 + n2*n3',\n    r: '(n1+n2)*n3'\n  }, // remove parenthesis in the case of negating a quantitiy\n  {\n    l: 'n1 + -1 * (n2 + n3)',\n    r: 'n1 + -1 * n2 + -1 * n3'\n  }, simplifyConstant, {\n    l: '(-n)*n1',\n    r: '-(n*n1)'\n  }, // make factors positive (and undo 'make non-constant terms positive')\n  // ordering of constants\n  {\n    l: 'c+v',\n    r: 'v+c',\n    context: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'v*c',\n    r: 'c*v',\n    context: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    l: 'n*(n1^-1)',\n    r: 'n/n1'\n  }, // undo replace 'divide'\n  {\n    l: 'n*n1^-n2',\n    r: 'n/n1^n2'\n  }, {\n    l: 'n1^-1',\n    r: '1/n1'\n  }, {\n    l: 'n*(n1/n2)',\n    r: '(n*n1)/n2'\n  }, // '*' before '/'\n  {\n    l: 'n-(n1+n2)',\n    r: 'n-n1-n2'\n  }, // '-' before '+'\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  {\n    l: '1*n',\n    r: 'n'\n  }, // this pattern can be produced by simplifyConstant\n  {\n    l: 'n1/(n2/n3)',\n    r: '(n1*n3)/n2'\n  }];\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n  function _buildRules(rules) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          {\n            var lr = rule.split('->');\n\n            if (lr.length === 2) {\n              rule = {\n                l: lr[0],\n                r: lr[1]\n              };\n            } else {\n              throw SyntaxError('Could not parse rule: ' + rule);\n            }\n          }\n\n        /* falls through */\n\n        case 'object':\n          newRule = {\n            l: removeParens(parse(rule.l)),\n            r: removeParens(parse(rule.r))\n          };\n\n          if (rule.context) {\n            newRule.evaluate = rule.context;\n          }\n\n          if (rule.evaluate) {\n            newRule.evaluate = parse(rule.evaluate);\n          }\n\n          if (isAssociative(newRule.l)) {\n            var makeNode = createMakeNodeFunction(newRule.l);\n\n            var expandsym = _getExpandPlaceholderSymbol();\n\n            newRule.expanded = {};\n            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n            // This helps to match the newRule against nodes returned from getSplits() later on.\n\n            flatten(newRule.expanded.l);\n            unflattenr(newRule.expanded.l);\n            newRule.expanded.r = makeNode([newRule.r, expandsym]);\n          }\n\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  var applyRule = typed('applyRule', {\n    'Node, Object': function NodeObject(node, rule) {\n      // console.log('Entering applyRule(' + node.toString() + ')')\n      // Do not clone node unless we find a match\n      var res = node; // First replace our child nodes with their simplified versions\n      // If a child could not be simplified, the assignments will have\n      // no effect since the node is returned unchanged\n\n      if (res instanceof OperatorNode || res instanceof FunctionNode) {\n        if (res.args) {\n          for (var i = 0; i < res.args.length; i++) {\n            res.args[i] = applyRule(res.args[i], rule);\n          }\n        }\n      } else if (res instanceof ParenthesisNode) {\n        if (res.content) {\n          res.content = applyRule(res.content, rule);\n        }\n      } // Try to match a rule against this node\n\n\n      var repl = rule.r;\n\n      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n      if (!matches && rule.expanded) {\n        repl = rule.expanded.r;\n        matches = _ruleMatch(rule.expanded.l, res)[0];\n      }\n\n      if (matches) {\n        // const before = res.toString({parenthesis: 'all'})\n        // Create a new node by cloning the rhs of the matched rule\n        // we keep any implicit multiplication state if relevant\n        var implicit = res.implicit;\n        res = repl.clone();\n\n        if (implicit && 'implicit' in repl) {\n          res.implicit = true;\n        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n        res = res.transform(function (node) {\n          if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n            return matches.placeholders[node.name].clone();\n          } else {\n            return node;\n          }\n        }); // const after = res.toString({parenthesis: 'all'})\n        // console.log('Simplified ' + before + ' to ' + after)\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      rightArgs = node.args.slice(1);\n      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n      res.push(makeNode([node.args[0], right]));\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i]);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            return [];\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, rule.context);\n        var splitMatches = [];\n\n        for (var _i = 0; _i < splits.length; _i++) {\n          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}