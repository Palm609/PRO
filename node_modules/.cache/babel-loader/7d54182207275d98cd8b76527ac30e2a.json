{"ast":null,"code":"/**\r\n * Module for \"Colorize\" filter.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Filter } from \"./Filter\";\nimport { registry } from \"../../Registry\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a \"Colorize\" filter.\r\n */\n\nvar ColorizeFilter =\n/** @class */\nfunction (_super) {\n  __extends(ColorizeFilter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColorizeFilter() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColorizeFilter\"; // Create elements\n    // NOTE: we do not need to add each individual element to `_disposers`\n    // because `filterPrimitives` has an event handler which automatically adds\n    // anything added to it to `_disposers`\n\n    _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\n\n    _this.feColorMatrix.attr({\n      \"type\": \"matrix\"\n    }); //this.feColorMatrix.setAttribute(\"in\", \"SourceAlpha\");\n\n\n    _this.filterPrimitives.push(_this.feColorMatrix); // Set default properties\n\n\n    _this.intensity = 1;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)applies colors to the already existing filter by modifying filyer's\r\n   * color matrix element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColorizeFilter.prototype.applyFilter = function () {\n    var i = this.intensity;\n    var ii = 1 - i;\n    var r;\n    var g;\n    var b;\n    var color = this.color;\n\n    if (color && color.rgb) {\n      r = color.rgb.r / 255 * i;\n      g = color.rgb.g / 255 * i;\n      b = color.rgb.b / 255 * i;\n    } else {\n      r = 0;\n      g = 0;\n      b = 0;\n    }\n\n    this.feColorMatrix.attr({\n      \"values\": ii + \" 0 0 0 \" + r + \" 0 \" + ii + \" 0 0 \" + g + \" 0 0 \" + ii + \" 0 \" + b + \" 0 0 0 1 0\"\n    });\n  };\n\n  Object.defineProperty(ColorizeFilter.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.properties[\"color\"];\n    },\n\n    /**\r\n     * Target color to apply to the element.\r\n     *\r\n     * Depending on the `intensity`, all colors of the target element will steer\r\n     * towards this color.\r\n     *\r\n     * E.g. setting to `am4core.color(\"greener\")` will make all colors greener.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.properties[\"color\"] = value;\n      this.applyFilter();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorizeFilter.prototype, \"intensity\", {\n    /**\r\n     * @return Intensity (0-1)\r\n     */\n    get: function () {\n      return this.properties.intensity;\n    },\n\n    /**\r\n     * Intensity of the color (0-1).\r\n     *\r\n     * The bigger the number the more of a `color` target's colors will become.\r\n     *\r\n     * 0 means the colors will remain as they are.\r\n     * 1 means all colors will become the target `color`.\r\n     *\r\n     * @default 1\r\n     * @param value  Intensity (0-1)\r\n     */\n    set: function (value) {\n      this.properties.intensity = value;\n      this.applyFilter();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColorizeFilter;\n}(Filter);\n\nexport { ColorizeFilter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ColorizeFilter\"] = ColorizeFilter;","map":{"version":3,"sources":["../../../../../../src/.internal/core/rendering/filters/ColorizeFilter.ts"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;AAKG;;AACH,SAAS,MAAT,QAAyC,UAAzC;AAGA,SAAS,QAAT,QAAyB,gBAAzB;AA4BC;AAGD;;;;;AAKG;;AAEH;;AAEG;;AACH,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAoBnC;;AAEG;;;EACH,SAAA,cAAA,GAAA;IAAA,IAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;IAEC,KAAI,CAAC,SAAL,GAAiB,gBAAjB,CAFD,CAIC;IACA;IACA;IACA;;IACA,KAAI,CAAC,aAAL,GAAqB,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,eAAf,CAArB;;IACA,KAAI,CAAC,aAAL,CAAmB,IAAnB,CAAwB;MAAE,QAAQ;IAAV,CAAxB,EATD,CAUC;;;IACA,KAAI,CAAC,gBAAL,CAAsB,IAAtB,CAA2B,KAAI,CAAC,aAAhC,EAXD,CAaC;;;IACA,KAAI,CAAC,SAAL,GAAiB,CAAjB;;IAEA,KAAI,CAAC,UAAL;;;EACA;EAED;;;;;AAKG;;;EACI,cAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;IAEC,IAAI,CAAC,GAAW,KAAK,SAArB;IACA,IAAI,EAAE,GAAG,IAAI,CAAb;IAEA,IAAI,CAAJ;IACA,IAAI,CAAJ;IACA,IAAI,CAAJ;IAEA,IAAM,KAAK,GAAG,KAAK,KAAnB;;IAEA,IAAI,KAAK,IAAI,KAAK,CAAC,GAAnB,EAAwB;MACvB,CAAC,GAAG,KAAK,CAAC,GAAN,CAAU,CAAV,GAAc,GAAd,GAAoB,CAAxB;MACA,CAAC,GAAG,KAAK,CAAC,GAAN,CAAU,CAAV,GAAc,GAAd,GAAoB,CAAxB;MACA,CAAC,GAAG,KAAK,CAAC,GAAN,CAAU,CAAV,GAAc,GAAd,GAAoB,CAAxB;IAEA,CALD,MAKO;MACN,CAAC,GAAG,CAAJ;MACA,CAAC,GAAG,CAAJ;MACA,CAAC,GAAG,CAAJ;IACA;;IAED,KAAK,aAAL,CAAmB,IAAnB,CAAwB;MAAE,UAAU,EAAE,GAAG,SAAL,GAAiB,CAAjB,GAAqB,KAArB,GAA6B,EAA7B,GAAkC,OAAlC,GAA4C,CAA5C,GAAgD,OAAhD,GAA0D,EAA1D,GAA+D,KAA/D,GAAuE,CAAvE,GAA2E;IAAvF,CAAxB;EACA,CAvBM;;EAmCP,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;IAKhB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,UAAL,CAAgB,OAAhB,CAAP;IACA,CAVe;;IAVhB;;;;;;;;;AASG;SACH,UAAiB,KAAjB,EAA6C;MAC5C,KAAK,UAAL,CAAgB,OAAhB,IAA2B,KAA3B;MACA,KAAK,WAAL;IACA,CAHe;oBAAA;;EAAA,CAAhB;EAuBA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;IAKpB;;AAEG;SACH,YAAA;MACC,OAAO,KAAK,UAAL,CAAgB,SAAvB;IACA,CAVmB;;IAXpB;;;;;;;;;;AAUG;SACH,UAAqB,KAArB,EAAkC;MACjC,KAAK,UAAL,CAAgB,SAAhB,GAA4B,KAA5B;MACA,KAAK,WAAL;IACA,CAHmB;oBAAA;;EAAA,CAApB;EAYD,OAAA,cAAA;AAAC,CAtHD,CAAoC,MAApC,CAAA;;;AAyHA;;;;;AAKG;;AACH,QAAQ,CAAC,iBAAT,CAA2B,gBAA3B,IAA+C,cAA/C","sourcesContent":["/**\r\n * Module for \"Colorize\" filter.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter, FilterProperties } from \"./Filter\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { Color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $type from \"../../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines additional properties relative to the \"Colorize\" filter.\r\n */\r\nexport interface ColorizeFilterProperties extends FilterProperties {\r\n\r\n\t/**\r\n\t * Color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n\t/**\r\n\t * Intensity. (0-1)\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tintensity: number;\r\n\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"Colorize\" filter.\r\n */\r\nexport class ColorizeFilter extends Filter {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: ColorizeFilterProperties;\r\n\r\n\t/**\r\n\t * A storage for Filter property/value pairs.\r\n\t * @see [@link ColorizeFilterProperties]\r\n\t */\r\n\t//public propertyValues: Dictionary<ColorizeFilterProperties, any>;\r\n\r\n\t/**\r\n\t * Reference to the `<feColorMatrix>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic feColorMatrix: AMElement;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColorizeFilter\";\r\n\r\n\t\t// Create elements\r\n\t\t// NOTE: we do not need to add each individual element to `_disposers`\r\n\t\t// because `filterPrimitives` has an event handler which automatically adds\r\n\t\t// anything added to it to `_disposers`\r\n\t\tthis.feColorMatrix = this.paper.add(\"feColorMatrix\");\r\n\t\tthis.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n\t\t//this.feColorMatrix.setAttribute(\"in\", \"SourceAlpha\");\r\n\t\tthis.filterPrimitives.push(this.feColorMatrix);\r\n\r\n\t\t// Set default properties\r\n\t\tthis.intensity = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)applies colors to the already existing filter by modifying filyer's\r\n\t * color matrix element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyFilter(): void {\r\n\r\n\t\tlet i: number = this.intensity;\r\n\t\tlet ii = 1 - i;\r\n\r\n\t\tlet r: number;\r\n\t\tlet g: number;\r\n\t\tlet b: number;\r\n\r\n\t\tconst color = this.color;\r\n\r\n\t\tif (color && color.rgb) {\r\n\t\t\tr = color.rgb.r / 255 * i;\r\n\t\t\tg = color.rgb.g / 255 * i;\r\n\t\t\tb = color.rgb.b / 255 * i;\r\n\r\n\t\t} else {\r\n\t\t\tr = 0;\r\n\t\t\tg = 0;\r\n\t\t\tb = 0;\r\n\t\t}\r\n\r\n\t\tthis.feColorMatrix.attr({ \"values\": ii + \" 0 0 0 \" + r + \" 0 \" + ii + \" 0 0 \" + g + \" 0 0 \" + ii + \" 0 \" + b + \" 0 0 0 1 0\" });\r\n\t}\r\n\r\n\t/**\r\n\t * Target color to apply to the element.\r\n\t *\r\n\t * Depending on the `intensity`, all colors of the target element will steer\r\n\t * towards this color.\r\n\t *\r\n\t * E.g. setting to `am4core.color(\"greener\")` will make all colors greener.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: $type.Optional<Color>) {\r\n\t\tthis.properties[\"color\"] = value;\r\n\t\tthis.applyFilter();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): $type.Optional<Color> {\r\n\t\treturn this.properties[\"color\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Intensity of the color (0-1).\r\n\t *\r\n\t * The bigger the number the more of a `color` target's colors will become.\r\n\t *\r\n\t * 0 means the colors will remain as they are.\r\n\t * 1 means all colors will become the target `color`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Intensity (0-1)\r\n\t */\r\n\tpublic set intensity(value: number) {\r\n\t\tthis.properties.intensity = value;\r\n\t\tthis.applyFilter();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Intensity (0-1)\r\n\t */\r\n\tpublic get intensity(): number {\r\n\t\treturn this.properties.intensity;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorizeFilter\"] = ColorizeFilter;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}