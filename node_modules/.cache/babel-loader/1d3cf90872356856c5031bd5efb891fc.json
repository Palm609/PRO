{"ast":null,"code":"/**\r\n * XY Chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Container } from \"../../core/Container\";\nimport { List, ListDisposer } from \"../../core/utils/List\";\nimport { Color } from \"../../core/utils/Color\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $number from \"../../core/utils/Number\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(XYChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChartDataItem;\n}(SerialChartDataItem);\n\nexport { XYChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\n\nvar XYChart =\n/** @class */\nfunction (_super) {\n  __extends(XYChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines the type of horizontal axis rederer.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererX;\n    /**\r\n     * Defines the type of vertical axis rederer.\r\n     */\n\n    _this._axisRendererY = AxisRendererY;\n    /**\r\n     * @ignore\r\n     */\n\n    _this._seriesPoints = [];\n    _this.className = \"XYChart\"; // Set defaults\n    //this.margin(10, 10, 10, 10);\n\n    _this.maskBullets = true;\n    _this.arrangeTooltips = true; // Create main chart container\n\n    var chartContainer = _this.chartContainer;\n    chartContainer.layout = \"vertical\";\n\n    _this.padding(15, 15, 15, 15); // Create top axes container\n\n\n    var topAxesCont = chartContainer.createChild(Container);\n    topAxesCont.shouldClone = false;\n    topAxesCont.layout = \"vertical\";\n    topAxesCont.width = percent(100);\n    topAxesCont.zIndex = 1;\n    _this.topAxesContainer = topAxesCont; // Create vertical axes and plot area container\n    // Plot area and vertical axes share the whole width of the chart,\n    // so we need to put then into a separate container so that layouting\n    // engine takes care of the positioning\n\n    var yAxesAndPlotCont = chartContainer.createChild(Container);\n    yAxesAndPlotCont.shouldClone = false;\n    yAxesAndPlotCont.layout = \"horizontal\";\n    yAxesAndPlotCont.width = percent(100);\n    yAxesAndPlotCont.height = percent(100);\n    yAxesAndPlotCont.zIndex = 0;\n    _this.yAxesAndPlotContainer = yAxesAndPlotCont; // Create a container for bottom axes\n\n    var bottomAxesCont = chartContainer.createChild(Container);\n    bottomAxesCont.shouldClone = false;\n    bottomAxesCont.width = percent(100);\n    bottomAxesCont.layout = \"vertical\";\n    bottomAxesCont.zIndex = 1;\n    _this.bottomAxesContainer = bottomAxesCont; // Create a container for left-side axes\n\n    var leftAxesCont = yAxesAndPlotCont.createChild(Container);\n    leftAxesCont.shouldClone = false;\n    leftAxesCont.layout = \"horizontal\";\n    leftAxesCont.height = percent(100);\n    leftAxesCont.contentAlign = \"right\";\n    leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    leftAxesCont.zIndex = 1;\n    _this.leftAxesContainer = leftAxesCont; // Create a container for plot area\n\n    var plotCont = yAxesAndPlotCont.createChild(Container);\n    plotCont.shouldClone = false;\n    plotCont.height = percent(100);\n    plotCont.width = percent(100); // Create transparend background for plot container so that hover works\n    // on all of it\n\n    plotCont.background.fillOpacity = 0;\n    _this.plotContainer = plotCont; // must go below plot container\n\n    _this.mouseWheelBehavior = \"none\";\n    _this._cursorContainer = plotCont; // Create a container for right-side axes\n\n    var rightAxesCont = yAxesAndPlotCont.createChild(Container);\n    rightAxesCont.shouldClone = false;\n    rightAxesCont.layout = \"horizontal\";\n    rightAxesCont.height = percent(100);\n    rightAxesCont.zIndex = 1;\n    rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    _this.rightAxesContainer = rightAxesCont;\n    _this.seriesContainer.parent = plotCont;\n    _this.bulletsContainer.parent = plotCont;\n    var zoomOutButton = plotCont.createChild(ZoomOutButton);\n    zoomOutButton.shouldClone = false;\n    zoomOutButton.align = \"right\";\n    zoomOutButton.valign = \"top\";\n    zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\n    zoomOutButton.marginTop = 5;\n    zoomOutButton.marginRight = 5;\n    zoomOutButton.hide(0);\n    _this.zoomOutButton = zoomOutButton; // Create a container for bullets\n\n    var axisBulletsContainer = _this.plotContainer.createChild(Container);\n\n    axisBulletsContainer.shouldClone = false;\n    axisBulletsContainer.width = percent(100);\n    axisBulletsContainer.height = percent(100);\n    axisBulletsContainer.isMeasured = false;\n    axisBulletsContainer.zIndex = 4;\n    axisBulletsContainer.layout = \"none\";\n    _this.axisBulletsContainer = axisBulletsContainer;\n    _this._bulletMask = _this.plotContainer;\n\n    _this.events.on(\"beforedatavalidated\", function () {\n      _this.series.each(function (series) {\n        series.dataGrouped = false;\n        series._baseInterval = {};\n      });\n    }, _this, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  XYChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    this.zoomOutButton.exportable = false; // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"X/Y chart\");\n    }\n  };\n  /**\r\n   * Draws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.seriesContainer.toFront();\n    this.bulletsContainer.toFront();\n\n    if (this.maskBullets) {\n      this.bulletsContainer.mask = this._bulletMask;\n    }\n\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Triggers a redrawing of all chart's series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updatePlotElements = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\r\n   * Triggers data (re)validation which in turn can cause a redraw of the\r\n   * whole chart or just aprticular series / elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.validateData = function () {\n    // tell axes that data changed\n    if (this._parseDataFrom == 0) {\n      $iter.each(this.xAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.yAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.series.iterator(), function (series) {\n        series.dataChangeUpdate();\n      });\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * Updates margins for horizontal axes based on settings and available space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updateXAxesMargins = function () {\n    var leftAxesWidth = this.leftAxesContainer.measuredWidth;\n    var rightAxesWidth = this.rightAxesContainer.measuredWidth;\n    var bottomAxesCont = this.bottomAxesContainer;\n\n    if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\n      bottomAxesCont.paddingLeft = leftAxesWidth;\n      bottomAxesCont.paddingRight = rightAxesWidth;\n    }\n\n    var topAxesCont = this.topAxesContainer;\n\n    if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\n      topAxesCont.paddingLeft = leftAxesWidth;\n      topAxesCont.paddingRight = rightAxesWidth;\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.reinit = function () {\n    _super.prototype.reinit.call(this);\n\n    this.series.each(function (series) {\n      series.appeared = false;\n    });\n  };\n  /**\r\n   * Triggers an update on the horizontal axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n\n\n  XYChart.prototype.handleXAxisChange = function (event) {\n    this.updateXAxis(event.target);\n  };\n  /**\r\n   * Triggers an update on the vertical axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n\n\n  XYChart.prototype.handleYAxisChange = function (event) {\n    this.updateYAxis(event.target);\n  };\n  /**\r\n   * Sets up a new horizontal (X) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Axis insert event\r\n   */\n\n\n  XYChart.prototype.processXAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererX();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"X\";\n    axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateXAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Sets up a new vertical (Y) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Axis insert event\r\n   */\n\n\n  XYChart.prototype.processYAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererY();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"Y\";\n    axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateYAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n\n\n  XYChart.prototype.handleXAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.xAxes);\n\n    if (this.scrollbarX) {\n      this.zoomAxes(this.xAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarX, range);\n  };\n  /**\r\n   * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n   * zoomed out or not.\r\n   */\n\n\n  XYChart.prototype.toggleZoomOutButton = function () {\n    if (this.zoomOutButton) {\n      var show_1 = false;\n      $iter.eachContinue(this.xAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n        }\n\n        return true;\n      });\n      $iter.eachContinue(this.yAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n\n          return true;\n        }\n      });\n\n      if (!this.seriesAppeared) {\n        show_1 = false;\n      }\n\n      if (show_1) {\n        this.zoomOutButton.show();\n      } else {\n        this.zoomOutButton.hide();\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * moved this check to a separate method so that we could override it in TreeMapSeries\r\n   */\n\n\n  XYChart.prototype.seriesAppeared = function () {\n    var appeared = false;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.appeared) {\n        appeared = false;\n        return false;\n      }\n    });\n    return appeared;\n  };\n  /**\r\n   * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n\n\n  XYChart.prototype.handleYAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.yAxes);\n\n    if (this.scrollbarY) {\n      this.zoomAxes(this.yAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarY, range);\n  };\n  /**\r\n   * Updates a relative scrollbar whenever data range of the axis changes.\r\n   *\r\n   * @param scrollbar  Scrollbar instance\r\n   * @param range      New data (values) range of the axis\r\n   */\n\n\n  XYChart.prototype.updateScrollbar = function (scrollbar, range) {\n    if (scrollbar) {\n      scrollbar.skipRangeEvents();\n      scrollbar.start = range.start;\n      scrollbar.end = range.end;\n    }\n  };\n  /**\r\n   * Returns a common range of values between a list of axes.\r\n   *\r\n   * This is used to synchronize the zoom between multiple axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes  A list of axes\r\n   * @return Common value range\r\n   */\n\n\n  XYChart.prototype.getCommonAxisRange = function (axes) {\n    var start;\n    var end;\n    axes.each(function (axis) {\n      if (!axis.zoomable || axis instanceof ValueAxis && axis.syncWithAxis) {} else {\n        var axisStart = axis.start;\n        var axisEnd = axis.end;\n\n        if (axis.renderer.inversed) {\n          axisStart = 1 - axis.end;\n          axisEnd = 1 - axis.start;\n        }\n\n        if (!$type.isNumber(start) || axisStart < start) {\n          start = axisStart;\n        }\n\n        if (!$type.isNumber(end) || axisEnd > end) {\n          end = axisEnd;\n        }\n      }\n    });\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.updateXAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.topAxesContainer;\n      axis.toFront();\n    } else {\n      axis.parent = this.bottomAxesContainer;\n      axis.toBack();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.updateYAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.rightAxesContainer;\n      axis.toBack();\n    } else {\n      axis.parent = this.leftAxesContainer;\n      axis.toFront();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n   * and containers for placement.\r\n   *\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.processAxis = function (axis) {\n    var _this = this; // Value axis does not use data directly, only category axis does\n\n\n    if (axis instanceof CategoryAxis) {\n      this._dataUsers.moveValue(axis);\n    }\n\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = this.plotContainer;\n    renderer.gridContainer.toBack();\n    renderer.breakContainer.parent = this.plotContainer;\n    renderer.breakContainer.toFront();\n    renderer.breakContainer.zIndex = 10;\n    axis.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(axis);\n    }));\n    renderer.bulletsContainer.parent = this.axisBulletsContainer;\n\n    this._disposers.push(axis.events.on(\"positionchanged\", function () {\n      var point = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, axis, _this.axisBulletsContainer);\n\n      if (axis.renderer instanceof AxisRendererY) {\n        renderer.bulletsContainer.y = point.y;\n      }\n\n      if (axis.renderer instanceof AxisRendererX) {\n        renderer.bulletsContainer.x = point.x;\n      }\n    }, undefined, false));\n\n    this.plotContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        axis.invalidateDataItems();\n\n        _this.updateSeriesMasks();\n      }\n    }, axis, false);\n  };\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n\n\n  XYChart.prototype.updateSeriesMasks = function () {\n    if ($utils.isIE()) {\n      this.series.each(function (series) {\n        var mask = series.mainContainer.mask;\n        series.mainContainer.mask = undefined;\n        series.mainContainer.mask = mask;\n      });\n    }\n  };\n\n  XYChart.prototype.handleSeriesRemoved = function (event) {\n    var series = event.oldValue;\n\n    if (series) {\n      if (series.xAxis) {\n        series.xAxis.series.removeValue(series);\n        series.xAxis.invalidateProcessedData();\n      }\n\n      if (series.yAxis) {\n        series.yAxis.series.removeValue(series);\n        series.yAxis.invalidateProcessedData();\n      } // otherwise extremes won't change\n\n\n      this.series.each(function (series) {\n        series.resetExtremes();\n      });\n    }\n\n    _super.prototype.handleSeriesRemoved.call(this, event);\n  };\n\n  Object.defineProperty(XYChart.prototype, \"xAxes\", {\n    /**\r\n     * A list of horizontal (X) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._xAxes) {\n        this._xAxes = new List();\n\n        this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\n\n        this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n\n        this._disposers.push(new ListDisposer(this._xAxes, false));\n      }\n\n      return this._xAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  XYChart.prototype.handleAxisRemoval = function (event) {\n    var axis = event.oldValue;\n    this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\n\n    if (axis.autoDispose) {\n      axis.dispose();\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"yAxes\", {\n    /**\r\n     * A list of vertical (Y) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._yAxes) {\n        this._yAxes = new List();\n\n        this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\n\n        this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n\n        this._disposers.push(new ListDisposer(this._yAxes, false));\n      }\n\n      return this._yAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new [[XYSeries]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n  XYChart.prototype.handleSeriesAdded = function (event) {\n    try {\n      _super.prototype.handleSeriesAdded.call(this, event);\n\n      var series = event.newValue;\n\n      if (this.xAxes.length == 0 || this.yAxes.length == 0) {\n        registry.removeFromInvalidComponents(series);\n        series.dataInvalid = false;\n      }\n\n      $utils.used(series.xAxis); // this is enough to get axis, handled in getter\n\n      $utils.used(series.yAxis); // this is enough to get axis, handled in getter\n\n      series.maskBullets = series.maskBullets;\n\n      if (series.fill == undefined) {\n        if (this.patterns) {\n          if (!$type.hasValue(series.stroke)) {\n            series.stroke = this.colors.next();\n          }\n\n          series.fill = this.patterns.next();\n\n          if ($type.hasValue(series.fillOpacity)) {\n            series.fill.backgroundOpacity = series.fillOpacity;\n          }\n\n          if (series.stroke instanceof Color) {\n            series.fill.stroke = series.stroke;\n            series.fill.fill = series.stroke;\n          }\n        } else {\n          series.fill = this.colors.next();\n        }\n      }\n\n      if (!$type.hasValue(series.stroke)) {\n        series.stroke = series.fill;\n      }\n    } catch (e) {\n      this.raiseCriticalError(e);\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"cursor\", {\n    /**\r\n     * @return Cursor\r\n     */\n    get: function () {\n      return this._cursor;\n    },\n\n    /**\r\n     * Chart's [[Cursor]].\r\n     *\r\n     * @param cursor  Cursor\r\n     */\n    set: function (cursor) {\n      if (this._cursor != cursor) {\n        if (this._cursor) {\n          this.removeDispose(this._cursor);\n        }\n\n        this._cursor = cursor;\n\n        if (cursor) {\n          // TODO this is wrong, fix it\n          this._disposers.push(cursor);\n\n          cursor.chart = this;\n          cursor.shouldClone = false;\n          cursor.parent = this._cursorContainer;\n          cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\n          cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\n          cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\n          cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\n          cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\n          cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\n          cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\n          cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\n          cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\n\n          if (this.tapToActivate) {\n            // We need this in order to setup cursor properly\n            this.setTapToActivate(this.tapToActivate);\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Performs tasks when the cursor's position changes, e.g. shows proper\r\n   * tooltips on axes and series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  XYChart.prototype.handleCursorPositionChange = function () {\n    var cursor = this.cursor;\n\n    if (cursor.visible && !cursor.isHiding) {\n      var xPosition_1 = this.cursor.xPosition;\n      var yPosition_1 = this.cursor.yPosition;\n      this.showSeriesTooltip({\n        x: xPosition_1,\n        y: yPosition_1\n      });\n      var exceptAxes_1 = [];\n      var snapToSeries = cursor.snapToSeries;\n\n      if (snapToSeries && !cursor.downPoint) {\n        if (snapToSeries instanceof XYSeries) {\n          snapToSeries = [snapToSeries];\n        }\n\n        var dataItems_1 = [];\n        $array.each(snapToSeries, function (snpSeries) {\n          if (!snpSeries.isHidden && !snpSeries.isHiding) {\n            var xAxis = snpSeries.xAxis;\n            var yAxis = snpSeries.yAxis;\n\n            if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n              snpSeries.dataItems.each(function (dataItem) {\n                dataItems_1.push(dataItem);\n              });\n              $array.move(exceptAxes_1, snpSeries.yAxis);\n              $array.move(exceptAxes_1, snpSeries.xAxis);\n            } else {\n              if (snpSeries.baseAxis == snpSeries.xAxis) {\n                $array.move(exceptAxes_1, snpSeries.yAxis);\n                dataItems_1.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition_1), true));\n              }\n\n              if (snpSeries.baseAxis == snpSeries.yAxis) {\n                $array.move(exceptAxes_1, snpSeries.xAxis);\n                dataItems_1.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition_1), true));\n              }\n            }\n          }\n        });\n        var closestDataItem_1 = this.getClosest(dataItems_1, xPosition_1, yPosition_1);\n\n        if (closestDataItem_1) {\n          this.series.each(function (series) {\n            var closestSeries = closestDataItem_1.component;\n\n            if (series != closestSeries) {\n              series.hideTooltip();\n\n              if (series.xAxis != closestSeries.xAxis) {\n                series.xAxis.hideTooltip();\n              }\n\n              if (series.yAxis != closestSeries.yAxis) {\n                series.yAxis.hideTooltip();\n              }\n            }\n          });\n          closestDataItem_1.component.showTooltipAtDataItem(closestDataItem_1);\n          cursor.handleSnap(closestDataItem_1.component);\n        }\n      } //}\n\n\n      this._seriesPoints = [];\n\n      if (this._cursorXPosition != xPosition_1) {\n        this.showAxisTooltip(this.xAxes, xPosition_1, exceptAxes_1);\n      }\n\n      if (this._cursorYPosition != yPosition_1) {\n        this.showAxisTooltip(this.yAxes, yPosition_1, exceptAxes_1);\n      }\n\n      if (this.arrangeTooltips) {\n        this.sortSeriesTooltips(this._seriesPoints);\n      }\n\n      if (this.legend) {\n        this.legend.afterDraw();\n      }\n    }\n  };\n  /**\r\n   * Finds closest data item to position out of the array of items.\r\n   *\r\n   * @since 4.9.29\r\n   * @param   dataItems  Array of items\r\n   * @param              xPosition X position\r\n   * @param              yPosition Y position\r\n   * @return             Data item\r\n   */\n\n\n  XYChart.prototype.getClosest = function (dataItems, xPosition, yPosition) {\n    var minDistance = Infinity;\n    var closestDataItem;\n    $array.eachContinue(dataItems, function (dataItem) {\n      if (dataItem) {\n        var xAxis = dataItem.component.xAxis;\n        var yAxis = dataItem.component.yAxis;\n        var xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\n        var yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\n        var xField = dataItem.component.xField;\n        var yField = dataItem.component.yField;\n\n        if (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\n          return true;\n        }\n\n        if (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\n          return true;\n        }\n\n        var dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\n        var dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\n        var distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\n\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestDataItem = dataItem;\n        }\n\n        return true;\n      }\n    });\n    return closestDataItem;\n  };\n  /**\r\n   * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.handleHideCursor = function () {\n    this.hideObjectTooltip(this.xAxes);\n    this.hideObjectTooltip(this.yAxes);\n    this.hideObjectTooltip(this.series);\n    this._cursorXPosition = undefined;\n    this._cursorYPosition = undefined;\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Updates values for each series' legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updateSeriesLegend = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.updateLegendValue();\n    });\n  };\n  /**\r\n   * Hides a tooltip for a list of objects.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprites  A list of sprites to hide tooltip for\r\n   */\n\n\n  XYChart.prototype.hideObjectTooltip = function (sprites) {\n    $iter.each(sprites.iterator(), function (sprite) {\n      if (sprite.cursorTooltipEnabled) {\n        sprite.hideTooltip(0);\n      }\n    });\n  };\n  /**\r\n   * Shows a tooltip for all chart's series, using specific coordinates as a\r\n   * reference point.\r\n   *\r\n   * The tooltip might be shown at different coordinates depending on the\r\n   * actual data point's position, overlapping with other tooltips, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Reference point\r\n   */\n\n\n  XYChart.prototype.showSeriesTooltip = function (position) {\n    var _this = this;\n\n    if (!position) {\n      this.series.each(function (series) {\n        series.hideTooltip();\n      });\n      return;\n    }\n\n    var seriesPoints = [];\n    this.series.each(function (series) {\n      //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\n      if (series.xAxis instanceof DateAxis && series.xAxis.snapTooltip || series.yAxis instanceof DateAxis && series.yAxis.snapTooltip) {// void\n      } else {\n        var point = series.showTooltipAtPosition(position.x, position.y);\n\n        if (point) {\n          series.tooltip.setBounds($utils.spriteRectToSvg({\n            x: 0,\n            y: 0,\n            width: _this.pixelWidth,\n            height: _this.pixelHeight\n          }, _this));\n          seriesPoints.push({\n            series: series,\n            point: point\n          });\n        }\n      } //}\n\n    });\n\n    if (this.arrangeTooltips) {\n      this.sortSeriesTooltips(seriesPoints);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\n    if (seriesPoints.length > 0) {\n      var cursor_1 = this.cursor;\n\n      if (cursor_1 && $type.isNumber(cursor_1.maxTooltipDistance)) {\n        var cursorPoint_1 = $utils.spritePointToSvg({\n          x: cursor_1.point.x,\n          y: cursor_1.point.y\n        }, cursor_1);\n        var nearestSeries_1;\n        var nearestPoint_1;\n        var smallestDistance_1 = Infinity;\n        $array.each(seriesPoints, function (seriesPoint) {\n          var series = seriesPoint.series;\n          var fixedPoint = seriesPoint.point;\n\n          if (fixedPoint) {\n            var point = {\n              x: fixedPoint.x,\n              y: fixedPoint.y\n            };\n            var distance = Math.abs($math.getDistance(point, cursorPoint_1));\n\n            if (distance < smallestDistance_1) {\n              nearestPoint_1 = point;\n              smallestDistance_1 = distance;\n              nearestSeries_1 = series;\n            }\n          }\n        });\n        var newSeriesPoints_1 = [];\n\n        if (nearestSeries_1) {\n          $array.each(seriesPoints, function (seriesPoint) {\n            if (Math.abs($math.getDistance(seriesPoint.point, nearestPoint_1)) <= Math.abs(cursor_1.maxTooltipDistance)) {\n              newSeriesPoints_1.push({\n                series: seriesPoint.series,\n                point: seriesPoint.point\n              });\n            } else {\n              var tooltipDataItem = seriesPoint.series.tooltipDataItem;\n\n              if (tooltipDataItem) {\n                $array.each(tooltipDataItem.sprites, function (sprite) {\n                  sprite.isHover = false;\n                  sprite.handleOutReal(); // to avoid flicker\n                });\n              }\n\n              seriesPoint.series.hideTooltip(0);\n            }\n          });\n\n          if (cursor_1.maxTooltipDistance < 0) {\n            if (newSeriesPoints_1.length > 0) {\n              $array.each(newSeriesPoints_1, function (np) {\n                if (nearestSeries_1 != np.series) {\n                  np.series.hideTooltip(0);\n                }\n              });\n            }\n\n            newSeriesPoints_1 = [{\n              series: nearestSeries_1,\n              point: nearestPoint_1\n            }];\n          }\n        }\n\n        seriesPoints = newSeriesPoints_1;\n      }\n\n      var topLeft_1 = $utils.spritePointToSvg({\n        x: -0.5,\n        y: -0.5\n      }, this.plotContainer);\n      var bottomRight_1 = $utils.spritePointToSvg({\n        x: this.plotContainer.pixelWidth + 0.5,\n        y: this.plotContainer.pixelHeight + 0.5\n      }, this.plotContainer);\n      var sum_1 = 0;\n      var filteredSeriesPoints_1 = [];\n      $array.each(seriesPoints, function (seriesPoint) {\n        var point = seriesPoint.point;\n\n        if (point && $math.isInRectangle(point, {\n          x: topLeft_1.x,\n          y: topLeft_1.y,\n          width: bottomRight_1.x - topLeft_1.x,\n          height: bottomRight_1.y - topLeft_1.y\n        })) {\n          filteredSeriesPoints_1.push({\n            point: point,\n            series: seriesPoint.series\n          });\n          sum_1 += point.y;\n        }\n      });\n      seriesPoints = filteredSeriesPoints_1;\n      var firstSeries = this.series.getIndex(0);\n      var inversed = false;\n\n      if (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\n        inversed = true;\n      }\n\n      if (inversed) {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(a.point.y, b.point.y);\n        });\n      } else {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(b.point.y, a.point.y);\n        });\n        seriesPoints.reverse();\n      }\n\n      var averageY = sum_1 / seriesPoints.length;\n      var maxY = $utils.svgPointToDocument({\n        x: 0,\n        y: 0\n      }, this.svgContainer.SVGContainer).y;\n\n      if (seriesPoints.length > 0) {\n        var top_1 = topLeft_1.y;\n        var bottom = bottomRight_1.y; // TODO is this needed ?\n\n        $utils.spritePointToDocument({\n          x: 0,\n          y: top_1\n        }, this);\n        var dropped = false;\n\n        if (averageY > top_1 + (bottom - top_1) / 2) {\n          var nextHeight = bottom;\n\n          for (var i = seriesPoints.length - 1; i >= 0; i--) {\n            var series = seriesPoints[i].series;\n            var tooltip = series.tooltip;\n            var pointY = seriesPoints[i].point.y;\n            tooltip.setBounds({\n              x: 0,\n              y: -maxY,\n              width: this.pixelWidth,\n              height: nextHeight + maxY\n            });\n\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n\n            tooltip.toBack();\n            nextHeight = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop\n            }, tooltip).y;\n\n            if (nextHeight < -maxY) {\n              dropped = true;\n              break;\n            }\n          }\n        }\n\n        if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\n          var nextY = top_1;\n\n          for (var i = 0, len = seriesPoints.length; i < len; i++) {\n            var series = seriesPoints[i].series;\n            var pointY = seriesPoints[i].point.y;\n            var tooltip = series.tooltip;\n            tooltip.setBounds({\n              x: 0,\n              y: nextY,\n              width: this.pixelWidth,\n              height: bottom\n            });\n\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n\n            tooltip.toBack();\n            nextY = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom\n            }, tooltip).y;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Shows tooltips for a list of axes at specific position.\r\n   *\r\n   * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n   * vertical axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes      List of axes to show tooltip on\r\n   * @param position  Position (px)\r\n   */\n\n\n  XYChart.prototype.showAxisTooltip = function (axes, position, except) {\n    var _this = this;\n\n    $iter.each(axes.iterator(), function (axis) {\n      if (!except || except.indexOf(axis) == -1) {\n        if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\n          axis.showTooltipAtPosition(position);\n        }\n      }\n    });\n  };\n  /**\r\n   * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n   *\r\n   * @param axis   Axis\r\n   * @param range  Range\r\n   * @return Modified range\r\n   */\n\n\n  XYChart.prototype.getUpdatedRange = function (axis, range) {\n    if (!axis) {\n      return;\n    }\n\n    var start;\n    var end;\n    var inversed = axis.renderer.inversed;\n\n    if (inversed) {\n      $math.invertRange(range);\n      start = 1 - axis.end;\n      end = 1 - axis.start;\n    } else {\n      start = axis.start;\n      end = axis.end;\n    }\n\n    var difference = end - start;\n    return {\n      start: start + range.start * difference,\n      end: start + range.end * difference\n    };\n  };\n  /**\r\n   * Performs zoom and other operations when user finishes zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorZoomEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\n      var xRange = cursor.xRange;\n\n      if (xRange && this.xAxes.length > 0) {\n        xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\n        xRange.priority = \"start\";\n        this.zoomAxes(this.xAxes, xRange);\n      }\n    }\n\n    if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\n      var yRange = cursor.yRange;\n\n      if (yRange && this.yAxes.length > 0) {\n        yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\n        yRange.priority = \"start\";\n        this.zoomAxes(this.yAxes, yRange);\n      }\n    }\n\n    this.handleHideCursor();\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanStart = function (event) {\n    var xAxis = this.xAxes.getIndex(0);\n\n    if (xAxis) {\n      this._panStartXRange = {\n        start: xAxis.start,\n        end: xAxis.end\n      };\n\n      if (xAxis.renderer.inversed) {\n        this._panStartXRange = $math.invertRange(this._panStartXRange);\n      }\n    }\n\n    var yAxis = this.yAxes.getIndex(0);\n\n    if (yAxis) {\n      this._panStartYRange = {\n        start: yAxis.start,\n        end: yAxis.end\n      };\n\n      if (yAxis.renderer.inversed) {\n        this._panStartYRange = $math.invertRange(this._panStartYRange);\n      }\n    }\n  };\n  /**\r\n   * Performs zoom and other operations when user ends panning\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndXRange;\n      var panStartRange = this._panStartXRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panStartRange.end > 1) {\n        if (panEndRange.end > panStartRange.end) {\n          delta = panEndRange.end - panStartRange.end;\n        }\n      } else if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.xAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndXRange = undefined;\n      this._panStartXRange = undefined;\n    }\n\n    if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndYRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.yAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndYRange = undefined;\n      this._panStartYRange = undefined;\n    }\n  };\n\n  XYChart.prototype.handleCursorCanceled = function () {\n    this._panEndXRange = undefined;\n    this._panStartXRange = undefined;\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanning = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    var maxPanOut = cursor.maxPanOut;\n\n    if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartXRange;\n      var range = cursor.xRange;\n      var axisRange = this.getCommonAxisRange(this.xAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndXRange = newRange;\n      this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartYRange;\n      var range = cursor.yRange;\n      var axisRange = this.getCommonAxisRange(this.yAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndYRange = newRange;\n      this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    this.handleHideCursor();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.handleYAxisSet = function (series) {};\n  /**\r\n   * Performs zoom and other operations when user starts zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorZoomStart = function (event) {// Nothing here\n    // This method is here only as a \"placeholder\" for extending classes to\n    // override if necessary\n  };\n\n  Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarX;\n    },\n\n    /**\r\n     * Horizontal (X) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarX) {\n        this.removeDispose(this._scrollbarX);\n      }\n\n      this._scrollbarX = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.topAxesContainer;\n        scrollbar.shouldClone = false;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toBack();\n        scrollbar.orientation = \"horizontal\";\n        scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var xAxis = _this.xAxes.getIndex(0);\n\n          if (xAxis) {\n            arg.value = xAxis.getPositionLabel(xAxis.renderer.inversed ? 1 - arg.position : arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarY;\n    },\n\n    /**\r\n     * Vertical (Y) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarY) {\n        this.removeDispose(this._scrollbarY);\n      }\n\n      this._scrollbarY = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.rightAxesContainer;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.shouldClone = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toFront();\n        scrollbar.orientation = \"vertical\";\n        scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var yAxis = _this.yAxes.getIndex(0);\n\n          if (yAxis) {\n            arg.value = yAxis.getPositionLabel(arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n\n  XYChart.prototype.handleXScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      range = this.zoomAxes(this.xAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n\n\n  XYChart.prototype.handleYScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      range = this.zoomAxes(this.yAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes that are affected by to specific relative range.\r\n   *\r\n   * @param axes       List of axes to zoom\r\n   * @param range      Range of values to zoom to (0-1)\r\n   * @param instantly  If set to `true` will skip zooming animation\r\n   * @return Recalculated range that is common to all involved axes\r\n   */\n\n\n  XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination, stop) {\n    var realRange = {\n      start: 0,\n      end: 1\n    };\n    this.showSeriesTooltip(); // hides\n\n    var originalRange = range;\n\n    if (!this.dataInvalid) {\n      $iter.each(axes.iterator(), function (axis) {\n        var maxZoomFactor = axis.maxZoomFactor;\n\n        if ($type.isNumber(axis.minZoomCount)) {\n          maxZoomFactor = maxZoomFactor / axis.minZoomCount;\n        }\n\n        if (stop && 1 / (range.end - range.start) >= maxZoomFactor) {// void\n        } else {\n          if (axis.zoomable) {\n            if (axis.renderer.inversed) {\n              range = $math.invertRange(originalRange);\n            } else {\n              range = originalRange;\n            }\n\n            axis.hideTooltip(0);\n\n            if (round) {\n              //let diff = range.end - range.start;\n              if (axis instanceof CategoryAxis) {\n                var cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\n                range.start = axis.roundPosition(range.start + cellWidth / 2 - axis.startLocation * cellWidth, axis.startLocation);\n                range.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\n              } else {\n                range.start = axis.roundPosition(range.start + 0.0001, 0, axis.startLocation);\n                range.end = axis.roundPosition(range.end + 0.0001, 0, axis.endLocation);\n              }\n            }\n\n            var axisRange = axis.zoom(range, instantly, instantly, declination);\n\n            if (axis.renderer.inversed) {\n              axisRange = $math.invertRange(axisRange);\n            }\n\n            realRange = axisRange;\n          }\n        }\n      });\n    }\n\n    return realRange;\n  };\n\n  Object.defineProperty(XYChart.prototype, \"maskBullets\", {\n    /**\r\n     * @return Mask bullet container?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n\n    /**\r\n     * Indicates if bullet container is masked.\r\n     *\r\n     * If it is set to `true`, any bullets that do not fit into bullet container\r\n     * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n     * of the plot area so they are not cut off.\r\n     *\r\n     * @param value Mask bullet container?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\n        if (value) {\n          this.bulletsContainer.mask = this._bulletMask;\n        } else {\n          this.bulletsContainer.mask = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\n    /**\r\n     * @return Arrange tooltips?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arrangeTooltips\");\n    },\n\n    /**\r\n     * Indicates if chart should arrange series tooltips so that they would not\r\n     * overlap.\r\n     *\r\n     * If set to `true` (default), the chart will adjust vertical positions of\r\n     * all simultaneously shown tooltips to avoid overlapping.\r\n     *\r\n     * However, if you have a vertically-arranged chart, it might not make sense,\r\n     * because tooltips would most probably not be aligned horizontally. In this\r\n     * case it would probably be a good idea to set this setting to `false`.\r\n     *\r\n     * @default true\r\n     * @param value Arrange tooltips?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"arrangeTooltips\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n  XYChart.prototype.handleWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    var shift = event.shift.y;\n    this.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n\n  XYChart.prototype.handleHorizontalWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    this.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.handleWheelReal = function (shift, mouseWheelBehavior, plotPoint) {\n    if (shift != 0) {\n      var plotContainer = this.plotContainer;\n      var rangeX = this.getCommonAxisRange(this.xAxes);\n      var rangeY = this.getCommonAxisRange(this.yAxes);\n      var shiftStep = 0.1;\n      var maxPanOut = 0;\n\n      if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\n        var differenceX = rangeX.end - rangeX.start;\n        var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\n        var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\n\n        if (newStartX <= 0) {\n          newEndX = newStartX + differenceX;\n        }\n\n        if (newEndX >= 1) {\n          newStartX = newEndX - differenceX;\n        }\n\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        });\n      }\n\n      if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\n        shift *= -1;\n        var differenceY = rangeY.end - rangeY.start;\n        var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\n\n        if (newStartY <= 0) {\n          newEndY = newStartY + differenceY;\n        }\n\n        if (newEndY >= 1) {\n          newStartY = newEndY - differenceY;\n        }\n\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        });\n      }\n\n      if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationX = plotPoint.x / plotContainer.maxWidth;\n        var location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\n        var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\n        newStartX = Math.min(newStartX, location2X);\n        var newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\n        newEndX = Math.max(newEndX, location2X);\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        }, undefined, undefined, undefined, true);\n      }\n\n      if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationY = plotPoint.y / plotContainer.maxHeight;\n        var location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\n        var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\n        newStartY = Math.min(newStartY, location2Y);\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\n        newEndY = Math.max(newEndY, location2Y);\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        }, undefined, undefined, undefined, true);\n      }\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return Mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies action for when mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n\n            this._mouseWheelDisposer.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"horizontalMouseWheelBehavior\", {\n    /**\r\n     * @return Horizontal mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalMouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer2);\n        } else {\n          if (this._mouseWheelDisposer2) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n\n            this._mouseWheelDisposer2.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param fields  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n\n  XYChart.prototype.dataSourceDateFields = function (fields) {\n    var _this = this; // Process parent\n\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n\n\n  XYChart.prototype.dataSourceNumberFields = function (fields) {\n    var _this = this;\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Save axis ranges for later processing\n      var xAxes = [];\n      var yAxes = []; // Set up axes\n\n      if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\n        for (var i = 0, len = config.xAxes.length; i < len; i++) {\n          if (!config.xAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_1 = config.xAxes[i][\"axisRanges\"].length; x < len_1; x++) {\n              var range = config.xAxes[i][\"axisRanges\"][x];\n\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n\n            xAxes.push({\n              axisRanges: config.xAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.xAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\n        for (var i = 0, len = config.yAxes.length; i < len; i++) {\n          if (!config.yAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_2 = config.yAxes[i][\"axisRanges\"].length; x < len_2; x++) {\n              var range = config.yAxes[i][\"axisRanges\"][x];\n\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n\n            yAxes.push({\n              axisRanges: config.yAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.yAxes[i][\"axisRanges\"];\n          }\n        }\n      } // Set up series\n\n\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"LineSeries\";\n        }\n      } // Set up cursor\n\n\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"XYCursor\";\n      } // Set up scrollbars\n\n\n      if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\n        config.scrollbarX.type = \"Scrollbar\";\n      }\n\n      if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\n        config.scrollbarY.type = \"Scrollbar\";\n      }\n\n      _super.prototype.processConfig.call(this, config); // Finish up with ranges.\n      // We need to do this here because series are processed last in JSON\n      // config. Therefore their respective objects are not yet are available\n      // when axis (and respectively their ranges) are being processed.\n\n\n      if (yAxes.length) {\n        for (var i = 0, len = yAxes.length; i < len; i++) {\n          this.yAxes.getIndex(yAxes[i].index).config = {\n            axisRanges: yAxes[i].axisRanges\n          };\n        }\n      }\n\n      if (xAxes.length) {\n        for (var i = 0, len = xAxes.length; i < len; i++) {\n          this.xAxes.getIndex(xAxes[i].index).config = {\n            axisRanges: xAxes[i].axisRanges\n          };\n        }\n      }\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  XYChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"scrollbarX\") {\n      return 1;\n    } else if (b == \"scrollbarX\") {\n      return -1;\n    } else if (a == \"scrollbarY\") {\n      return 1;\n    } else if (b == \"scrollbarY\") {\n      return -1;\n    } else if (a == \"cursor\") {\n      return 1;\n    } else if (b == \"cursor\") {\n      return -1;\n    } else if (a == \"series\") {\n      return 1;\n    } else if (b == \"series\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Creates a new Series of type suitable for this chart.\r\n   *\r\n   * @return New series\r\n   */\n\n\n  XYChart.prototype.createSeries = function () {\n    return new XYSeries();\n  };\n\n  Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\n    /**\r\n     * @return Zoom out button\r\n     */\n    get: function () {\n      return this._zoomOutButton;\n    },\n\n    /**\r\n     * A [[Button]] element that is used for zooming out the chart.\r\n     *\r\n     * This button appears only when chart is zoomed in, and disappears\r\n     * autoamatically when it is zoome dout.\r\n     *\r\n     * @param button  Zoom out button\r\n     */\n    set: function (button) {\n      var _this = this;\n\n      this._zoomOutButton = button;\n\n      if (button) {\n        button.events.on(\"hit\", function () {\n          _this.zoomAxes(_this.xAxes, {\n            start: 0,\n            end: 1\n          });\n\n          _this.zoomAxes(_this.yAxes, {\n            start: 0,\n            end: 1\n          });\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[XYChart]].\r\n   *\r\n   * @param source Source XYChart\r\n   */\n\n  XYChart.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    source.xAxes.each(function (axis) {\n      var a = _this.xAxes.push(axis.clone());\n\n      a.chart = _this;\n      a.renderer.chart = _this;\n    });\n    source.yAxes.each(function (axis) {\n      var a = _this.yAxes.push(axis.clone());\n\n      a.renderer.chart = _this;\n      a.chart = _this;\n    }); //this.xAxes.copyFrom(source.xAxes);\n    //this.yAxes.copyFrom(source.yAxes);\n\n    _super.prototype.copyFrom.call(this, source); //this.zoomOutButton.copyFrom(source.zoomOutButton);\n\n\n    if (source.cursor) {\n      this.cursor = source.cursor.clone();\n    }\n\n    if (source.scrollbarX) {\n      this.scrollbarX = source.scrollbarX.clone();\n    }\n\n    if (source.scrollbarY) {\n      this.scrollbarY = source.scrollbarY.clone();\n    } //@todo copy all container properties\n\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    var scrollbarX = this.scrollbarX;\n\n    if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\n      scrollbarX.scrollbarChart.disposeData();\n    }\n\n    var scrollbarY = this.scrollbarY;\n\n    if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\n      scrollbarY.scrollbarChart.disposeData();\n    }\n\n    this.xAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n    this.yAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n  };\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n\n\n  XYChart.prototype.addData = function (rawDataItem, removeCount) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarX, removeCount);\n    }\n\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarY, removeCount);\n    }\n\n    _super.prototype.addData.call(this, rawDataItem, removeCount);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.addScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n    chart._parseDataFrom = chart.data.length;\n    chart.invalidateData();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.removeScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n\n    if ($type.isNumber(removeCount)) {\n      while (removeCount > 0) {\n        var dataItem = this.dataItems.getIndex(0);\n\n        if (dataItem) {\n          chart.dataItems.remove(dataItem);\n        }\n\n        chart.dataUsers.each(function (dataUser) {\n          var dataItem = dataUser.dataItems.getIndex(0);\n\n          if (dataItem) {\n            dataUser.dataItems.remove(dataItem);\n          }\n        });\n        chart._parseDataFrom--;\n        removeCount--;\n      }\n\n      chart.invalidateData();\n    }\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n\n\n  XYChart.prototype.removeData = function (count) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarX, count);\n    }\n\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarY, count);\n    }\n\n    _super.prototype.removeData.call(this, count);\n  };\n  /**\r\n   * @param  value  Tap to activate?\r\n   */\n\n\n  XYChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = value;\n      this.plotContainer.interactions.isTouchProtected = value;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = false;\n      this.plotContainer.interactions.isTouchProtected = false;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = true;\n      this.plotContainer.interactions.isTouchProtected = true;\n    }\n  };\n\n  return XYChart;\n}(SerialChart);\n\nexport { XYChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChart\"] = XYChart;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarX) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarX.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarY) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarY.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"sources":["../../../../../src/.internal/charts/types/XYChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when horizontal mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\thorizontalMouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _mouseWheelDisposer2: IDisposer;\r\n\r\n\tprotected _cursorXPosition: number;\r\n\r\n\tprotected _cursorYPosition: number;\r\n\r\n\t/**\r\n\t * Holds a reference to the container axis bullets are drawn in.\r\n\t */\r\n\tpublic axisBulletsContainer: Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet axisBulletsContainer: Container = this.plotContainer.createChild(Container);\r\n\t\taxisBulletsContainer.shouldClone = false;\r\n\t\taxisBulletsContainer.width = percent(100);\r\n\t\taxisBulletsContainer.height = percent(100);\r\n\t\taxisBulletsContainer.isMeasured = false;\r\n\t\taxisBulletsContainer.zIndex = 4;\r\n\t\taxisBulletsContainer.layout = \"none\";\r\n\t\tthis.axisBulletsContainer = axisBulletsContainer;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.dataGrouped = false;\r\n\t\t\t\tseries._baseInterval = {};\r\n\t\t\t})\r\n\t\t}, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tpublic toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\taxes.each((axis) => {\r\n\t\t\tif (!axis.zoomable || (axis instanceof ValueAxis && axis.syncWithAxis)) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet axisStart = axis.start;\r\n\t\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\t\tstart = axisStart;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\t\tend = axisEnd;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\trenderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n\r\n\t\tthis._disposers.push(axis.events.on(\"positionchanged\", () => {\r\n\t\t\tlet point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, this.axisBulletsContainer);\r\n\t\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\t\trenderer.bulletsContainer.y = point.y;\r\n\t\t\t}\r\n\t\t\tif (axis.renderer instanceof AxisRendererX) {\r\n\t\t\t\trenderer.bulletsContainer.x = point.x;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\r\n\t\tif (series) {\r\n\t\t\tif (series.xAxis) {\r\n\t\t\t\tseries.xAxis.series.removeValue(series);\r\n\t\t\t\tseries.xAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\tif (series.yAxis) {\r\n\t\t\t\tseries.yAxis.series.removeValue(series);\r\n\t\t\t\tseries.yAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\t// otherwise extremes won't change\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.resetExtremes();\r\n\t\t\t})\r\n\t\t}\r\n\t\tsuper.handleSeriesRemoved(event);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._xAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._yAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tseries.maskBullets = series.maskBullets;\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\t\t\tseries.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(series.fillOpacity)) {\r\n\t\t\t\t\t\tseries.fill.backgroundOpacity = series.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.stroke instanceof Color) {\r\n\t\t\t\t\t\tseries.fill.stroke = series.stroke;\r\n\t\t\t\t\t\tseries.fill.fill = series.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxes: Axis[] = [];\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\r\n\t\t\tif (snapToSeries && !cursor.downPoint) {\r\n\t\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\t\tsnapToSeries = [snapToSeries];\r\n\t\t\t\t}\r\n\t\t\t\tlet dataItems: XYSeriesDataItem[] = [];\r\n\r\n\t\t\t\t$array.each(snapToSeries, (snpSeries) => {\r\n\t\t\t\t\tif (!snpSeries.isHidden && !snpSeries.isHiding) {\r\n\r\n\t\t\t\t\t\tlet xAxis = snpSeries.xAxis;\r\n\t\t\t\t\t\tlet yAxis = snpSeries.yAxis;\r\n\r\n\t\t\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\r\n\t\t\t\t\t\t\tsnpSeries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\t\tdataItems.push(dataItem);\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.xAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.yAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet closestDataItem = this.getClosest(dataItems, xPosition, yPosition);\r\n\r\n\t\t\t\tif (closestDataItem) {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet closestSeries = closestDataItem.component;\r\n\t\t\t\t\t\tif (series != closestSeries) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\tif (series.xAxis != closestSeries.xAxis) {\r\n\t\t\t\t\t\t\t\tseries.xAxis.hideTooltip();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (series.yAxis != closestSeries.yAxis) {\r\n\t\t\t\t\t\t\t\tseries.yAxis.hideTooltip();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tclosestDataItem.component.showTooltipAtDataItem(closestDataItem);\r\n\t\t\t\t\tcursor.handleSnap(closestDataItem.component);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t\tthis._seriesPoints = [];\r\n\r\n\t\t\tif (this._cursorXPosition != xPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this._cursorYPosition != yPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this.arrangeTooltips) {\r\n\t\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.afterDraw();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds closest data item to position out of the array of items.\r\n\t *\r\n\t * @since 4.9.29\r\n\t * @param   dataItems  Array of items\r\n\t * @param              xPosition X position\r\n\t * @param              yPosition Y position\r\n\t * @return             Data item\r\n\t */\r\n\tpublic getClosest(dataItems: XYSeriesDataItem[], xPosition: number, yPosition: number): XYSeriesDataItem {\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet closestDataItem: XYSeriesDataItem\r\n\r\n\t\t$array.eachContinue(dataItems, (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet xAxis = dataItem.component.xAxis;\r\n\t\t\t\tlet yAxis = dataItem.component.yAxis;\r\n\r\n\t\t\t\tlet xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n\t\t\t\tlet yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n\r\n\t\t\t\tlet xField = dataItem.component.xField;\r\n\t\t\t\tlet yField = dataItem.component.yField;\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n\t\t\t\tlet dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n\r\n\t\t\t\tlet distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n\r\n\t\t\t\tif (distance < minDistance) {\r\n\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\tclosestDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn closestDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\t\tthis._cursorXPosition = undefined;\r\n\t\tthis._cursorYPosition = undefined;\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Axis | XYSeries>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tif (sprite.cursorTooltipEnabled) {\r\n\t\t\t\tsprite.hideTooltip(0);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight }, this));\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\t\tif (seriesPoints.length > 0) {\r\n\t\t\tlet cursor = this.cursor;\r\n\r\n\t\t\tif (cursor && $type.isNumber(cursor.maxTooltipDistance)) {\r\n\r\n\t\t\t\tlet cursorPoint = $utils.spritePointToSvg({ x: cursor.point.x, y: cursor.point.y }, cursor);\r\n\r\n\t\t\t\tlet nearestSeries: XYSeries;\r\n\t\t\t\tlet nearestPoint: IPoint;\r\n\t\t\t\tlet smallestDistance: number = Infinity;\r\n\r\n\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\tlet series = seriesPoint.series;\r\n\t\t\t\t\tlet fixedPoint = seriesPoint.point;\r\n\t\t\t\t\tif (fixedPoint) {\r\n\t\t\t\t\t\tlet point = { x: fixedPoint.x, y: fixedPoint.y };\r\n\r\n\t\t\t\t\t\tlet distance = Math.abs($math.getDistance(point, cursorPoint));\r\n\t\t\t\t\t\tif (distance < smallestDistance) {\r\n\t\t\t\t\t\t\tnearestPoint = point;\r\n\t\t\t\t\t\t\tsmallestDistance = distance;\r\n\t\t\t\t\t\t\tnearestSeries = series;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tlet newSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t\tif (nearestSeries) {\r\n\r\n\t\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\t\tif (Math.abs($math.getDistance(seriesPoint.point, nearestPoint)) <= Math.abs(cursor.maxTooltipDistance)) {\r\n\t\t\t\t\t\t\tnewSeriesPoints.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlet tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n\t\t\t\t\t\t\tif (tooltipDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(tooltipDataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\t\t\t\t\tsprite.handleOutReal(); // to avoid flicker\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tseriesPoint.series.hideTooltip(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tif (cursor.maxTooltipDistance < 0) {\r\n\t\t\t\t\t\tif (newSeriesPoints.length > 0) {\r\n\t\t\t\t\t\t\t$array.each(newSeriesPoints, (np) => {\r\n\t\t\t\t\t\t\t\tif (nearestSeries != np.series) {\r\n\t\t\t\t\t\t\t\t\tnp.series.hideTooltip(0);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnewSeriesPoints = [{ series: nearestSeries, point: nearestPoint }];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseriesPoints = newSeriesPoints;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\tlet point = seriesPoint.point;\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\t\tsum += point.y;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\t\tlet firstSeries = this.series.getIndex(0);\r\n\t\t\tlet inversed = false;\r\n\t\t\tif (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n\t\t\t\tinversed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (inversed) {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(a.point.y, b.point.y))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(b.point.y, a.point.y))\r\n\t\t\t\tseriesPoints.reverse();\r\n\t\t\t}\r\n\r\n\t\t\tlet averageY = sum / seriesPoints.length;\r\n\t\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\t\tif (seriesPoints.length > 0) {\r\n\t\t\t\tlet top = topLeft.y;\r\n\t\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\t\tlet dropped = false;\r\n\r\n\t\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\t\tlet nextY = top;\r\n\t\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis[]): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (!except || except.indexOf(axis) == -1) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t\tif (xAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartXRange = $math.invertRange(this._panStartXRange)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t\tif (yAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartYRange = $math.invertRange(this._panStartYRange)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (panStartRange.end > 1) {\r\n\t\t\t\tif (panEndRange.end > panStartRange.end) {\r\n\t\t\t\t\tdelta = panEndRange.end - panStartRange.end;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleYAxisSet(series: XYSeries) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(\r\n\t\t\t\t\t\txAxis.renderer.inversed\r\n\t\t\t\t\t\t\t? 1 - arg.position\r\n\t\t\t\t\t\t\t: arg.position\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number, stop?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tlet originalRange = range;\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\r\n\t\t\t\tlet maxZoomFactor = axis.maxZoomFactor;\r\n\t\t\t\tif ($type.isNumber(axis.minZoomCount)) {\r\n\t\t\t\t\tmaxZoomFactor = maxZoomFactor / axis.minZoomCount\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (axis.zoomable) {\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\trange = $math.invertRange(originalRange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trange = originalRange;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\t\t\tif (round) {\r\n\t\t\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\t\t\t\t\tlet cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end + 0.0001, 0, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trealRange = axisRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tthis.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleHorizontalWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\r\n\t\tthis.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint)\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleWheelReal(shift: number, mouseWheelBehavior: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\", plotPoint: IPoint) {\r\n\t\tif (shift != 0) {\r\n\t\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet shiftStep = 0.1;\r\n\r\n\t\t\tlet maxPanOut = 0;\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartX <= 0) {\r\n\t\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndX >= 1) {\r\n\t\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\t\tshift *= -1;\r\n\t\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartY <= 0) {\r\n\t\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndY >= 1) {\r\n\t\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\t\tlet location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n\t\t\t\tnewStartX = Math.min(newStartX, location2X);\r\n\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\t\tnewEndX = Math.max(newEndX, location2X);\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined, undefined, undefined, true);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\t\tlet location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n\t\t\t\tnewStartY = Math.min(newStartY, location2Y);\r\n\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\t\t\t\tnewEndY = Math.max(newEndY, location2Y);\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined, undefined, undefined, true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set horizontalMouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer2) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer2.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal mouse wheel behavior\r\n\t */\r\n\tpublic get horizontalMouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.xAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.xAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.yAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.yAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tlet a = this.xAxes.push(axis.clone());\r\n\t\t\ta.chart = this;\r\n\t\t\ta.renderer.chart = this;\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tlet a = this.yAxes.push(axis.clone());\r\n\t\t\ta.renderer.chart = this;\r\n\t\t\ta.chart = this;\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}