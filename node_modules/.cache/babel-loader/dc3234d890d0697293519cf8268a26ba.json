{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererY =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererY, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererY() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"AxisRendererY\";\n    _this.minGridDistance = 40;\n    _this.opposite = false;\n    _this.height = percent(100);\n    _this.labels.template.verticalCenter = \"middle\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n\n\n  AxisRendererY.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n\n    axis.layout = \"horizontal\";\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererY.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.y = axis.pixelY;\n      gridContainer.height = axis.axisLength;\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererY.prototype.toAxisPosition = function (value) {\n    var axis = this.axis;\n\n    if (axis) {\n      var inversedPosition = 1 - value;\n      var relativePositionSprite = axis.relativePositionSprite;\n      var y = axis.pixelY;\n\n      if (relativePositionSprite) {\n        y = $utils.spritePointToSprite({\n          x: 0,\n          y: this.pixelY\n        }, this.parent, relativePositionSprite).y;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n\n      if (relativePositionSprite) {\n        var relativeY = y / relativePositionSprite.innerHeight;\n        var relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\n        return 1 - (inversedPosition - relativeY) / relativeHeight;\n      }\n    }\n\n    return value;\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this);\n\n    var axis = this.axis;\n\n    if (axis) {\n      var title = axis.title;\n      title.valign = \"middle\";\n\n      if (!(axis.height instanceof Percent)) {\n        axis.height = percent(100);\n      }\n\n      if (this.opposite) {\n        title.rotation = 90;\n        this.line.toBack();\n        title.toFront();\n      } else {\n        title.rotation = -90;\n        title.toBack();\n        this.line.toFront();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY.prototype.updateTooltip = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var bigNum = 2000;\n      var bbx = 0;\n      var bby = 0;\n      var bbw = bigNum;\n      var bbh = this.axisLength; // right\n\n      if (this.opposite) {\n        if (this.inside) {\n          bbx = -bigNum;\n          bbw = bigNum;\n        }\n      } // left\n      else {\n        if (!this.inside) {\n          bbx = -bigNum;\n          bbw = bigNum;\n        }\n      }\n\n      this.axis.updateTooltip(\"horizontal\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n\n  Object.defineProperty(AxisRendererY.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      var axis = this.axis;\n      return axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererY.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: 0,\n      y: this.positionToCoordinate(position)\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererY.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.y, point.x);\n  };\n  /**\r\n   * Converts a coordinate in pixels to a relative position. (0-1)\r\n   *\r\n   * @param coordinate  Coordinate (px)\r\n   * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererY.prototype.coordinateToPosition = function (coordinate, coordinate2) {\n    var position;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n\n    if (axis.renderer.inversed) {\n      position = 1 - axis.start - coordinate / axisFullLength;\n    } else {\n      position = coordinate / axisFullLength + (1 - axis.end);\n    }\n\n    return $math.round(position, 5);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n\n  AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var y1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var y2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var h = Math.abs(y2 - y1);\n    var w = this.getWidth();\n    var y = Math.min(y1, y2);\n    var x = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position); //\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\n\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.getWidth(),\n      y: 0\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n\n    try {\n      $utils.used(this.axis.title.measuredWidth);\n    } catch (_a) {// void\n    }\n\n    point.x = $utils.spritePointToSprite({\n      x: this.line.pixelX,\n      y: 0\n    }, this.line.parent, this.gridContainer).x;\n\n    if (!this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: tickLength,\n      y: 0\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.axisLength\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var axis = this.axis;\n    var w = this.getWidth();\n    var h = this.axisLength;\n    var y = axis.basePoint.y;\n    var baseGrid = this.baseGrid;\n\n    if (y < -0.2 || y > h + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var x = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).x;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: w,\n        y: 0\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    label.isMeasured = !label.inside;\n    var point = this.positionToPoint(position);\n    var horizontalCenter;\n    var deltaX = 0;\n    var maxWidth = this.gridContainer.maxWidth;\n\n    if (this.opposite) {\n      if (label.inside) {\n        horizontalCenter = \"right\";\n\n        if (label.align == \"left\") {\n          deltaX = -maxWidth;\n          horizontalCenter = \"left\";\n        }\n\n        if (label.align == \"center\") {\n          deltaX = -maxWidth / 2;\n          horizontalCenter = \"middle\";\n        }\n      } else {\n        horizontalCenter = \"left\";\n      }\n\n      point.x = 0 + deltaX;\n    } else {\n      if (label.inside) {\n        horizontalCenter = \"left\";\n\n        if (label.align == \"right\") {\n          deltaX = maxWidth;\n          horizontalCenter = \"right\";\n        }\n\n        if (label.align == \"center\") {\n          deltaX = maxWidth / 2;\n          horizontalCenter = \"middle\";\n        }\n      } else {\n        horizontalCenter = \"right\";\n      }\n\n      point.x = this.measuredWidth + deltaX;\n    }\n\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.horizontalCenter = horizontalCenter;\n    }\n\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRendererY.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var x1 = axisBreak.pixelMarginLeft;\n    var x2 = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\n    startPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\n    endPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\n\n    if (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n\n    var w = Math.abs(x2 - x1);\n    startLine.x = x1;\n    startLine.height = 0;\n    startLine.width = w;\n    endLine.x = x1;\n    endLine.height = 0;\n    endLine.width = w;\n    fillShape.width = w;\n    fillShape.height = Math.abs(endPoint.y - startPoint.y);\n    fillShape.x = x1;\n    fillShape.y = endPoint.y;\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRendererY.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(true, false, true, false);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * Converts a position on the axis to a coordinate in pixels.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n\n\n  AxisRendererY.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n\n    if (!axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength;\n    }\n\n    return coordinate;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.x = $utils.spritePointToSprite({\n      x: this.line.pixelX,\n      y: 0\n    }, this.line.parent, this.gridContainer).x;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n\n  return AxisRendererY;\n}(AxisRenderer);\n\nexport { AxisRendererY };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererY) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererY) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"sources":["../../../../../src/.internal/charts/axes/AxisRendererY.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { HorizontalCenter } from \"../../core/defs/HorizontalCenter\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererYAdapters extends IAxisRendererAdapters, IAxisRendererYProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererYProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererYAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererYEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY\";\r\n\t\tthis.minGridDistance = 40;\r\n\t\tthis.opposite = false;\r\n\t\tthis.height = percent(100);\r\n\t\tthis.labels.template.verticalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"horizontal\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.y = axis.pixelY;\r\n\t\t\tgridContainer.height = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet inversedPosition = 1 - value;\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet y = axis.pixelY;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\ty = $utils.spritePointToSprite({ x: 0, y: this.pixelY }, this.parent, relativePositionSprite).y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tlet relativeY = y / relativePositionSprite.innerHeight;\r\n\t\t\t\tlet relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\r\n\r\n\t\t\t\treturn 1 - (inversedPosition - relativeY) / relativeHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.valign = \"middle\";\r\n\r\n\t\t\tif (!(axis.height instanceof Percent)) {\r\n\t\t\t\taxis.height = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\ttitle.rotation = 90;\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.rotation = -90;\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 2000;\r\n\t\t\tlet bbx: number = 0;\r\n\t\t\tlet bby: number = 0;\r\n\t\t\tlet bbw: number = bigNum;\r\n\t\t\tlet bbh: number = this.axisLength;\r\n\r\n\t\t\t// right\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// left\r\n\t\t\telse {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n\t}\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: 0, y: this.positionToCoordinate(position) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.y, point.x);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = (1 - axis.start) - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + (1 - axis.end);\r\n\t\t}\r\n\t\treturn $math.round(position, 5);\r\n\t}\t\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet y1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet y2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet h: number = Math.abs(y2 - y1);\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet y: number = Math.min(y1, y2);\r\n\t\tlet x: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\ttry {\r\n\t\t\t$utils.used(this.axis.title.measuredWidth);\r\n\t\t} catch {\r\n\t\t\t// void\r\n\t\t}\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tif (!this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet h: number = this.axisLength;\r\n\t\tlet y: number = axis.basePoint.y;\r\n\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tif (y < - 0.2 || y > h + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet horizontalCenter: HorizontalCenter;\r\n\t\tlet deltaX = 0;\r\n\t\tlet maxWidth = this.gridContainer.maxWidth;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\tif (label.align == \"left\") {\r\n\t\t\t\t\tdeltaX = -maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = -maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = 0 + deltaX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\tif (label.align == \"right\") {\r\n\t\t\t\t\tdeltaX = maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = this.measuredWidth + deltaX;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.horizontalCenter = horizontalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet x1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet x2: number = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n\r\n\t\tstartPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\r\n\t\tendPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet w = Math.abs(x2 - x1);\r\n\r\n\t\tstartLine.x = x1;\r\n\t\tstartLine.height = 0;\r\n\t\tstartLine.width = w;\r\n\r\n\t\tendLine.x = x1;\r\n\t\tendLine.height = 0;\r\n\t\tendLine.width = w;\r\n\r\n\t\tfillShape.width = w;\r\n\t\tfillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n\t\tfillShape.x = x1;\r\n\t\tfillShape.y = endPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(true, false, true, false);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (!axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}