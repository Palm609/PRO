{"ast":null,"code":"/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nexport var PI = Math.PI;\nexport var HALFPI = PI / 2;\nexport var RADIANS = PI / 180;\nexport var DEGREES = 180 / PI;\n/**\r\n * Converts any value and fits it into a specific value range.\r\n *\r\n * @param value  Source value\r\n * @param min    Minimum allowable value\r\n * @param max    Maximum allowable value\r\n * @return Number\r\n */\n\nexport function toNumberRange(value, min, max) {\n  if ($type.hasValue(value)) {\n    value = $type.toNumber(value);\n    return fitToRange(value, min, max);\n  }\n\n  return value;\n}\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\r\n * @return Rounded value\r\n */\n\nexport function round(value, precision, floor) {\n  if (!$type.isNumber(precision) || precision <= 0) {\n    var rounded = Math.round(value);\n\n    if (floor) {\n      if (rounded - value == 0.5) {\n        rounded--;\n      }\n    }\n\n    return rounded;\n  } else {\n    var d = Math.pow(10, precision);\n    return Math.round(value * d) / d;\n  }\n}\n/**\r\n * Ceils the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @return Rounded value\r\n */\n\nexport function ceil(value, precision) {\n  if (!$type.isNumber(precision) || precision <= 0) {\n    return Math.ceil(value);\n  } else {\n    var d = Math.pow(10, precision);\n    return Math.ceil(value * d) / d;\n  }\n}\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param t     Number from 0 to 1\r\n * @param from  Lowest possible value\r\n * @param to    Highest possible value\r\n * @return Adjusted value\r\n */\n\nexport function stretch(t, from, to) {\n  return t * (to - from) + from;\n}\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param value     Value\r\n * @param minValue  Lowest possible value\r\n * @param maxValue  Highest possible value\r\n * @return Adjusted value\r\n */\n\nexport function fitToRange(value, minValue, maxValue) {\n  if ($type.isNumber(minValue)) {\n    if ($type.isNumber(maxValue) && maxValue < minValue) {\n      var temp = maxValue;\n      maxValue = minValue;\n      minValue = temp;\n    }\n\n    if (value < minValue) {\n      value = minValue;\n    }\n  }\n\n  if ($type.isNumber(maxValue)) {\n    if (value > maxValue) {\n      value = maxValue;\n    }\n  }\n\n  return value;\n}\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\n\nexport function sin(value) {\n  return round(Math.sin(RADIANS * value), 10);\n}\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\n\nexport function tan(value) {\n  return round(Math.tan(RADIANS * value), 10);\n}\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param value  Value\r\n * @return Cosine\r\n */\n\nexport function cos(value) {\n  return round(Math.cos(RADIANS * value), 10);\n}\nexport function max(left, right) {\n  if ($type.isNumber(left)) {\n    if ($type.isNumber(right)) {\n      if (right > left) {\n        return right;\n      } else {\n        return left;\n      }\n    } else {\n      return left;\n    }\n  } else if ($type.isNumber(right)) {\n    return right;\n  } else {\n    return null;\n  }\n}\nexport function min(left, right) {\n  if ($type.isNumber(left)) {\n    if ($type.isNumber(right)) {\n      if (right < left) {\n        return right;\n      } else {\n        return left;\n      }\n    } else {\n      return left;\n    }\n  } else if ($type.isNumber(right)) {\n    return right;\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param values  Array of values\r\n * @param value   Reference value\r\n * @return Closes value from the array\r\n */\n\nexport function closest(values, referenceValue) {\n  return values.reduce(function (prev, curr) {\n    return Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev;\n  });\n}\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Any intersecting numbers?\r\n */\n\nexport function intersect(range1, range2) {\n  var start1 = $type.getValue(range1.start);\n  var start2 = $type.getValue(range2.start);\n  var end1 = $type.getValue(range1.end);\n  var end2 = $type.getValue(range2.end);\n  return Math.max(start1, start2) <= Math.min(end1, end2);\n}\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param range  Range\r\n */\n\nexport function invertRange(range) {\n  var start = $type.getValue(range.start);\n  var end = $type.getValue(range.end);\n  return {\n    start: 1 - end,\n    end: 1 - start\n  };\n}\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Intersecting value range\r\n */\n\nexport function intersection(range1, range2) {\n  var start1 = $type.getValue(range1.start);\n  var start2 = $type.getValue(range2.start);\n  var end1 = $type.getValue(range1.end);\n  var end2 = $type.getValue(range2.end);\n  var startMax = Math.max(start1, start2);\n  var endMin = Math.min(end1, end2);\n\n  if (endMin < startMax) {\n    return undefined;\n  } else {\n    return {\n      start: startMax,\n      end: endMin\n    };\n  }\n}\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\n\nexport function getDistance(point1, point2) {\n  if (!point1) {\n    return 0;\n  }\n\n  if (!point2) {\n    point2 = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\n}\n/**\r\n * Returns pixel \"horizontal distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\n\nexport function getHorizontalDistance(point1, point2) {\n  if (!point1) {\n    return 0;\n  }\n\n  if (!point2) {\n    point2 = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return Math.abs(point1.x - point2.x);\n}\n/**\r\n * Returns pixel \"vertical distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\n\nexport function getVerticalDistance(point1, point2) {\n  if (!point1) {\n    return 0;\n  }\n\n  if (!point2) {\n    point2 = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return Math.abs(point1.y - point2.y);\n}\n/**\r\n * Returns approximate pixel \"distance\" between two points of cubic curve\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @param controlPointA  Control Point 1\r\n * @param controlPointB  Control Point 2\r\n * @param stepCount  number of steps (the more, the more accurate result)\r\n * @return Distance in relative pixels\r\n */\n\nexport function getCubicCurveDistance(point1, point2, controlPointA, controlPointB, stepCount) {\n  if (!point1) {\n    return 0;\n  }\n\n  if (!point2) {\n    point2 = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  var distance = 0;\n  var prevPoint = point1;\n\n  if (stepCount > 0) {\n    for (var s = 0; s <= stepCount; s++) {\n      var point = getPointOnCubicCurve(point1, point2, controlPointA, controlPointB, s / stepCount);\n      distance += getDistance(prevPoint, point);\n      prevPoint = point;\n    }\n  }\n\n  return distance;\n}\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Scale        Calculated scale\r\n */\n\nexport function getScale(point1, startPoint1, point2, startPoint2) {\n  var initialDistance = getDistance(startPoint1, startPoint2);\n  var currentDistance = getDistance(point1, point2);\n  return Math.abs(currentDistance / initialDistance);\n}\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param point1     Position of point 1\r\n * @param point2     Position of point 2\r\n * @return Mid point  Position of mid-point\r\n */\n\nexport function getMidPoint(point1, point2, position) {\n  if (!$type.isNumber(position)) {\n    position = 0.5;\n  }\n\n  return {\n    \"x\": point1.x + (point2.x - point1.x) * position,\n    \"y\": point1.y + (point2.y - point1.y) * position\n  };\n}\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Angle difference in degrees\r\n */\n\nexport function getRotation(point1, startPoint1, point2, startPoint2) {\n  // Get start and end angles\n  var startAngle = getAngle(startPoint1, startPoint2);\n  var angle = getAngle(point1, point2); // Calculate angle\n\n  var diff = startAngle - angle;\n\n  if (diff < 0) {\n    diff += 360;\n  }\n\n  return diff;\n}\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Angle in degrees\r\n */\n\nexport function getAngle(point1, point2) {\n  if (!point2) {\n    point2 = {\n      x: point1.x * 2,\n      y: point1.y * 2\n    };\n  }\n\n  var diffX = point2.x - point1.x;\n  var diffY = point2.y - point1.y;\n  var angle = Math.atan2(diffY, diffX) * DEGREES;\n\n  if (angle < 0) {\n    angle += 360;\n  }\n\n  return normalizeAngle(angle);\n}\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param center       Current center\r\n * @param point1       Frst reference point\r\n * @param startPoint1  Original position of the first reference point\r\n * @param point2       Second reference point\r\n * @param startPoint2  Original position of the first reference point\r\n * @return Shift in center point coordinates\r\n */\n\nexport function getCenterShift(center, point1, startPoint1, point2, startPoint2) {\n  // Get angle\n  var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;\n\n  if (angle < 0) {\n    angle += 360;\n  } // Get distance between new position\n\n\n  var distance = getDistance(point1, point2); // Calculate new X\n\n  var x = Math.cos(angle) / distance + point1.x;\n  var y = Math.cos(angle) / distance + point1.y;\n  var shift = {\n    \"x\": x - center.x,\n    \"y\": y - center.y\n  };\n  return shift;\n}\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param points  Points\r\n * @return Bounding box rectangle\r\n */\n\nexport function getBBox(points) {\n  if (points) {\n    var length_1 = points.length;\n\n    if (length_1 !== 0) {\n      var left = void 0;\n      var right = void 0;\n      var top_1;\n      var bottom = void 0;\n\n      for (var i = 0; i < length_1; i++) {\n        var point = points[i];\n\n        if (!$type.isNumber(right) || point.x > right) {\n          right = point.x;\n        }\n\n        if (!$type.isNumber(left) || point.x < left) {\n          left = point.x;\n        }\n\n        if (!$type.isNumber(top_1) || point.y < top_1) {\n          top_1 = point.y;\n        }\n\n        if (!$type.isNumber(bottom) || point.y > bottom) {\n          bottom = point.y;\n        }\n      }\n\n      return {\n        x: left,\n        y: top_1,\n        width: right - left,\n        height: bottom - top_1\n      };\n    }\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n}\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param rectangles  An array of rectangles\r\n * @return Common rectangle\r\n */\n\nexport function getCommonRectangle(rectangles) {\n  var length = rectangles.length;\n\n  if (length !== 0) {\n    var minX = void 0;\n    var minY = void 0;\n    var maxX = void 0;\n    var maxY = void 0;\n\n    for (var i = 0; i < length; i++) {\n      var rectangle = rectangles[i];\n      minX = min(rectangle.x, minX);\n      minY = min(rectangle.y, minY);\n      maxX = max(rectangle.x + rectangle.width, maxX);\n      maxY = max(rectangle.y + rectangle.height, maxY);\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n}\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA        [description]\r\n * @param pointB        [description]\r\n * @param controlPoint  [description]\r\n * @param position      [description]\r\n * @return [description]\r\n */\n\nexport function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {\n  var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\n  var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA         [description]\r\n * @param pointB         [description]\r\n * @param controlPointA  [description]\r\n * @param controlPointB  [description]\r\n * @param position       [description]\r\n * @return [description]\r\n */\n\nexport function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {\n  var point = {\n    x: 0,\n    y: 0\n  };\n  var mt1 = 1 - position;\n  var mt2 = mt1 * mt1;\n  var mt3 = mt2 * mt1;\n  point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\n  point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\n  return point;\n}\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\n\nexport function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {\n  tensionX = adjustTension(tensionX);\n  tensionY = adjustTension(tensionY);\n  return {\n    x: (-p0.x + p1.x / tensionX + p2.x) * tensionX,\n    y: (-p0.y + p1.y / tensionY + p2.y) * tensionY\n  };\n}\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\n\nexport function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {\n  tensionX = adjustTension(tensionX);\n  tensionY = adjustTension(tensionY);\n  return {\n    x: (p1.x + p2.x / tensionX - p3.x) * tensionX,\n    y: (p1.y + p2.y / tensionY - p3.y) * tensionY\n  };\n}\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param tension  [description]\r\n * @return [description]\r\n */\n\nexport function adjustTension(tension) {\n  return 1 - tension + 0.00001;\n}\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @return [description]\r\n */\n\nexport function normalizeAngle(value) {\n  if (value == 360) {\n    return 360;\n  }\n\n  return value % 360;\n}\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param value       [description]\r\n * @param startAngle  [description]\r\n * @param endAngle    [description]\r\n * @return [description]\r\n */\n\nexport function fitAngleToRange(value, startAngle, endAngle) {\n  if (startAngle > endAngle) {\n    var temp = startAngle;\n    startAngle = endAngle;\n    endAngle = temp;\n  }\n\n  value = normalizeAngle(value);\n  var count = (startAngle - normalizeAngle(startAngle)) / 360;\n\n  if (value < startAngle) {\n    value += 360 * (count + 1);\n  }\n\n  var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;\n  var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;\n\n  if (value > endAngle) {\n    if (value - 360 > startAngle) {\n      value -= 360;\n    } else {\n      if (value < maxEnd) {\n        value = endAngle;\n      } else {\n        value = startAngle;\n      }\n    }\n  }\n\n  if (value < startAngle) {\n    if (value > maxStart) {\n      value = startAngle;\n    } else {\n      value = endAngle;\n    }\n  }\n\n  return value;\n}\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param startAngle  Start angle\r\n * @param endAngle    End angle\r\n * @param radius    \t Relative radius\r\n * @return Rectangle\r\n */\n\nexport function getArcRect(startAngle, endAngle, radius) {\n  var minX = Number.MAX_VALUE;\n  var minY = Number.MAX_VALUE;\n  var maxX = -Number.MAX_VALUE;\n  var maxY = -Number.MAX_VALUE;\n  var bpoints = [];\n\n  if (!$type.isNumber(radius)) {\n    radius = 1;\n  }\n\n  bpoints.push(getArcPoint(radius, startAngle));\n  bpoints.push(getArcPoint(radius, endAngle));\n  var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\n  var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\n\n  for (var angle = fromAngle; angle <= toAngle; angle += 90) {\n    if (angle >= startAngle && angle <= endAngle) {\n      bpoints.push(getArcPoint(radius, angle));\n    }\n  }\n\n  for (var i = 0; i < bpoints.length; i++) {\n    var pt = bpoints[i];\n\n    if (pt.x < minX) {\n      minX = pt.x;\n    }\n\n    if (pt.y < minY) {\n      minY = pt.y;\n    }\n\n    if (pt.x > maxX) {\n      maxX = pt.x;\n    }\n\n    if (pt.y > maxY) {\n      maxY = pt.y;\n    }\n  }\n\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n/**\r\n * Returns point on arc\r\n *\r\n * @param center point\r\n * @param radius\r\n * @param arc\r\n * @return {boolean}\r\n */\n\nexport function getArcPoint(radius, arc) {\n  return {\n    x: radius * cos(arc),\n    y: radius * sin(arc)\n  };\n}\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param point\r\n * @param rectangle\r\n * @return {boolean}\r\n */\n\nexport function isInRectangle(point, rectangle) {\n  if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height) {\n    return true;\n  }\n\n  return false;\n}\nexport function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {\n  var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\n  var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\n  return {\n    x: x,\n    y: y\n  };\n}","map":{"version":3,"sources":["../../../../../src/.internal/core/utils/Math.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { IRange } from \"../defs/IRange\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport const PI = Math.PI;\r\nexport const HALFPI = PI / 2;\r\nexport const RADIANS = PI / 180;\r\nexport const DEGREES = 180 / PI;\r\n\r\n/**\r\n * Converts any value and fits it into a specific value range.\r\n *\r\n * @param value  Source value\r\n * @param min    Minimum allowable value\r\n * @param max    Maximum allowable value\r\n * @return Number\r\n */\r\nexport function toNumberRange(value: any, min: number, max: number): number {\r\n\tif ($type.hasValue(value)) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\treturn fitToRange(value, min, max);\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\r\n * @return Rounded value\r\n */\r\nexport function round(value: number, precision?: number, floor?: boolean): number {\r\n\tif (!$type.isNumber(precision) || precision <= 0) {\r\n\r\n\t\tlet rounded = Math.round(value);\r\n\t\tif (floor) {\r\n\t\t\tif (rounded - value == 0.5) {\r\n\t\t\t\trounded--;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rounded;\r\n\t}\r\n\telse {\r\n\t\tlet d: number = Math.pow(10, precision);\r\n\t\treturn Math.round(value * d) / d;\r\n\t}\r\n}\r\n\r\n/**\r\n * Ceils the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @return Rounded value\r\n */\r\nexport function ceil(value: number, precision?: number): number {\r\n\tif (!$type.isNumber(precision) || precision <= 0) {\r\n\t\treturn Math.ceil(value);\r\n\t}\r\n\telse {\r\n\t\tlet d: number = Math.pow(10, precision);\r\n\t\treturn Math.ceil(value * d) / d;\r\n\t}\r\n}\r\n\r\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param t     Number from 0 to 1\r\n * @param from  Lowest possible value\r\n * @param to    Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function stretch(t: number, from: number, to: number): number {\r\n\treturn (t * (to - from)) + from;\r\n}\r\n\r\n\r\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param value     Value\r\n * @param minValue  Lowest possible value\r\n * @param maxValue  Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function fitToRange(value: number, minValue: $type.Optional<number>, maxValue: $type.Optional<number>): number {\r\n\tif ($type.isNumber(minValue)) {\r\n\t\tif ($type.isNumber(maxValue) && maxValue < minValue) {\r\n\t\t\tlet temp = maxValue;\r\n\t\t\tmaxValue = minValue;\r\n\t\t\tminValue = temp;\r\n\t\t}\r\n\r\n\t\tif (value < minValue) {\r\n\t\t\tvalue = minValue;\r\n\t\t}\r\n\t}\r\n\r\n\tif ($type.isNumber(maxValue)) {\r\n\t\tif (value > maxValue) {\r\n\t\t\tvalue = maxValue;\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function sin(value: number): number {\r\n\treturn round(Math.sin(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function tan(value: number): number {\r\n\treturn round(Math.tan(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param value  Value\r\n * @return Cosine\r\n */\r\nexport function cos(value: number): number {\r\n\treturn round(Math.cos(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns biggest value out of passed in numeric values.\r\n *\r\n * @param left   Numeric value\r\n * @param right  Numeric value\r\n * @return Biggest value\r\n */\r\nexport function max(left: number, right: number): number;\r\nexport function max(left: number, right: $type.Optional<number>): number;\r\nexport function max(left: $type.Optional<number>, right: number): number;\r\nexport function max(left: $type.Optional<number>, right: $type.Optional<number>): $type.Optional<number>;\r\nexport function max(left: any, right: any): any {\r\n\tif ($type.isNumber(left)) {\r\n\t\tif ($type.isNumber(right)) {\r\n\t\t\tif (right > left) {\r\n\t\t\t\treturn right;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn left;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn left;\r\n\t\t}\r\n\r\n\t} else if ($type.isNumber(right)) {\r\n\t\treturn right;\r\n\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns smallest value out of passed in numeric values.\r\n *\r\n * @param left   Numeric value\r\n * @param right  Numeric value\r\n * @return Smallest value\r\n */\r\nexport function min(left: number, right: number): number;\r\nexport function min(left: number, right: $type.Optional<number>): number;\r\nexport function min(left: $type.Optional<number>, right: number): number;\r\nexport function min(left: $type.Optional<number>, right: $type.Optional<number>): $type.Optional<number>;\r\nexport function min(left: any, right: any): any {\r\n\tif ($type.isNumber(left)) {\r\n\t\tif ($type.isNumber(right)) {\r\n\t\t\tif (right < left) {\r\n\t\t\t\treturn right;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn left;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn left;\r\n\t\t}\r\n\r\n\t} else if ($type.isNumber(right)) {\r\n\t\treturn right;\r\n\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param values  Array of values\r\n * @param value   Reference value\r\n * @return Closes value from the array\r\n */\r\nexport function closest(values: number[], referenceValue: number): number {\r\n\treturn values.reduce(function(prev, curr) {\r\n\t\treturn (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);\r\n\t});\r\n}\r\n\r\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Any intersecting numbers?\r\n */\r\nexport function intersect(range1: IRange, range2: IRange): boolean {\r\n\tlet start1: number = $type.getValue(range1.start);\r\n\tlet start2: number = $type.getValue(range2.start);\r\n\tlet end1: number = $type.getValue(range1.end);\r\n\tlet end2: number = $type.getValue(range2.end);\r\n\r\n\treturn Math.max(start1, start2) <= Math.min(end1, end2);\r\n}\r\n\r\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param range  Range\r\n */\r\nexport function invertRange(range: IRange) {\r\n\tlet start: number = $type.getValue(range.start);\r\n\tlet end: number = $type.getValue(range.end);\r\n\treturn { start: 1 - end, end: 1 - start };\r\n}\r\n\r\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Intersecting value range\r\n */\r\nexport function intersection(range1: IRange, range2: IRange): $type.Optional<IRange> {\r\n\tlet start1: number = $type.getValue(range1.start);\r\n\tlet start2: number = $type.getValue(range2.start);\r\n\tlet end1: number = $type.getValue(range1.end);\r\n\tlet end2: number = $type.getValue(range2.end);\r\n\tlet startMax: number = Math.max(start1, start2);\r\n\tlet endMin: number = Math.min(end1, end2);\r\n\r\n\tif (endMin < startMax) {\r\n\t\treturn undefined;\r\n\t}\r\n\telse {\r\n\t\treturn { start: startMax, end: endMin };\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\r\n}\r\n\r\n/**\r\n * Returns pixel \"horizontal distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getHorizontalDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.abs(point1.x - point2.x);\r\n}\r\n\r\n/**\r\n * Returns pixel \"vertical distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getVerticalDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.abs(point1.y - point2.y);\r\n}\r\n\r\n/**\r\n * Returns approximate pixel \"distance\" between two points of cubic curve\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @param controlPointA  Control Point 1\r\n * @param controlPointB  Control Point 2\r\n * @param stepCount  number of steps (the more, the more accurate result)\r\n * @return Distance in relative pixels\r\n */\r\nexport function getCubicCurveDistance(point1: IPoint, point2: IPoint, controlPointA: IPoint, controlPointB: IPoint, stepCount:number): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\r\n\tlet distance = 0;\r\n\tlet prevPoint: IPoint = point1;\r\n\tif (stepCount > 0) {\r\n\t\tfor (let s = 0; s <= stepCount; s++) {\r\n\t\t\tlet point = getPointOnCubicCurve(point1, point2, controlPointA, controlPointB, s / stepCount);\r\n\t\t\tdistance += getDistance(prevPoint, point);\r\n\t\t\tprevPoint = point;\r\n\t\t}\r\n\t}\r\n\treturn distance;\r\n}\r\n\r\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Scale        Calculated scale\r\n */\r\nexport function getScale(point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): number {\r\n\tlet initialDistance: number = getDistance(startPoint1, startPoint2);\r\n\tlet currentDistance: number = getDistance(point1, point2);\r\n\r\n\treturn Math.abs(currentDistance / initialDistance);\r\n}\r\n\r\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param point1     Position of point 1\r\n * @param point2     Position of point 2\r\n * @return Mid point  Position of mid-point\r\n */\r\nexport function getMidPoint(point1: IPoint, point2: IPoint, position?: number): IPoint {\r\n\tif (!$type.isNumber(position)) {\r\n\t\tposition = 0.5;\r\n\t}\r\n\r\n\treturn {\r\n\t\t\"x\": (point1.x + (point2.x - point1.x) * position),\r\n\t\t\"y\": (point1.y + (point2.y - point1.y) * position)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Angle difference in degrees\r\n */\r\nexport function getRotation(point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): number {\r\n\r\n\t// Get start and end angles\r\n\tlet startAngle: number = getAngle(startPoint1, startPoint2);\r\n\tlet angle: number = getAngle(point1, point2);\r\n\r\n\t// Calculate angle\r\n\tlet diff: number = startAngle - angle;\r\n\tif (diff < 0) {\r\n\t\tdiff += 360;\r\n\t}\r\n\r\n\treturn diff;\r\n}\r\n\r\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Angle in degrees\r\n */\r\nexport function getAngle(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: point1.x * 2, y: point1.y * 2 };\r\n\t}\r\n\tlet diffX: number = point2.x - point1.x;\r\n\tlet diffY: number = point2.y - point1.y;\r\n\tlet angle: number = Math.atan2(diffY, diffX) * DEGREES;\r\n\tif (angle < 0) {\r\n\t\tangle += 360;\r\n\t}\r\n\treturn normalizeAngle(angle);\r\n}\r\n\r\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param center       Current center\r\n * @param point1       Frst reference point\r\n * @param startPoint1  Original position of the first reference point\r\n * @param point2       Second reference point\r\n * @param startPoint2  Original position of the first reference point\r\n * @return Shift in center point coordinates\r\n */\r\nexport function getCenterShift(center: IPoint, point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): IPoint {\r\n\r\n\t// Get angle\r\n\tlet angle: number = getRotation(point1, startPoint1, point2, startPoint2) - 90;\r\n\tif (angle < 0) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\t// Get distance between new position\r\n\tlet distance: number = getDistance(point1, point2);\r\n\r\n\t// Calculate new X\r\n\tlet x: number = Math.cos(angle) / distance + point1.x;\r\n\tlet y: number = Math.cos(angle) / distance + point1.y;\r\n\r\n\tlet shift: IPoint = {\r\n\t\t\"x\": x - center.x,\r\n\t\t\"y\": y - center.y\r\n\t}\r\n\treturn shift;\r\n}\r\n\r\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param points  Points\r\n * @return Bounding box rectangle\r\n */\r\nexport function getBBox(points: IPoint[]): $type.Optional<IRectangle> {\r\n\tif (points) {\r\n\t\tlet length = points.length;\r\n\r\n\t\tif (length !== 0) {\r\n\t\t\tlet left!: number;\r\n\t\t\tlet right!: number;\r\n\t\t\tlet top!: number;\r\n\t\t\tlet bottom!: number;\r\n\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tlet point: IPoint = points[i];\r\n\r\n\t\t\t\tif (!$type.isNumber(right) || (point.x > right)) {\r\n\t\t\t\t\tright = point.x;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(left) || (point.x < left)) {\r\n\t\t\t\t\tleft = point.x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(top) || (point.y < top)) {\r\n\t\t\t\t\ttop = point.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(bottom) || (point.y > bottom)) {\r\n\t\t\t\t\tbottom = point.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn { x: left, y: top, width: right - left, height: bottom - top };\r\n\t\t}\r\n\t}\r\n\r\n\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n}\r\n\r\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param rectangles  An array of rectangles\r\n * @return Common rectangle\r\n */\r\nexport function getCommonRectangle(rectangles: IRectangle[]): $type.Optional<IRectangle> {\r\n\tlet length = rectangles.length;\r\n\r\n\tif (length !== 0) {\r\n\t\tlet minX!: number;\r\n\t\tlet minY!: number;\r\n\t\tlet maxX!: number;\r\n\t\tlet maxY!: number;\r\n\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tlet rectangle = rectangles[i];\r\n\t\t\tminX = min(rectangle.x, minX);\r\n\t\t\tminY = min(rectangle.y, minY);\r\n\t\t\tmaxX = max(rectangle.x + rectangle.width, maxX);\r\n\t\t\tmaxY = max(rectangle.y + rectangle.height, maxY);\r\n\t\t}\r\n\r\n\t\treturn { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\r\n\t}\r\n}\r\n\r\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA        [description]\r\n * @param pointB        [description]\r\n * @param controlPoint  [description]\r\n * @param position      [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnQuadraticCurve(pointA: IPoint, pointB: IPoint, controlPoint: IPoint, position: number): IPoint {\r\n\tlet x: number = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\r\n\tlet y: number = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA         [description]\r\n * @param pointB         [description]\r\n * @param controlPointA  [description]\r\n * @param controlPointB  [description]\r\n * @param position       [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnCubicCurve(pointA: IPoint, pointB: IPoint, controlPointA: IPoint, controlPointB: IPoint, position: number): IPoint {\r\n\tlet point: IPoint = { x: 0, y: 0 };\r\n\tlet mt1: number = 1 - position;\r\n\tlet mt2: number = mt1 * mt1;\r\n\tlet mt3: number = mt2 * mt1;\r\n\r\n\tpoint.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\r\n\tpoint.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\r\n\r\n\treturn point;\r\n}\r\n\r\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointA(p0: IPoint, p1: IPoint, p2: IPoint, p3: IPoint, tensionX: number, tensionY: number): IPoint {\r\n\ttensionX = adjustTension(tensionX);\r\n\ttensionY = adjustTension(tensionY);\r\n\treturn { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };\r\n}\r\n\r\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointB(p0: IPoint, p1: IPoint, p2: IPoint, p3: IPoint, tensionX: number, tensionY: number): IPoint {\r\n\ttensionX = adjustTension(tensionX);\r\n\ttensionY = adjustTension(tensionY);\r\n\treturn { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };\r\n}\r\n\r\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param tension  [description]\r\n * @return [description]\r\n */\r\nexport function adjustTension(tension: number): number {\r\n\treturn 1 - tension + 0.00001;\r\n}\r\n\r\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @return [description]\r\n */\r\nexport function normalizeAngle(value: number): number {\r\n\tif (value == 360) {\r\n\t\treturn 360;\r\n\t}\r\n\treturn value % 360;\r\n}\r\n\r\n\r\n\r\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param value       [description]\r\n * @param startAngle  [description]\r\n * @param endAngle    [description]\r\n * @return [description]\r\n */\r\nexport function fitAngleToRange(value: number, startAngle: number, endAngle: number): number {\r\n\r\n\tif (startAngle > endAngle) {\r\n\t\tlet temp: number = startAngle;\r\n\t\tstartAngle = endAngle;\r\n\t\tendAngle = temp;\r\n\t}\r\n\r\n\tvalue = normalizeAngle(value);\r\n\r\n\tlet count = (startAngle - normalizeAngle(startAngle)) / 360;\r\n\r\n\tif (value < startAngle) {\r\n\t\tvalue += 360 * (count + 1);\r\n\t}\r\n\r\n\tlet maxEnd: number = startAngle + (endAngle - startAngle) / 2 + 180;\r\n\tlet maxStart: number = startAngle + (endAngle - startAngle) / 2 - 180;\r\n\r\n\tif (value > endAngle) {\r\n\r\n\t\tif (value - 360 > startAngle) {\r\n\t\t\tvalue -= 360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (value < maxEnd) {\r\n\t\t\t\tvalue = endAngle;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (value < startAngle) {\r\n\t\tif (value > maxStart) {\r\n\t\t\tvalue = startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue = endAngle;\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param startAngle  Start angle\r\n * @param endAngle    End angle\r\n * @param radius    \t Relative radius\r\n * @return Rectangle\r\n */\r\nexport function getArcRect(startAngle: number, endAngle: number, radius?: number): IRectangle {\r\n\r\n\tlet minX = Number.MAX_VALUE;\r\n\tlet minY = Number.MAX_VALUE;\r\n\tlet maxX = -Number.MAX_VALUE;\r\n\tlet maxY = -Number.MAX_VALUE;\r\n\r\n\tlet bpoints = [];\r\n\r\n\tif (!$type.isNumber(radius)) {\r\n\t\tradius = 1;\r\n\t}\r\n\r\n\tbpoints.push(getArcPoint(radius, startAngle));\r\n\tbpoints.push(getArcPoint(radius, endAngle));\r\n\r\n\tlet fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\r\n\tlet toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\r\n\r\n\tfor (let angle = fromAngle; angle <= toAngle; angle += 90) {\r\n\t\tif (angle >= startAngle && angle <= endAngle) {\r\n\t\t\tbpoints.push(getArcPoint(radius, angle));\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 0; i < bpoints.length; i++) {\r\n\t\tlet pt = bpoints[i];\r\n\t\tif (pt.x < minX) { minX = pt.x; }\r\n\t\tif (pt.y < minY) { minY = pt.y; }\r\n\t\tif (pt.x > maxX) { maxX = pt.x; }\r\n\t\tif (pt.y > maxY) { maxY = pt.y; }\r\n\t}\r\n\r\n\treturn ({ x: minX, y: minY, width: maxX - minX, height: maxY - minY });\r\n}\r\n\r\n/**\r\n * Returns point on arc\r\n *\r\n * @param center point\r\n * @param radius\r\n * @param arc\r\n * @return {boolean}\r\n */\r\nexport function getArcPoint(radius: number, arc: number) {\r\n\treturn ({ x: radius * cos(arc), y: radius * sin(arc) });\r\n}\r\n\r\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param point\r\n * @param rectangle\r\n * @return {boolean}\r\n */\r\nexport function isInRectangle(point: IPoint, rectangle: IRectangle): boolean {\r\n\tif (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\nexport function getLineIntersection(pointA1: IPoint, pointA2: IPoint, pointB1: IPoint, pointB2: IPoint) {\r\n\tlet x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n\tlet y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n\treturn { x: x, y: y };\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}