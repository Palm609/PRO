{"ast":null,"code":"/**\r\n * ExportMenu provides functionality for building Export menu\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport exportCSS from \"./ExportCSS\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { List } from \"../utils/List\";\nimport { getInteraction } from \"../interaction/Interaction\";\nimport { MutableValueDisposer } from \"../utils/Disposer\";\nimport { Language } from \"../utils/Language\";\nimport { Validatable } from \"../utils/Validatable\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $iter from \"../utils/Iterator\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a menu for Export operations.\r\n *\r\n * To add an export menu to a chart, set this to a new instance of\r\n * [[ExportMenu]].\r\n *\r\n * ```TypeScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"exporting\": {\r\n *     \"menu\": {}\r\n *   }\r\n * }\r\n * ```\r\n * @important\r\n */\n\nvar ExportMenu =\n/** @class */\nfunction (_super) {\n  __extends(ExportMenu, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ExportMenu() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * An [[Adapter]].\r\n     */\n\n\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * How many milliseconds to hold menu/sub-menu open after it loses focus or\r\n     * hover, before auto-closing it.\r\n     *\r\n     * @default 1000\r\n     */\n\n    _this.closeDelay = 1000;\n    /**\r\n     * Close the menu automatically when some export operation is triggered.\r\n     *\r\n     * @default true\r\n     * @since 4.2.2\r\n     */\n\n    _this.closeOnClick = true;\n    /**\r\n     * An instance of [[Language]].\r\n     */\n\n    _this._language = new MutableValueDisposer();\n    /**\r\n     * What HTML tags to use to build menu.\r\n     */\n\n    _this._menuTag = \"ul\";\n    /**\r\n     * Which tag to use to enclose individual menu items.\r\n     */\n\n    _this._itemTag = \"li\";\n    /**\r\n     * Tag to wrap menu item labels in.\r\n     */\n\n    _this._labelTag = \"a\";\n    /**\r\n     * Tag to use for icons\r\n     */\n\n    _this._iconTag = \"img\";\n    /**\r\n     * Prefix for class names applied to menu elements.\r\n     */\n\n    _this._classPrefix = \"amexport\";\n    /**\r\n     * If set to `true` [[ExportMenu]] will load it's own external CSS when\r\n     * instantiated.\r\n     */\n\n    _this._defaultStyles = true;\n    /**\r\n     * Horizontal positioning.\r\n     */\n\n    _this._align = \"right\";\n    /**\r\n     * Vertical positioning.\r\n     */\n\n    _this._verticalAlign = \"top\";\n    /**\r\n     * A tabindex to apply to Export Menu.\r\n     */\n\n    _this._tabindex = 0;\n    /**\r\n     * Whether next menu close event should be ignored.\r\n     */\n\n    _this._ignoreNextClose = false;\n    /**\r\n     * Default menu items.\r\n     */\n\n    _this._items = [{\n      \"label\": \"...\",\n      \"menu\": [{\n        \"label\": \"Image\",\n        \"menu\": [{\n          \"type\": \"png\",\n          \"label\": \"PNG\"\n        }, {\n          \"type\": \"jpg\",\n          \"label\": \"JPG\"\n        }, {\n          \"type\": \"svg\",\n          \"label\": \"SVG\"\n        }, {\n          \"type\": \"pdf\",\n          \"label\": \"PDF\"\n        }]\n      }, {\n        \"label\": \"Data\",\n        \"menu\": [{\n          \"type\": \"json\",\n          \"label\": \"JSON\"\n        }, {\n          \"type\": \"csv\",\n          \"label\": \"CSV\"\n        }, {\n          \"type\": \"xlsx\",\n          \"label\": \"XLSX\"\n        }, {\n          \"type\": \"html\",\n          \"label\": \"HTML\"\n        }, {\n          \"type\": \"pdfdata\",\n          \"label\": \"PDF\"\n        }]\n      }, {\n        \"label\": \"Print\",\n        \"type\": \"print\"\n      }]\n    }];\n    _this.className = \"ExportMenu\";\n\n    _this._disposers.push(_this._language);\n\n    _this.invalidate();\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)draws the Export menu.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ExportMenu.prototype.validate = function () {\n    this.draw();\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Draws the menu based on current items.\r\n   *\r\n   * Normally, there's no need to call this explicitly. The chart, if it has\r\n   * export menu enabled, will automatically draw the menu.\r\n   */\n\n\n  ExportMenu.prototype.draw = function () {\n    var _this = this; // Create top-level menu item, or clear it\n\n\n    if (!this._element) {\n      this._element = this.createMenuElement(0);\n    } else {\n      this._element.innerHTML = \"\";\n      this._element.className = this.getMenuItemClass(0);\n    } // See if we're loading external CSS\n    // Hide it until CSS is loaded\n\n\n    if (this.defaultStyles) {\n      this._element.style.display = \"none\";\n    } // Append to container\n\n\n    $type.getValue(this._container).appendChild(this._element); // Apply adapter to menu items before processing\n\n    var items = this.adapter.apply(\"items\", {\n      items: this._items\n    }).items;\n\n    for (var len = items.length, i = 0; i < len; i++) {\n      this.drawBranch(this._element, items[i], 0);\n    } // Apply adapter to finalized menu element\n\n\n    this._element = this.adapter.apply(\"menuElement\", {\n      menuElement: this._element\n    }).menuElement; // Set up global \"down\" event\n\n    this._disposers.push(getInteraction().body.events.on(\"down\", function (ev) {\n      if (!ev.pointer.touch) {\n        _this._ignoreNextClose = false;\n      }\n\n      _this.close();\n    })); // Set up global event on ESC press to close the menu\n\n\n    this._disposers.push(getInteraction().body.events.on(\"keydown\", function (ev) {\n      var key = keyboard.getEventKey(ev.event);\n\n      switch (key) {\n        case \"esc\":\n          _this.close();\n\n          break;\n\n        case \"up\":\n        case \"down\":\n        case \"left\":\n        case \"right\":\n          if (_this._currentSelection) {\n            ev.event.preventDefault();\n          }\n\n          _this.moveSelection(key);\n\n          break;\n      }\n    }));\n\n    if (this.defaultStyles) {\n      this.loadDefaultCSS();\n    }\n  };\n  /**\r\n   * Creates a new branch in export menu. This function is recursive for\r\n   * building multi-level menus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param container Container to put branch elements in\r\n   * @param branch    Menu item\r\n   * @param level     Current nesting level\r\n   */\n\n\n  ExportMenu.prototype.drawBranch = function (container, branch, level) {\n    var _this = this; // Apply adapter\n\n\n    branch = this.adapter.apply(\"branch\", {\n      branch: branch,\n      level: level\n    }).branch; // Unsupported?\n    // ExportMenu does not check or know for specific browser/system\n    // capabilities. It must happen in some other code and applied via Adapter.\n    // Export itself will check compatibility, but there might be other plugins\n    // that influence it or even add any specific export functionality.\n\n    if (branch.unsupported === true) {\n      return;\n    } // Init ascendants\n\n\n    if (!branch.ascendants) {\n      branch.ascendants = new List();\n    } // Get type\n\n\n    var type = branch.type; // Create an item\n\n    var element = this.createItemElement(level, type); // Create label\n\n    var label; // Create icon\n\n    if (branch.icon) {\n      label = this.createIconElement(level, type);\n      label.src = branch.icon;\n\n      if (branch.label || branch.title) {\n        label.title = branch.title || branch.label;\n      }\n    } else if (branch.svg) {\n      label = this.createSvgElement(level, type, branch.svg);\n\n      if (branch.label || branch.title) {\n        label.title = branch.title || branch.label;\n      }\n    } else {\n      label = this.createLabelElement(level, type);\n      label.innerHTML = branch.label ? this.language.translate(branch.label) : \"\";\n\n      if (branch.title) {\n        label.title = branch.title;\n      }\n    } // Apply reader text to label\n\n\n    var readerLabel = this.getReaderLabel(branch, label.innerHTML);\n    label.setAttribute(\"aria-label\", readerLabel); // Add Label\n\n    element.appendChild(label); // Create interaction object\n    // TODO clean this up when it's disposed\n\n    branch.interactions = getInteraction().getInteraction(element);\n    branch.element = element; // Create interaction manager we can set event listeners to\n\n    if (this.typeClickable(type)) {\n      //branch.interactions.clickable = true;\n      // TODO clean this up when it's disposed\n      branch.interactions.events.on(\"hit\", function (ev) {\n        if (_this.events.isEnabled(\"hit\") && !_this.isDisposed()) {\n          var event_1 = {\n            \"type\": \"hit\",\n            \"event\": ev.event,\n            \"target\": _this,\n            \"branch\": branch\n          };\n\n          _this.events.dispatchImmediately(\"hit\", event_1);\n        }\n      }); // TODO clean this up when it's disposed\n\n      branch.interactions.events.on(\"keyup\", function (ev) {\n        if (keyboard.isKey(ev.event, \"enter\")) {\n          if (_this.events.isEnabled(\"enter\")) {\n            var event_2 = {\n              \"type\": \"enter\",\n              \"event\": ev.event,\n              \"target\": _this,\n              \"branch\": branch\n            };\n\n            _this.events.dispatchImmediately(\"enter\", event_2);\n          }\n        }\n      });\n    }\n\n    {\n      var submenu_1 = this.getSubMenu(branch); // Add ENTER event to open sub-menus\n\n      if (submenu_1 != null) {\n        // TODO clean this up when it's disposed\n        branch.interactions.events.on(\"keyup\", function (ev) {\n          if (keyboard.isKey(ev.event, \"enter\")) {\n            // This is item has sub-menu, activate the first child on ENTER\n            _this.selectBranch(submenu_1[0]); // Attempt to set focus\n\n\n            _this.setFocus(submenu_1[0]);\n          }\n        });\n        branch.interactions.events.on(\"hit\", function (ev) {\n          _this.selectBranch(branch);\n        });\n      }\n    } // Add events\n    // TODO clean this up when it's disposed\n\n    branch.interactions.events.on(\"over\", function (ev) {\n      if (ev.pointer.touch) {\n        // Cancel pending menu closure\n        _this._ignoreNextClose = true;\n      }\n\n      _this.selectBranch(branch);\n\n      if (_this.events.isEnabled(\"over\")) {\n        var event_3 = {\n          \"type\": \"over\",\n          \"event\": ev.event,\n          \"target\": _this,\n          \"branch\": branch\n        };\n\n        _this.events.dispatchImmediately(\"over\", event_3);\n      }\n    }); // TODO clean this up when it's disposed\n\n    branch.interactions.events.on(\"out\", function (ev) {\n      if (_this.isDisposed()) {\n        return;\n      }\n\n      if (!ev.pointer.touch) {\n        _this.delayUnselectBranch(branch);\n      }\n\n      if (_this.events.isEnabled(\"out\")) {\n        var event_4 = {\n          \"type\": \"out\",\n          \"event\": ev.event,\n          \"target\": _this,\n          \"branch\": branch\n        };\n\n        _this.events.dispatchImmediately(\"out\", event_4);\n      }\n    }); // TODO clean this up when it's disposed\n\n    branch.interactions.events.on(\"focus\", function (ev) {\n      _this.selectBranch(branch);\n    }); // TODO clean this up when it's disposed\n\n    branch.interactions.events.on(\"blur\", function (ev) {\n      _this.delayUnselectBranch(branch);\n    }); // Increment level\n\n    var local_level = level + 1; // Has sub-menu?\n\n    if (branch.menu) {\n      var submenu = this.createMenuElement(local_level);\n      branch.submenuElement = submenu;\n\n      for (var len = branch.menu.length, i = 0; i < len; i++) {\n        var ascendants = new List();\n        branch.menu[i].ascendants = ascendants;\n\n        if (branch.ascendants.length) {\n          ascendants.copyFrom(branch.ascendants);\n        }\n\n        ascendants.push(branch);\n        this.drawBranch(submenu, branch.menu[i], local_level);\n      } // Sub-menu is empty (all items are not supported)\n      // Do not draw this menu item at all\n\n\n      if (submenu.innerHTML == \"\") {\n        return;\n      }\n\n      element.appendChild(submenu);\n    } // Should this item be hidden?\n\n\n    if (branch.hidden) {\n      this.hideBranch(branch);\n    } // Add id?\n\n\n    if (branch.id) {\n      element.setAttribute(\"id\", branch.id);\n    } // Background color?\n\n\n    if (branch.color) {\n      element.style.backgroundColor = branch.color.hex;\n    } // Append to container\n\n\n    container.appendChild(element);\n  };\n  /**\r\n   * Creates a menu element to hold its elements in. Usually it's an `<ul>`\r\n   * tag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @return HTML element reference\r\n   */\n\n\n  ExportMenu.prototype.createMenuElement = function (level) {\n    var element = document.createElement(this.menuTag);\n    element.className = this.getMenuItemClass(level); // Accessibility\n\n    if (level === 0) {\n      element.setAttribute(\"role\", \"menubar\");\n    } else {\n      element.setAttribute(\"role\", \"menu\");\n    }\n\n    return element;\n  };\n  /**\r\n   * Generates a class name for the menu element based on its nesting level.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @return Class name(s)\r\n   */\n\n\n  ExportMenu.prototype.getMenuItemClass = function (level) {\n    var className = this.classPrefix + \"-menu \" + this.classPrefix + \"-menu-level-\" + level;\n\n    if (level === 0) {\n      className += \" \" + this.classPrefix + \"-menu-root \" + this.classPrefix + \"-\" + this.align + \" \" + this.classPrefix + \"-\" + this.verticalAlign;\n    }\n\n    return this.adapter.apply(\"menuClass\", {\n      className: className,\n      level: level\n    }).className;\n  };\n  /**\r\n   * Creates menu item. Usually `<li>` tag. Its label and sub-elements will go\r\n   * into this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @param type   Type of the menu item\r\n   * @return HTML element reference\r\n   */\n\n\n  ExportMenu.prototype.createItemElement = function (level, type) {\n    var element = document.createElement(this.itemTag);\n    var className = this.classPrefix + \"-item \" + this.classPrefix + \"-item-level-\" + level + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\n    element.className = this.adapter.apply(\"itemClass\", {\n      className: className,\n      level: level,\n      type: type\n    }).className;\n    element.setAttribute(\"role\", \"menuitem\");\n    element.setAttribute(\"tabindex\", this.tabindex.toString());\n    return element;\n  };\n  /**\r\n   * Creates a \"label\" part of the menu item. It could be text or any HTML\r\n   * content.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @param type   Type of the menu item\r\n   * @return An HTML Element\r\n   */\n\n\n  ExportMenu.prototype.createLabelElement = function (level, type) {\n    var element = document.createElement(this.labelTag);\n    var className = this.classPrefix + \"-label \" + this.classPrefix + \"-label-level-\" + level + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\n\n    if (this.typeClickable(type)) {\n      className += \" \" + this.classPrefix + \"-clickable\";\n    }\n\n    element.className = this.adapter.apply(\"labelClass\", {\n      className: className,\n      level: level,\n      type: type\n    }).className; // Accessible navigation\n    //element.setAttribute(\"tabindex\", this.tabindex.toString());\n    //element.setAttribute(\"role\", \"menuitem\");\n\n    return element;\n  };\n  /**\r\n   * Creates a \"icon\" part of the menu item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @param type   Type of the menu item\r\n   * @return An HTML Element\r\n   */\n\n\n  ExportMenu.prototype.createIconElement = function (level, type) {\n    var element = document.createElement(this.iconTag);\n    var className = this.classPrefix + \"-icon \" + this.classPrefix + \"-icon-level-\" + level + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\n\n    if (this.typeClickable(type)) {\n      className += \" \" + this.classPrefix + \"-clickable\";\n    }\n\n    element.className = this.adapter.apply(\"labelClass\", {\n      className: className,\n      level: level,\n      type: type\n    }).className; // Accessible navigation\n\n    element.setAttribute(\"tabindex\", this.tabindex.toString());\n    element.setAttribute(\"role\", \"menuitem\");\n    return element;\n  };\n  /**\r\n   * Creates a a custom element out of raw HTML.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param level  Current nesting level\r\n   * @param type   Type of the menu item\r\n   * @return An HTML Element\r\n   */\n\n\n  ExportMenu.prototype.createSvgElement = function (level, type, svg) {\n    var parser = new DOMParser();\n    var element = parser.parseFromString(svg, \"image/svg+xml\").documentElement;\n    var className = this.classPrefix + \"-icon \" + this.classPrefix + \"-icon-level-\" + level + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\n\n    if (this.typeClickable(type)) {\n      className += \" \" + this.classPrefix + \"-clickable\";\n    }\n\n    element.setAttribute(\"class\", this.adapter.apply(\"labelClass\", {\n      className: className,\n      level: level,\n      type: type\n    }).className); // Accessible navigation\n\n    element.setAttribute(\"tabindex\", this.tabindex.toString());\n    element.setAttribute(\"role\", \"menuitem\");\n    return element;\n  };\n  /**\r\n   * Destroys the menu and all its elements.\r\n   */\n\n\n  ExportMenu.prototype.dispose = function () {\n    if (!this._disposed) {\n      _super.prototype.dispose.call(this);\n\n      if (this._element && this._element.parentNode) {\n        this._element.parentNode.removeChild(this._element);\n      }\n    }\n  };\n  /**\r\n   * Checks whether menu item type is supposed to be clickable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param type  Menu item type\r\n   * @return Is clickable?\r\n   */\n\n\n  ExportMenu.prototype.typeClickable = function (type) {\n    return $type.hasValue(type);\n  };\n  /**\r\n   * Checks whether menu item has any sub-items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  A menu item\r\n   * @return Has sub-items?\r\n   */\n\n\n  ExportMenu.prototype.hasSubMenu = function (branch) {\n    return branch.menu && branch.menu.length ? true : false;\n  };\n  /**\r\n   * Returns sub-items (if they exist).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  A menu item\r\n   * @return Submenus\r\n   */\n\n\n  ExportMenu.prototype.getSubMenu = function (branch) {\n    if (branch.menu && branch.menu.length) {\n      return branch.menu;\n    }\n  };\n  /**\r\n   * Generates and returns an applicable label to be used for screen readers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item   A menu item instance\r\n   * @param label  Current label\r\n   * @return Reader text\r\n   */\n\n\n  ExportMenu.prototype.getReaderLabel = function (branch, label) {\n    // Strip any HTML from the label\n    label = $utils.stripTags(label); // Add textual note if the branch is clickable\n\n    if (branch.ascendants.length == 0) {\n      label = label == \"...\" ? this.language.translate(\"Export\") : label;\n      label += \" [\" + this.language.translate(\"Press ENTER or use arrow keys to navigate\") + \"]\";\n    } else if (this.hasSubMenu(branch)) {\n      label += \" [\" + this.language.translate(\"Click, tap or press ENTER to open\") + \"]\";\n    } else if (branch.type == \"print\") {\n      label = this.language.translate(\"Click, tap or press ENTER to print.\");\n    } else if (this.typeClickable(branch.type)) {\n      label = this.language.translate(\"Click, tap or press ENTER to export as %1.\", undefined, label);\n    }\n\n    return this.adapter.apply(\"rederLabel\", {\n      label: label,\n      branch: branch\n    }).label;\n  };\n\n  Object.defineProperty(ExportMenu.prototype, \"container\", {\n    /**\r\n     * @return Container\r\n     */\n    get: function () {\n      return this._container;\n    },\n\n    /**\r\n     * Getters and setters\r\n     */\n\n    /**\r\n     * An HTML container to place the Menu in.\r\n     *\r\n     * A container must be an HTML element, because menu itself is HTML, and\r\n     * cannot be placed into SVG.\r\n     *\r\n     * @param container Reference to container element\r\n     * @todo Check if menu is already build. If it is, just move it to a new container\r\n     */\n    set: function (container) {\n      this._container = container;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"items\", {\n    /**\r\n     * @return Menu items\r\n     */\n    get: function () {\n      return this._items;\n    },\n\n    /**\r\n     * A list of menu items. Can be nested.\r\n     *\r\n     * @param items  Menu items\r\n     */\n    set: function (items) {\n      this._items = items;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"tag\", {\n    /**\r\n     * Sets main menu tag to place menu in.\r\n     *\r\n     * This also sets up how menu items are built.\r\n     *\r\n     * If you set this to \"ul\", menu items will be wrapped into `<li>` tags.\r\n     *\r\n     * If set to \"div\", menu items will be wrapped in `<div>` tags.\r\n     *\r\n     * @default \"ul\"\r\n     * @param tag Tag to use for menu\r\n     */\n    set: function (tag) {\n      this._menuTag = tag;\n      this._itemTag = tag == \"ul\" ? \"li\" : \"div\";\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"menuTag\", {\n    /**\r\n     * Returns current menu tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Menu tag (item that contains sub-items)\r\n     */\n    get: function () {\n      return this.adapter.apply(\"menuTag\", {\n        tag: this._menuTag\n      }).tag;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"itemTag\", {\n    /**\r\n     * Returns tag to wrap items into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Item tag\r\n     */\n    get: function () {\n      return this.adapter.apply(\"itemTag\", {\n        tag: this._itemTag\n      }).tag;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"labelTag\", {\n    /**\r\n     * Returns menu label tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Label tag\r\n     */\n    get: function () {\n      return this.adapter.apply(\"labelTag\", {\n        tag: this._labelTag\n      }).tag;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"iconTag\", {\n    /**\r\n     * Returns icon tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Icon tag\r\n     */\n    get: function () {\n      return this.adapter.apply(\"iconTag\", {\n        tag: this._iconTag\n      }).tag;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"align\", {\n    /**\r\n     * @return Horizontal alignment\r\n     */\n    get: function () {\n      return this.adapter.apply(\"align\", {\n        align: this._align\n      }).align;\n    },\n\n    /**\r\n     * A horizontal alignment for the menu placement.\r\n     *\r\n     * @param value Horizontal alignment\r\n     */\n    set: function (value) {\n      this._align = value;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"verticalAlign\", {\n    /**\r\n     * @return Vertical alignment\r\n     */\n    get: function () {\n      return this.adapter.apply(\"verticalAlign\", {\n        verticalAlign: this._verticalAlign\n      }).verticalAlign;\n    },\n\n    /**\r\n     * A vertical alignment for the menu placement.\r\n     *\r\n     * @param value Vertical alignment\r\n     */\n    set: function (value) {\n      this._verticalAlign = value;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"classPrefix\", {\n    /**\r\n     * @return Class name prefix\r\n     */\n    get: function () {\n      return this.adapter.apply(\"classPrefix\", {\n        classPrefix: this._classPrefix\n      }).classPrefix;\n    },\n\n    /**\r\n     * Class name prefix.\r\n     *\r\n     * @default \"amexport\"\r\n     * @param value Class name prefix\r\n     */\n    set: function (value) {\n      this._classPrefix = value;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"defaultStyles\", {\n    /**\r\n     * @return Should ExportMenu load its own CSS?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"defaultStyles\", {\n        defaultStyles: this._defaultStyles\n      }).defaultStyles;\n    },\n\n    /**\r\n     * Indicates whether [[ExportMenu]] should load external CSS to style itself.\r\n     *\r\n     * If set to `false`, the menu will not be styled, and will rely on some\r\n     * external CSS.\r\n     *\r\n     * @default true\r\n     * @param Should ExportMenu load its own CSS?\r\n     */\n    set: function (value) {\n      if (this._defaultStyles != value) {\n        this._defaultStyles = value;\n\n        if (value) {\n          this.loadDefaultCSS();\n        }\n      }\n\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Loads the default CSS.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ExportMenu.prototype.loadDefaultCSS = function () {\n    this._disposers.push(exportCSS($dom.getShadowRoot(this.container), this.classPrefix));\n\n    if (this._element) {\n      this._element.style.display = \"\";\n    }\n  };\n\n  Object.defineProperty(ExportMenu.prototype, \"tabindex\", {\n    /**\r\n     * @return Tab index\r\n     */\n    get: function () {\n      return this.adapter.apply(\"tabindex\", {\n        tabindex: this._tabindex\n      }).tabindex;\n    },\n\n    /**\r\n     * A tab index for the menu.\r\n     *\r\n     * Tab index will influence the order in which elements on the chart and\r\n     * the whole page are selected when pressing TAB key.\r\n     *\r\n     * @param value Tab index\r\n     */\n    set: function (value) {\n      this._tabindex = value;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ExportMenu.prototype, \"language\", {\n    /**\r\n     * @return A [[Language]] instance to be used\r\n     */\n    get: function () {\n      var _this = this;\n\n      var language = this._language.get();\n\n      if (language == null) {\n        language = new Language(); // TODO code duplication with `set language()`\n\n        this._language.set(language, language.events.on(\"localechanged\", function (ev) {\n          _this.invalidate();\n        }));\n      }\n\n      return language;\n    },\n\n    /**\r\n     * A [[Language]] instance.\r\n     *\r\n     * @param value An instance of [[Language]]\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      this._language.set(value, value.events.on(\"localechanged\", function (ev) {\n        _this.invalidate();\n      }));\n\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Controlling the menu\r\n   */\n\n  /**\r\n   * Removes all active classes from menu items. Useful on touch devices and\r\n   * keyboard navigation where open menu can be closed instantly by clicking or\r\n   * tapping outside it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ExportMenu.prototype.close = function () {\n    var _this = this;\n\n    if (this.isDisposed()) {\n      return;\n    }\n\n    if (this._ignoreNextClose) {\n      this._ignoreNextClose = false;\n      return;\n    }\n\n    if (this.closeOnClick) {\n      this._element.style.pointerEvents = \"none\";\n      setTimeout(function () {\n        _this._element.style.pointerEvents = \"auto\";\n      }, 100);\n    }\n\n    if (this._currentSelection) {\n      this.setBlur(this._currentSelection);\n      this._currentSelection = undefined;\n    }\n\n    if (this._element) {\n      var items = this._element.getElementsByClassName(\"active\");\n\n      for (var len = items.length, i = len - 1; i >= 0; i--) {\n        if (items[i]) {\n          $dom.removeClass(items[i], \"active\");\n        }\n      }\n    }\n\n    this.events.dispatchImmediately(\"closed\", {\n      type: \"closed\",\n      target: this\n    });\n  };\n  /**\r\n   * Selects a branch in the menu.\r\n   *\r\n   * Handles closing of currently open branch.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Branch to select\r\n   */\n\n\n  ExportMenu.prototype.selectBranch = function (branch) {\n    var _this = this;\n\n    if (this.isDisposed()) {\n      return;\n    } // Cancel previous closure\n\n\n    if (branch.closeTimeout) {\n      this.removeDispose(branch.closeTimeout);\n      branch.closeTimeout = undefined;\n    } // Add active class\n\n\n    $dom.addClass(branch.element, \"active\"); // Set expanded\n\n    if (branch.submenuElement) {\n      branch.submenuElement.setAttribute(\"aria-expanded\", \"true\");\n    } // Remove current selection\n\n\n    if (this._currentSelection && this._currentSelection !== branch && this._currentSelection.ascendants) {\n      $iter.each($iter.concat($iter.fromArray([this._currentSelection]), this._currentSelection.ascendants.iterator()), function (ascendant) {\n        if (!branch.ascendants.contains(ascendant) && branch !== ascendant) {\n          _this.unselectBranch(ascendant, true);\n        }\n      });\n    } // Select and/or cancel timeout for current ascendants\n\n\n    $iter.each(branch.ascendants.iterator(), function (ascendant) {\n      if (ascendant.closeTimeout) {\n        _this.removeDispose(ascendant.closeTimeout);\n\n        ascendant.closeTimeout = undefined;\n      }\n\n      $dom.addClass(ascendant.element, \"active\");\n    }); // Log current selection\n\n    this._currentSelection = branch; // Invoke event\n\n    if (this.events.isEnabled(\"branchselected\")) {\n      var event_5 = {\n        type: \"branchselected\",\n        target: this,\n        branch: branch\n      };\n      this.events.dispatchImmediately(\"branchselected\", event_5);\n    }\n  };\n  /**\r\n   * Unselects a branch. Also selects a branch one level up if necessary.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Branch to unselect\r\n   * @param simple If `true`, only the branch will be unselected without selecting parent branch\r\n   */\n\n\n  ExportMenu.prototype.unselectBranch = function (branch, simple) {\n    if (this.isDisposed()) {\n      return;\n    } // Remove active class\n\n\n    $dom.removeClass(branch.element, \"active\"); // Set expanded\n\n    if (branch.submenuElement) {\n      branch.submenuElement.removeAttribute(\"aria-expanded\");\n    } // Remove current selection\n\n\n    if (this._currentSelection == branch) {\n      this._currentSelection = undefined;\n    } // Invoke event\n\n\n    if (this.events.isEnabled(\"branchunselected\")) {\n      var event_6 = {\n        type: \"branchunselected\",\n        target: this,\n        branch: branch\n      };\n      this.events.dispatchImmediately(\"branchunselected\", event_6);\n    }\n  };\n  /**\r\n   * Delay unselection of a branch. This can still be cancelled in some other\r\n   * place if the branch or its children regain focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Branch to unselect\r\n   * @param simple If `true`, only the branch will be unselected without selecting parent branch\r\n   */\n\n\n  ExportMenu.prototype.delayUnselectBranch = function (branch, simple) {\n    var _this = this;\n\n    if (this.isDisposed()) {\n      return;\n    } // Schedule branch unselection\n\n\n    if (branch.closeTimeout) {\n      this.removeDispose(branch.closeTimeout);\n      branch.closeTimeout = undefined;\n    }\n\n    branch.closeTimeout = this.setTimeout(function () {\n      _this.unselectBranch(branch, simple);\n    }, this.closeDelay); // Schedule unselection of all ascendants\n    // In case focus went away from the export menu altogether, this will ensure\n    // that all items will be closed.\n    // In case we're jumping to other menu item, those delayed unselections will\n    // be cancelled by `selectBranch`\n\n    if (simple !== true && branch.ascendants) {\n      $iter.each(branch.ascendants.iterator(), function (ascendant) {\n        _this.delayUnselectBranch(ascendant, true);\n      });\n    }\n  };\n  /**\r\n   * Navigates the menu based on which direction kayboard key was pressed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key A key that was pressed\r\n   */\n\n\n  ExportMenu.prototype.moveSelection = function (key) {\n    if (this.isDisposed()) {\n      return;\n    } // Check if there's a current selection\n\n\n    if (!this._currentSelection) {\n      return;\n    }\n\n    var newSelection;\n\n    if (key == \"up\") {\n      // Try moving up in current menu list, or to the last item if already\n      // at the top\n      newSelection = this.getPrevSibling(this._currentSelection);\n    } else if (key == \"down\") {\n      // Try moving down in current menu list, or to the top item if already\n      // at the bottom\n      newSelection = this.getNextSibling(this._currentSelection);\n    } else if (key == \"left\" && this.align == \"right\" || key == \"right\" && this.align == \"left\") {\n      var menu = this.getSubMenu(this._currentSelection); // Go one level-deeper\n\n      if (menu != null) {\n        newSelection = menu[0];\n      }\n    } else if (key == \"right\" && this.align == \"right\" || key == \"left\" && this.align == \"left\") {\n      // Go one level-deeper\n      newSelection = this.getParentItem(this._currentSelection);\n    }\n\n    if (newSelection && newSelection !== this._currentSelection) {\n      this.selectBranch(newSelection);\n      this.setFocus(newSelection);\n      this._currentSelection = newSelection;\n    }\n  };\n  /**\r\n   * Returns all siblings of a menu item, including this same menu item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  Menu item\r\n   * @return List of sibling menu items\r\n   */\n\n\n  ExportMenu.prototype.getSiblings = function (branch) {\n    var parent = this.getParentItem(branch);\n\n    if (parent && parent.menu) {\n      return parent.menu;\n    } else {\n      return [];\n    }\n  };\n  /**\r\n   * Returns menu items parent item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  Menu item\r\n   * @return Parent menu item\r\n   */\n\n\n  ExportMenu.prototype.getParentItem = function (branch) {\n    if (branch.ascendants && branch.ascendants.length) {\n      return branch.ascendants.getIndex(branch.ascendants.length - 1);\n    } else {\n      return undefined;\n    }\n  };\n  /**\r\n   * Returns next sibling in the same menu branch. If there is no next sibling,\r\n   * the first one is returned. If there is just one item, that item is\r\n   * returned. Unsupported menu items are skipped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  Menu item to search siblings for\r\n   * @return Menu item\r\n   */\n\n\n  ExportMenu.prototype.getNextSibling = function (branch) {\n    var siblings = this.getSiblings(branch);\n\n    if (siblings.length > 1) {\n      var next = siblings.indexOf(branch) + 1;\n      next = siblings.length == next ? 0 : next;\n      return siblings[next].unsupported ? this.getNextSibling(siblings[next]) : siblings[next];\n    } else {\n      return branch;\n    }\n  };\n  /**\r\n   * Returns previous sibling in the same menu branch. If there is no next\r\n   * sibling, the first one is returned. If there is just one item, that item is\r\n   * returned. Unsupported menu items are skipped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch  Menu item to search siblings for\r\n   * @return Menu item\r\n   */\n\n\n  ExportMenu.prototype.getPrevSibling = function (branch) {\n    var siblings = this.getSiblings(branch);\n\n    if (siblings.length > 1) {\n      var prev = siblings.indexOf(branch) - 1;\n      prev = prev == -1 ? siblings.length - 1 : prev;\n      return siblings[prev].unsupported ? this.getPrevSibling(siblings[prev]) : siblings[prev];\n    } else {\n      return branch;\n    }\n  };\n  /**\r\n   * Attempts to set focus on particular menu element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Menu item\r\n   */\n\n\n  ExportMenu.prototype.setFocus = function (branch) {\n    if (branch.interactions) {\n      try {\n        branch.interactions.element.focus();\n      } catch (e) {// nothing\n      }\n    }\n  };\n  /**\r\n   * Attempts to remove focus from the menu element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param branch Menu item\r\n   */\n\n\n  ExportMenu.prototype.setBlur = function (branch) {\n    if (branch.interactions) {\n      try {\n        branch.interactions.element.blur();\n      } catch (e) {// nothing\n      }\n    }\n  };\n  /**\r\n   * Hides the whole branch of menu.\r\n   *\r\n   * @param  branch  branch\r\n   */\n\n\n  ExportMenu.prototype.hideBranch = function (branch) {\n    branch.element.style.display = \"none\";\n  };\n  /**\r\n   * Show the branch of menu.\r\n   *\r\n   * @param  branch  branch\r\n   */\n\n\n  ExportMenu.prototype.showBranch = function (branch) {\n    branch.element.style.display = \"\";\n  };\n\n  Object.defineProperty(ExportMenu.prototype, \"element\", {\n    /**\r\n     * The main element o fthe menu - usually `<ul>`.\r\n     *\r\n     * @since 4.10.6\r\n     * @return Menu element\r\n     */\n    get: function () {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ExportMenu;\n}(Validatable);\n\nexport { ExportMenu };","map":{"version":3,"sources":["../../../../../src/.internal/core/export/ExportMenu.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ExportMenu provides functionality for building Export menu\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport exportCSS from \"./ExportCSS\";\r\nimport { IExportOptions } from \"./Export\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { List } from \"../utils/List\";\r\nimport { Align } from \"../defs/Align\";\r\nimport { VerticalAlign } from \"../defs/VerticalAlign\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { InteractionObject } from \"../interaction/InteractionObject\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { IDisposer, MutableValueDisposer } from \"../utils/Disposer\";\r\nimport { Language, ILocaleProperties } from \"../utils/Language\";\r\nimport { Validatable } from \"../utils/Validatable\";\r\nimport { keyboard, KeyboardKeys } from \"../utils/Keyboard\";\r\nimport { Color } from \"../utils/Color\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Export menu item interface.\r\n */\r\nexport interface IExportMenuItem {\r\n\r\n\t/**\r\n\t * Item type, usually an export format.\r\n\t */\r\n\ttype?: keyof IExportOptions;\r\n\r\n\t/**\r\n\t * Label to display in the menu.\r\n\t */\r\n\tlabel?: string;\r\n\r\n\t/**\r\n\t * Alternative title to be displayed on hover.\r\n\t *\r\n\t * @since 4.9.27\r\n\t */\r\n\ttitle?: string;\r\n\r\n\t/**\r\n\t * A `href` of the image to show instead of a label.\r\n\t */\r\n\ticon?: string;\r\n\r\n\t/**\r\n\t * Raw SVG content to add to instead of regular label.\r\n\t */\r\n\tsvg?: string;\r\n\r\n\t/**\r\n\t * Export format. (optional)\r\n\t */\r\n\tformat?: string;\r\n\r\n\t/**\r\n\t * Menu item options.\r\n\t *\r\n\t * @see {@link IExportOptions}\r\n\t */\r\n\toptions?: IExportOptions[keyof IExportOptions];\r\n\r\n\t/**\r\n\t * Priority.\r\n\t *\r\n\t * The items in Export menu will be sorted by their priority in ascending\r\n\t * order.\r\n\t *\r\n\t * @ignore Exclude from docs (this feature is not yet implemented)\r\n\t */\r\n\tpriority?: number;\r\n\r\n\t/**\r\n\t * An array of [[IExportMenuItem]] items, to construct a sub-menu out of.\r\n\t *\r\n\t * An Export menu can have any number of nesting levels.\r\n\t */\r\n\tmenu?: Array<IExportMenuItem>;\r\n\r\n\t/**\r\n\t * If this is set to true, it means that this specific menu item is not\r\n\t * supported by the current client system.\r\n\t *\r\n\t * This is usually populated by [[Export]]'s `supported` Adapter.\r\n\t *\r\n\t * @see {@link IExportAdapters}\r\n\t */\r\n\tunsupported?: boolean\r\n\r\n\t/**\r\n\t * An [[InteractionObject]] representation of the menu item label.\r\n\t */\r\n\tinteractions?: InteractionObject;\r\n\r\n\t/**\r\n\t * Actual HTML element of the menu item.\r\n\t */\r\n\telement?: HTMLElement;\r\n\r\n\t/**\r\n\t * An element that holds the sub-menu.\r\n\t *\r\n\t * @since 4.10.12\r\n\t */\r\n\tsubmenuElement?: HTMLElement;\r\n\r\n\t/**\r\n\t * Holds list of parent menu items to this item.\r\n\t */\r\n\tascendants?: List<IExportMenuItem>;\r\n\r\n\t/**\r\n\t * Holds timeout reference.\r\n\t *\r\n\t * Used to delay auto-closing of the menu when it is no longer hovered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tcloseTimeout?: IDisposer;\r\n\r\n\t/**\r\n\t * Should this item be hidden?\r\n\t */\r\n\thidden?: boolean;\r\n\r\n\t/**\r\n\t * A unique id to attach to the menu item.\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Color to use as a background.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines [[ExportMenu]] events.\r\n */\r\nexport interface IExportMenuEvents {\r\n\r\n\t/**\r\n\t * Invoked when menu item is clicked/tapped.\r\n\t */\r\n\thit: {\r\n\t\tbranch: IExportMenuItem;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when menu item is hovered.\r\n\t */\r\n\tover: {\r\n\t\tbranch: IExportMenuItem;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when menu item is no longer hovered.\r\n\t */\r\n\tout: {\r\n\t\tbranch: IExportMenuItem;\r\n\t\tevent: MouseEvent | TouchEvent;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when ENTER key is pressed when certain menu item is in focus.\r\n\t */\r\n\tenter: {\r\n\t\tbranch: IExportMenuItem;\r\n\t\tevent: KeyboardEvent;\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when menu branch is selected. (either by hover or keyboard)\r\n\t */\r\n\tbranchselected: {\r\n\t\tbranch: IExportMenuItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when menu branch is unselected.\r\n\t */\r\n\tbranchunselected: {\r\n\t\tbranch: IExportMenuItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when menu is closed.\r\n\t */\r\n\tclosed: {};\r\n\r\n}\r\n\r\n/**\r\n * Represents a list of available adapters for Export\r\n */\r\nexport interface IExportMenuAdapters {\r\n\r\n\titems: {\r\n\t\titems: Array<IExportMenuItem>\r\n\t},\r\n\r\n\tmenuElement: {\r\n\t\tmenuElement: HTMLElement\r\n\t},\r\n\r\n\tbranch: {\r\n\t\tbranch: IExportMenuItem,\r\n\t\tlevel: number\r\n\t},\r\n\r\n\trederLabel: {\r\n\t\tlabel: string,\r\n\t\tbranch: IExportMenuItem\r\n\t},\r\n\r\n\tmenuClass: {\r\n\t\tclassName: string,\r\n\t\tlevel: number\r\n\t},\r\n\r\n\titemClass: {\r\n\t\tclassName: string,\r\n\t\tlevel: number,\r\n\t\ttype?: keyof IExportOptions\r\n\t},\r\n\r\n\tlabelClass: {\r\n\t\tclassName: string,\r\n\t\tlevel: number,\r\n\t\ttype?: keyof IExportOptions\r\n\t},\r\n\r\n\tmenuTag: {\r\n\t\ttag: string\r\n\t},\r\n\r\n\titemTag: {\r\n\t\ttag: string\r\n\t},\r\n\r\n\tlabelTag: {\r\n\t\ttag: string\r\n\t},\r\n\r\n\ticonTag: {\r\n\t\ttag: string\r\n\t},\r\n\r\n\talign: {\r\n\t\talign: Align\r\n\t},\r\n\r\n\tverticalAlign: {\r\n\t\tverticalAlign: VerticalAlign\r\n\t},\r\n\r\n\tclassPrefix: {\r\n\t\tclassPrefix: string\r\n\t},\r\n\r\n\tdefaultStyles: {\r\n\t\tdefaultStyles: boolean\r\n\t},\r\n\r\n\ttabindex: {\r\n\t\ttabindex: number\r\n\t},\r\n\r\n\tcloseOnClick: boolean\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a menu for Export operations.\r\n *\r\n * To add an export menu to a chart, set this to a new instance of\r\n * [[ExportMenu]].\r\n *\r\n * ```TypeScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"exporting\": {\r\n *     \"menu\": {}\r\n *   }\r\n * }\r\n * ```\r\n * @important\r\n */\r\nexport class ExportMenu extends Validatable {\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IExportMenuEvents;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IExportMenuAdapters;\r\n\r\n\t/**\r\n\t * An [[Adapter]].\r\n\t */\r\n\tpublic adapter: Adapter<ExportMenu, IExportMenuAdapters> = new Adapter<ExportMenu, IExportMenuAdapters>(this);\r\n\r\n\t/**\r\n\t * How many milliseconds to hold menu/sub-menu open after it loses focus or\r\n\t * hover, before auto-closing it.\r\n\t *\r\n\t * @default 1000\r\n\t */\r\n\tpublic closeDelay: number = 1000;\r\n\r\n\t/**\r\n\t * Close the menu automatically when some export operation is triggered.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t */\r\n\tpublic closeOnClick: boolean = true;\r\n\r\n\t/**\r\n\t * An instance of [[Language]].\r\n\t */\r\n\tprotected _language = new MutableValueDisposer<Language>();\r\n\r\n\t/**\r\n\t * Reference to DOM element that holds Export menu.\r\n\t */\r\n\tprotected _container: $type.Optional<HTMLElement>;\r\n\r\n\t/**\r\n\t * Menu element.\r\n\t */\r\n\tprotected _element: $type.Optional<HTMLElement>;\r\n\r\n\t/**\r\n\t * Currently selected menu item.\r\n\t */\r\n\tprotected _currentSelection: $type.Optional<IExportMenuItem>;\r\n\r\n\t/**\r\n\t * What HTML tags to use to build menu.\r\n\t */\r\n\tprotected _menuTag: \"ul\" | \"div\" = \"ul\";\r\n\r\n\t/**\r\n\t * Which tag to use to enclose individual menu items.\r\n\t */\r\n\tprotected _itemTag: \"li\" | \"div\" = \"li\";\r\n\r\n\t/**\r\n\t * Tag to wrap menu item labels in.\r\n\t */\r\n\tprotected _labelTag: \"a\" = \"a\";\r\n\r\n\t/**\r\n\t * Tag to use for icons\r\n\t */\r\n\tprotected _iconTag: \"img\" = \"img\";\r\n\r\n\t/**\r\n\t * Prefix for class names applied to menu elements.\r\n\t */\r\n\tprotected _classPrefix: string = \"amexport\";\r\n\r\n\t/**\r\n\t * If set to `true` [[ExportMenu]] will load it's own external CSS when\r\n\t * instantiated.\r\n\t */\r\n\tprotected _defaultStyles: boolean = true;\r\n\r\n\t/**\r\n\t * Horizontal positioning.\r\n\t */\r\n\tprotected _align: Align = \"right\";\r\n\r\n\t/**\r\n\t * Vertical positioning.\r\n\t */\r\n\tprotected _verticalAlign: VerticalAlign = \"top\";\r\n\r\n\t/**\r\n\t * A tabindex to apply to Export Menu.\r\n\t */\r\n\tprotected _tabindex: number = 0;\r\n\r\n\t/**\r\n\t * Whether next menu close event should be ignored.\r\n\t */\r\n\tprotected _ignoreNextClose: boolean = false;\r\n\r\n\t/**\r\n\t * Default menu items.\r\n\t */\r\n\tprotected _items: Array<IExportMenuItem> = [\r\n\t\t{\r\n\t\t\t\"label\": \"...\",\r\n\t\t\t\"menu\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"label\": \"Image\",\r\n\t\t\t\t\t\"menu\": [\r\n\t\t\t\t\t\t{ \"type\": \"png\", \"label\": \"PNG\" },\r\n\t\t\t\t\t\t{ \"type\": \"jpg\", \"label\": \"JPG\" },\r\n\t\t\t\t\t\t{ \"type\": \"svg\", \"label\": \"SVG\" },\r\n\t\t\t\t\t\t{ \"type\": \"pdf\", \"label\": \"PDF\" }\r\n\t\t\t\t\t]\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"label\": \"Data\",\r\n\t\t\t\t\t\"menu\": [\r\n\t\t\t\t\t\t{ \"type\": \"json\", \"label\": \"JSON\" },\r\n\t\t\t\t\t\t{ \"type\": \"csv\", \"label\": \"CSV\" },\r\n\t\t\t\t\t\t{ \"type\": \"xlsx\", \"label\": \"XLSX\" },\r\n\t\t\t\t\t\t{ \"type\": \"html\", \"label\": \"HTML\" },\r\n\t\t\t\t\t\t{ \"type\": \"pdfdata\", \"label\": \"PDF\" }\r\n\t\t\t\t\t]\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"label\": \"Print\", \"type\": \"print\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ExportMenu\";\r\n\t\tthis._disposers.push(this._language);\r\n\t\tthis.invalidate();\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the Export menu.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.draw();\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the menu based on current items.\r\n\t *\r\n\t * Normally, there's no need to call this explicitly. The chart, if it has\r\n\t * export menu enabled, will automatically draw the menu.\r\n\t */\r\n\tpublic draw(): void {\r\n\r\n\t\t// Create top-level menu item, or clear it\r\n\t\tif (!this._element) {\r\n\t\t\tthis._element = this.createMenuElement(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._element.innerHTML = \"\";\r\n\t\t\tthis._element.className = this.getMenuItemClass(0);\r\n\t\t}\r\n\r\n\t\t// See if we're loading external CSS\r\n\t\t// Hide it until CSS is loaded\r\n\t\tif (this.defaultStyles) {\r\n\t\t\tthis._element.style.display = \"none\";\r\n\t\t}\r\n\r\n\t\t// Append to container\r\n\t\t$type.getValue(this._container).appendChild(this._element);\r\n\r\n\t\t// Apply adapter to menu items before processing\r\n\t\tlet items = this.adapter.apply(\"items\", {\r\n\t\t\titems: this._items\r\n\t\t}).items;\r\n\r\n\t\tfor (let len = items.length, i = 0; i < len; i++) {\r\n\t\t\tthis.drawBranch(this._element, items[i], 0);\r\n\t\t}\r\n\r\n\t\t// Apply adapter to finalized menu element\r\n\t\tthis._element = this.adapter.apply(\"menuElement\", {\r\n\t\t\tmenuElement: this._element\r\n\t\t}).menuElement;\r\n\r\n\t\t// Set up global \"down\" event\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"down\", (ev) => {\r\n\t\t\tif (!ev.pointer.touch) {\r\n\t\t\t\tthis._ignoreNextClose = false;\r\n\t\t\t}\r\n\t\t\tthis.close();\r\n\t\t}));\r\n\r\n\t\t// Set up global event on ESC press to close the menu\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keydown\", (ev) => {\r\n\t\t\tlet key = keyboard.getEventKey(ev.event);\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase \"esc\":\r\n\t\t\t\t\tthis.close();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"up\":\r\n\t\t\t\tcase \"down\":\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tif (this._currentSelection) {\r\n\t\t\t\t\t\tev.event.preventDefault();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.moveSelection(key);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tif (this.defaultStyles) {\r\n\t\t\tthis.loadDefaultCSS();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new branch in export menu. This function is recursive for\r\n\t * building multi-level menus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param container Container to put branch elements in\r\n\t * @param branch    Menu item\r\n\t * @param level     Current nesting level\r\n\t */\r\n\tprotected drawBranch(container: HTMLElement, branch: IExportMenuItem, level: number): void {\r\n\r\n\t\t// Apply adapter\r\n\t\tbranch = this.adapter.apply(\"branch\", {\r\n\t\t\tbranch: branch,\r\n\t\t\tlevel: level\r\n\t\t}).branch;\r\n\r\n\t\t// Unsupported?\r\n\t\t// ExportMenu does not check or know for specific browser/system\r\n\t\t// capabilities. It must happen in some other code and applied via Adapter.\r\n\t\t// Export itself will check compatibility, but there might be other plugins\r\n\t\t// that influence it or even add any specific export functionality.\r\n\t\tif (branch.unsupported === true) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Init ascendants\r\n\t\tif (!branch.ascendants) {\r\n\t\t\tbranch.ascendants = new List<IExportMenuItem>();\r\n\t\t}\r\n\r\n\t\t// Get type\r\n\t\tlet type: keyof IExportOptions | undefined | null = branch.type;\r\n\r\n\t\t// Create an item\r\n\t\tlet element = this.createItemElement(level, type);\r\n\r\n\t\t// Create label\r\n\t\tlet label;\r\n\r\n\t\t// Create icon\r\n\t\tif (branch.icon) {\r\n\t\t\tlabel = this.createIconElement(level, type);\r\n\t\t\t(<HTMLImageElement>label).src = branch.icon;\r\n\t\t\tif (branch.label || branch.title) {\r\n\t\t\t\t(<HTMLImageElement>label).title = branch.title || branch.label;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (branch.svg) {\r\n\t\t\tlabel = this.createSvgElement(level, type, branch.svg);\r\n\t\t\tif (branch.label || branch.title) {\r\n\t\t\t\t(<HTMLElement>label).title = branch.title || branch.label;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabel = this.createLabelElement(level, type);\r\n\t\t\tlabel.innerHTML = (branch.label ? this.language.translate(<keyof ILocaleProperties>branch.label) : \"\");\r\n\t\t\tif (branch.title) {\r\n\t\t\t\t(<HTMLElement>label).title = branch.title;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Apply reader text to label\r\n\t\tlet readerLabel = this.getReaderLabel(branch, label.innerHTML);\r\n\t\tlabel.setAttribute(\"aria-label\", readerLabel);\r\n\r\n\t\t// Add Label\r\n\t\telement.appendChild(label);\r\n\r\n\t\t// Create interaction object\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions = getInteraction().getInteraction(element);\r\n\t\tbranch.element = element;\r\n\r\n\t\t// Create interaction manager we can set event listeners to\r\n\t\tif (this.typeClickable(type)) {\r\n\t\t\t//branch.interactions.clickable = true;\r\n\t\t\t// TODO clean this up when it's disposed\r\n\t\t\tbranch.interactions.events.on(\"hit\", (ev) => {\r\n\t\t\t\tif (this.events.isEnabled(\"hit\") && !this.isDisposed()) {\r\n\t\t\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"hit\"] = {\r\n\t\t\t\t\t\t\"type\": \"hit\",\r\n\t\t\t\t\t\t\"event\": ev.event,\r\n\t\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\t\"branch\": branch\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"hit\", event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// TODO clean this up when it's disposed\r\n\t\t\tbranch.interactions.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\tif (this.events.isEnabled(\"enter\")) {\r\n\t\t\t\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"enter\"] = {\r\n\t\t\t\t\t\t\t\"type\": \"enter\",\r\n\t\t\t\t\t\t\t\"event\": ev.event,\r\n\t\t\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\t\t\"branch\": branch\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.events.dispatchImmediately(\"enter\", event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tconst submenu = this.getSubMenu(branch);\r\n\r\n\t\t\t// Add ENTER event to open sub-menus\r\n\t\t\tif (submenu != null) {\r\n\t\t\t\t// TODO clean this up when it's disposed\r\n\t\t\t\tbranch.interactions.events.on(\"keyup\", (ev) => {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\t// This is item has sub-menu, activate the first child on ENTER\r\n\t\t\t\t\t\tthis.selectBranch(submenu[0]);\r\n\r\n\t\t\t\t\t\t// Attempt to set focus\r\n\t\t\t\t\t\tthis.setFocus(submenu[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbranch.interactions.events.on(\"hit\", (ev) => {\r\n\t\t\t\t\tthis.selectBranch(branch);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add events\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions.events.on(\"over\", (ev) => {\r\n\r\n\t\t\tif (ev.pointer.touch) {\r\n\t\t\t\t// Cancel pending menu closure\r\n\t\t\t\tthis._ignoreNextClose = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.selectBranch(branch);\r\n\r\n\t\t\tif (this.events.isEnabled(\"over\")) {\r\n\t\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"over\"] = {\r\n\t\t\t\t\t\"type\": \"over\",\r\n\t\t\t\t\t\"event\": ev.event,\r\n\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\"branch\": branch\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"over\", event);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions.events.on(\"out\", (ev) => {\r\n\t\t\tif (this.isDisposed()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!ev.pointer.touch) {\r\n\t\t\t\tthis.delayUnselectBranch(branch);\r\n\t\t\t}\r\n\t\t\tif (this.events.isEnabled(\"out\")) {\r\n\t\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"out\"] = {\r\n\t\t\t\t\t\"type\": \"out\",\r\n\t\t\t\t\t\"event\": ev.event,\r\n\t\t\t\t\t\"target\": this,\r\n\t\t\t\t\t\"branch\": branch\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"out\", event);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions.events.on(\"focus\", (ev) => {\r\n\t\t\tthis.selectBranch(branch);\r\n\t\t});\r\n\r\n\t\t// TODO clean this up when it's disposed\r\n\t\tbranch.interactions.events.on(\"blur\", (ev) => {\r\n\t\t\tthis.delayUnselectBranch(branch);\r\n\t\t});\r\n\r\n\t\t// Increment level\r\n\t\tlet local_level = level + 1;\r\n\r\n\t\t// Has sub-menu?\r\n\t\tif (branch.menu) {\r\n\t\t\tlet submenu = this.createMenuElement(local_level);\r\n\t\t\tbranch.submenuElement = submenu;\r\n\t\t\tfor (let len = branch.menu.length, i = 0; i < len; i++) {\r\n\t\t\t\tlet ascendants = new List<IExportMenuItem>();\r\n\t\t\t\tbranch.menu[i].ascendants = ascendants;\r\n\t\t\t\tif (branch.ascendants.length) {\r\n\t\t\t\t\tascendants.copyFrom(branch.ascendants);\r\n\t\t\t\t}\r\n\t\t\t\tascendants.push(branch);\r\n\t\t\t\tthis.drawBranch(submenu, branch.menu[i], local_level);\r\n\t\t\t}\r\n\r\n\t\t\t// Sub-menu is empty (all items are not supported)\r\n\t\t\t// Do not draw this menu item at all\r\n\t\t\tif (submenu.innerHTML == \"\") {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telement.appendChild(submenu);\r\n\t\t}\r\n\r\n\t\t// Should this item be hidden?\r\n\t\tif (branch.hidden) {\r\n\t\t\tthis.hideBranch(branch);\r\n\t\t}\r\n\r\n\t\t// Add id?\r\n\t\tif (branch.id) {\r\n\t\t\telement.setAttribute(\"id\", branch.id);\r\n\t\t}\r\n\r\n\t\t// Background color?\r\n\t\tif (branch.color) {\r\n\t\t\telement.style.backgroundColor = branch.color.hex;\r\n\t\t}\r\n\r\n\t\t// Append to container\r\n\t\tcontainer.appendChild(element);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a menu element to hold its elements in. Usually it's an `<ul>`\r\n\t * tag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @return HTML element reference\r\n\t */\r\n\tpublic createMenuElement(level: number): HTMLElement {\r\n\t\tlet element: HTMLElement = document.createElement(this.menuTag);\r\n\t\telement.className = this.getMenuItemClass(level);\r\n\r\n\t\t// Accessibility\r\n\t\tif (level === 0) {\r\n\t\t\telement.setAttribute(\"role\", \"menubar\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\telement.setAttribute(\"role\", \"menu\");\r\n\t\t}\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a class name for the menu element based on its nesting level.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @return Class name(s)\r\n\t */\r\n\tpublic getMenuItemClass(level: number): string {\r\n\t\tlet className = this.classPrefix + \"-menu \" + this.classPrefix + \"-menu-level-\" + level;\r\n\t\tif (level === 0) {\r\n\t\t\tclassName += \" \" + this.classPrefix + \"-menu-root \" +\r\n\t\t\t\tthis.classPrefix + \"-\" + this.align + \" \" +\r\n\t\t\t\tthis.classPrefix + \"-\" + this.verticalAlign;\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"menuClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level\r\n\t\t}).className;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates menu item. Usually `<li>` tag. Its label and sub-elements will go\r\n\t * into this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @param type   Type of the menu item\r\n\t * @return HTML element reference\r\n\t */\r\n\tpublic createItemElement(level: number, type?: keyof IExportOptions): HTMLElement {\r\n\t\tlet element: HTMLElement = document.createElement(this.itemTag);\r\n\t\tlet className = this.classPrefix + \"-item \" + this.classPrefix\r\n\t\t\t+ \"-item-level-\" + level\r\n\t\t\t+ \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n\t\telement.className = this.adapter.apply(\"itemClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level,\r\n\t\t\ttype: type\r\n\t\t}).className;\r\n\t\telement.setAttribute(\"role\", \"menuitem\");\r\n\t\telement.setAttribute(\"tabindex\", this.tabindex.toString());\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a \"label\" part of the menu item. It could be text or any HTML\r\n\t * content.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @param type   Type of the menu item\r\n\t * @return An HTML Element\r\n\t */\r\n\tpublic createLabelElement(level: number, type?: keyof IExportOptions): HTMLElement {\r\n\t\tlet element: HTMLElement = document.createElement(this.labelTag);\r\n\t\tlet className = this.classPrefix + \"-label \" + this.classPrefix\r\n\t\t\t+ \"-label-level-\" + level\r\n\t\t\t+ \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n\t\tif (this.typeClickable(type)) {\r\n\t\t\tclassName += \" \" + this.classPrefix + \"-clickable\";\r\n\t\t}\r\n\t\telement.className = this.adapter.apply(\"labelClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level,\r\n\t\t\ttype: type\r\n\t\t}).className;\r\n\r\n\t\t// Accessible navigation\r\n\t\t//element.setAttribute(\"tabindex\", this.tabindex.toString());\r\n\t\t//element.setAttribute(\"role\", \"menuitem\");\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a \"icon\" part of the menu item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @param type   Type of the menu item\r\n\t * @return An HTML Element\r\n\t */\r\n\tpublic createIconElement(level: number, type?: keyof IExportOptions): HTMLElement {\r\n\t\tlet element: HTMLElement = document.createElement(this.iconTag);\r\n\t\tlet className = this.classPrefix + \"-icon \" + this.classPrefix\r\n\t\t\t+ \"-icon-level-\" + level\r\n\t\t\t+ \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n\t\tif (this.typeClickable(type)) {\r\n\t\t\tclassName += \" \" + this.classPrefix + \"-clickable\";\r\n\t\t}\r\n\t\telement.className = this.adapter.apply(\"labelClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level,\r\n\t\t\ttype: type\r\n\t\t}).className;\r\n\r\n\t\t// Accessible navigation\r\n\t\telement.setAttribute(\"tabindex\", this.tabindex.toString());\r\n\t\telement.setAttribute(\"role\", \"menuitem\");\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a a custom element out of raw HTML.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param level  Current nesting level\r\n\t * @param type   Type of the menu item\r\n\t * @return An HTML Element\r\n\t */\r\n\tpublic createSvgElement(level: number, type?: keyof IExportOptions, svg?: string): HTMLElement {\r\n\t\tlet parser = new DOMParser();\r\n\t\tlet element = parser.parseFromString(svg, \"image/svg+xml\").documentElement;\r\n\t\tlet className = this.classPrefix + \"-icon \" + this.classPrefix\r\n\t\t\t+ \"-icon-level-\" + level\r\n\t\t\t+ \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n\t\tif (this.typeClickable(type)) {\r\n\t\t\tclassName += \" \" + this.classPrefix + \"-clickable\";\r\n\t\t}\r\n\t\telement.setAttribute(\"class\", this.adapter.apply(\"labelClass\", {\r\n\t\t\tclassName: className,\r\n\t\t\tlevel: level,\r\n\t\t\ttype: type\r\n\t\t}).className);\r\n\r\n\t\t// Accessible navigation\r\n\t\telement.setAttribute(\"tabindex\", this.tabindex.toString());\r\n\t\telement.setAttribute(\"role\", \"menuitem\");\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys the menu and all its elements.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tsuper.dispose();\r\n\r\n\t\t\tif (this._element && this._element.parentNode) {\r\n\t\t\t\tthis._element.parentNode.removeChild(this._element);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether menu item type is supposed to be clickable.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param type  Menu item type\r\n\t * @return Is clickable?\r\n\t */\r\n\tpublic typeClickable(type: keyof IExportOptions | undefined | null): type is keyof IExportOptions {\r\n\t\treturn $type.hasValue(type);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether menu item has any sub-items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  A menu item\r\n\t * @return Has sub-items?\r\n\t */\r\n\tpublic hasSubMenu(branch: IExportMenuItem): boolean {\r\n\t\treturn (branch.menu && branch.menu.length) ? true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns sub-items (if they exist).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  A menu item\r\n\t * @return Submenus\r\n\t */\r\n\tpublic getSubMenu(branch: IExportMenuItem): $type.Optional<Array<IExportMenuItem>> {\r\n\t\tif (branch.menu && branch.menu.length) {\r\n\t\t\treturn branch.menu;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates and returns an applicable label to be used for screen readers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item   A menu item instance\r\n\t * @param label  Current label\r\n\t * @return Reader text\r\n\t */\r\n\tpublic getReaderLabel(branch: IExportMenuItem, label: string): string {\r\n\r\n\t\t// Strip any HTML from the label\r\n\t\tlabel = $utils.stripTags(label);\r\n\r\n\t\t// Add textual note if the branch is clickable\r\n\t\tif (branch.ascendants.length == 0) {\r\n\t\t\tlabel = label == \"...\" ? this.language.translate(\"Export\") : label;\r\n\t\t\tlabel += \" [\" + this.language.translate(\"Press ENTER or use arrow keys to navigate\") + \"]\";\r\n\t\t}\r\n\t\telse if (this.hasSubMenu(branch)) {\r\n\t\t\tlabel += \" [\" + this.language.translate(\"Click, tap or press ENTER to open\") + \"]\";\r\n\t\t}\r\n\t\telse if (branch.type == \"print\") {\r\n\t\t\tlabel = this.language.translate(\"Click, tap or press ENTER to print.\");\r\n\t\t}\r\n\t\telse if (this.typeClickable(branch.type)) {\r\n\t\t\tlabel = this.language.translate(\"Click, tap or press ENTER to export as %1.\", undefined, label);\r\n\t\t}\r\n\r\n\t\treturn this.adapter.apply(\"rederLabel\", {\r\n\t\t\tlabel: label,\r\n\t\t\tbranch: branch\r\n\t\t}).label;\r\n\t}\r\n\r\n\t/**\r\n\t * Getters and setters\r\n\t */\r\n\r\n\t/**\r\n\t * An HTML container to place the Menu in.\r\n\t *\r\n\t * A container must be an HTML element, because menu itself is HTML, and\r\n\t * cannot be placed into SVG.\r\n\t *\r\n\t * @param container Reference to container element\r\n\t * @todo Check if menu is already build. If it is, just move it to a new container\r\n\t */\r\n\tpublic set container(container: $type.Optional<HTMLElement>) {\r\n\t\tthis._container = container;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Container\r\n\t */\r\n\tpublic get container(): $type.Optional<HTMLElement> {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of menu items. Can be nested.\r\n\t *\r\n\t * @param items  Menu items\r\n\t */\r\n\tpublic set items(items: Array<IExportMenuItem>) {\r\n\t\tthis._items = items;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Menu items\r\n\t */\r\n\tpublic get items(): Array<IExportMenuItem> {\r\n\t\treturn this._items;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets main menu tag to place menu in.\r\n\t *\r\n\t * This also sets up how menu items are built.\r\n\t *\r\n\t * If you set this to \"ul\", menu items will be wrapped into `<li>` tags.\r\n\t *\r\n\t * If set to \"div\", menu items will be wrapped in `<div>` tags.\r\n\t *\r\n\t * @default \"ul\"\r\n\t * @param tag Tag to use for menu\r\n\t */\r\n\tpublic set tag(tag: \"ul\" | \"div\") {\r\n\t\tthis._menuTag = tag;\r\n\t\tthis._itemTag = tag == \"ul\" ? \"li\" : \"div\";\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current menu tag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Menu tag (item that contains sub-items)\r\n\t */\r\n\tpublic get menuTag(): string {\r\n\t\treturn this.adapter.apply(\"menuTag\", {\r\n\t\t\ttag: this._menuTag\r\n\t\t}).tag;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns tag to wrap items into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Item tag\r\n\t */\r\n\tpublic get itemTag(): string {\r\n\t\treturn this.adapter.apply(\"itemTag\", {\r\n\t\t\ttag: this._itemTag\r\n\t\t}).tag;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns menu label tag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Label tag\r\n\t */\r\n\tpublic get labelTag(): string {\r\n\t\treturn this.adapter.apply(\"labelTag\", {\r\n\t\t\ttag: this._labelTag\r\n\t\t}).tag;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns icon tag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Icon tag\r\n\t */\r\n\tpublic get iconTag(): string {\r\n\t\treturn this.adapter.apply(\"iconTag\", {\r\n\t\t\ttag: this._iconTag\r\n\t\t}).tag;\r\n\t}\r\n\r\n\t/**\r\n\t * A horizontal alignment for the menu placement.\r\n\t *\r\n\t * @param value Horizontal alignment\r\n\t */\r\n\tpublic set align(value: Align) {\r\n\t\tthis._align = value;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal alignment\r\n\t */\r\n\tpublic get align(): Align {\r\n\t\treturn this.adapter.apply(\"align\", {\r\n\t\t\talign: this._align\r\n\t\t}).align;\r\n\t}\r\n\r\n\t/**\r\n\t * A vertical alignment for the menu placement.\r\n\t *\r\n\t * @param value Vertical alignment\r\n\t */\r\n\tpublic set verticalAlign(value: VerticalAlign) {\r\n\t\tthis._verticalAlign = value;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical alignment\r\n\t */\r\n\tpublic get verticalAlign(): VerticalAlign {\r\n\t\treturn this.adapter.apply(\"verticalAlign\", {\r\n\t\t\tverticalAlign: this._verticalAlign\r\n\t\t}).verticalAlign;\r\n\t}\r\n\r\n\t/**\r\n\t * Class name prefix.\r\n\t *\r\n\t * @default \"amexport\"\r\n\t * @param value Class name prefix\r\n\t */\r\n\tpublic set classPrefix(value: string) {\r\n\t\tthis._classPrefix = value;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Class name prefix\r\n\t */\r\n\tpublic get classPrefix(): string {\r\n\t\treturn this.adapter.apply(\"classPrefix\", {\r\n\t\t\tclassPrefix: this._classPrefix\r\n\t\t}).classPrefix;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether [[ExportMenu]] should load external CSS to style itself.\r\n\t *\r\n\t * If set to `false`, the menu will not be styled, and will rely on some\r\n\t * external CSS.\r\n\t *\r\n\t * @default true\r\n\t * @param Should ExportMenu load its own CSS?\r\n\t */\r\n\tpublic set defaultStyles(value: boolean) {\r\n\t\tif (this._defaultStyles != value) {\r\n\t\t\tthis._defaultStyles = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.loadDefaultCSS();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should ExportMenu load its own CSS?\r\n\t */\r\n\tpublic get defaultStyles(): boolean {\r\n\t\treturn this.adapter.apply(\"defaultStyles\", {\r\n\t\t\tdefaultStyles: this._defaultStyles\r\n\t\t}).defaultStyles;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the default CSS.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic loadDefaultCSS(): void {\r\n\t\tthis._disposers.push(exportCSS($dom.getShadowRoot(this.container), this.classPrefix));\r\n\r\n\t\tif (this._element) {\r\n\t\t\tthis._element.style.display = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A tab index for the menu.\r\n\t *\r\n\t * Tab index will influence the order in which elements on the chart and\r\n\t * the whole page are selected when pressing TAB key.\r\n\t *\r\n\t * @param value Tab index\r\n\t */\r\n\tpublic set tabindex(value: number) {\r\n\t\tthis._tabindex = value;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tab index\r\n\t */\r\n\tpublic get tabindex(): number {\r\n\t\treturn this.adapter.apply(\"tabindex\", {\r\n\t\t\ttabindex: this._tabindex\r\n\t\t}).tabindex;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Language]] instance.\r\n\t *\r\n\t * @param value An instance of [[Language]]\r\n\t */\r\n\tpublic set language(value: Language) {\r\n\t\tthis._language.set(value, value.events.on(\"localechanged\", (ev) => {\r\n\t\t\tthis.invalidate();\r\n\t\t}));\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return A [[Language]] instance to be used\r\n\t */\r\n\tpublic get language(): Language {\r\n\t\tlet language = this._language.get();\r\n\r\n\t\tif (language == null) {\r\n\t\t\tlanguage = new Language();\r\n\r\n\t\t\t// TODO code duplication with `set language()`\r\n\t\t\tthis._language.set(language, language.events.on(\"localechanged\", (ev) => {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn language;\r\n\t}\r\n\r\n\t/**\r\n\t * Controlling the menu\r\n\t */\r\n\r\n\t/**\r\n\t * Removes all active classes from menu items. Useful on touch devices and\r\n\t * keyboard navigation where open menu can be closed instantly by clicking or\r\n\t * tapping outside it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic close(): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._ignoreNextClose) {\r\n\t\t\tthis._ignoreNextClose = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.closeOnClick) {\r\n\t\t\tthis._element.style.pointerEvents = \"none\";\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis._element.style.pointerEvents = \"auto\";\r\n\t\t\t}, 100);\r\n\t\t}\r\n\r\n\t\tif (this._currentSelection) {\r\n\t\t\tthis.setBlur(this._currentSelection);\r\n\t\t\tthis._currentSelection = undefined;\r\n\t\t}\r\n\r\n\t\tif (this._element) {\r\n\t\t\tlet items = this._element.getElementsByClassName(\"active\");\r\n\t\t\tfor (let len = items.length, i = len - 1; i >= 0; i--) {\r\n\t\t\t\tif (items[i]) {\r\n\t\t\t\t\t$dom.removeClass(<HTMLElement>items[i], \"active\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.events.dispatchImmediately(\"closed\", {\r\n\t\t\ttype: \"closed\",\r\n\t\t\ttarget: this\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Selects a branch in the menu.\r\n\t *\r\n\t * Handles closing of currently open branch.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Branch to select\r\n\t */\r\n\tpublic selectBranch(branch: IExportMenuItem): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Cancel previous closure\r\n\t\tif (branch.closeTimeout) {\r\n\t\t\tthis.removeDispose(branch.closeTimeout);\r\n\t\t\tbranch.closeTimeout = undefined;\r\n\t\t}\r\n\r\n\t\t// Add active class\r\n\t\t$dom.addClass(branch.element, \"active\");\r\n\r\n\t\t// Set expanded\r\n\t\tif (branch.submenuElement) {\r\n\t\t\tbranch.submenuElement.setAttribute(\"aria-expanded\", \"true\");\r\n\t\t}\r\n\r\n\t\t// Remove current selection\r\n\t\tif (this._currentSelection && this._currentSelection !== branch && this._currentSelection.ascendants) {\r\n\t\t\t$iter.each($iter.concat($iter.fromArray([this._currentSelection]), this._currentSelection.ascendants.iterator()), (ascendant) => {\r\n\t\t\t\tif (!branch.ascendants.contains(ascendant) && branch !== ascendant) {\r\n\t\t\t\t\tthis.unselectBranch(ascendant, true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Select and/or cancel timeout for current ascendants\r\n\t\t$iter.each(branch.ascendants.iterator(), (ascendant) => {\r\n\t\t\tif (ascendant.closeTimeout) {\r\n\t\t\t\tthis.removeDispose(ascendant.closeTimeout);\r\n\t\t\t\tascendant.closeTimeout = undefined;\r\n\t\t\t}\r\n\t\t\t$dom.addClass(ascendant.element, \"active\");\r\n\t\t});\r\n\r\n\t\t// Log current selection\r\n\t\tthis._currentSelection = branch;\r\n\r\n\t\t// Invoke event\r\n\t\tif (this.events.isEnabled(\"branchselected\")) {\r\n\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"branchselected\"] = {\r\n\t\t\t\ttype: \"branchselected\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tbranch: branch\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"branchselected\", event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Unselects a branch. Also selects a branch one level up if necessary.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Branch to unselect\r\n\t * @param simple If `true`, only the branch will be unselected without selecting parent branch\r\n\t */\r\n\tpublic unselectBranch(branch: IExportMenuItem, simple?: boolean): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remove active class\r\n\t\t$dom.removeClass(branch.element, \"active\");\r\n\r\n\t\t// Set expanded\r\n\t\tif (branch.submenuElement) {\r\n\t\t\tbranch.submenuElement.removeAttribute(\"aria-expanded\");\r\n\t\t}\r\n\r\n\t\t// Remove current selection\r\n\t\tif (this._currentSelection == branch) {\r\n\t\t\tthis._currentSelection = undefined;\r\n\t\t}\r\n\r\n\t\t// Invoke event\r\n\t\tif (this.events.isEnabled(\"branchunselected\")) {\r\n\t\t\tconst event: AMEvent<this, IExportMenuEvents>[\"branchunselected\"] = {\r\n\t\t\t\ttype: \"branchunselected\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tbranch: branch\r\n\t\t\t};\r\n\t\t\tthis.events.dispatchImmediately(\"branchunselected\", event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Delay unselection of a branch. This can still be cancelled in some other\r\n\t * place if the branch or its children regain focus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Branch to unselect\r\n\t * @param simple If `true`, only the branch will be unselected without selecting parent branch\r\n\t */\r\n\tpublic delayUnselectBranch(branch: IExportMenuItem, simple?: boolean): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Schedule branch unselection\r\n\t\tif (branch.closeTimeout) {\r\n\t\t\tthis.removeDispose(branch.closeTimeout);\r\n\t\t\tbranch.closeTimeout = undefined;\r\n\t\t}\r\n\t\tbranch.closeTimeout = this.setTimeout(() => {\r\n\t\t\tthis.unselectBranch(branch, simple);\r\n\t\t}, this.closeDelay);\r\n\r\n\t\t// Schedule unselection of all ascendants\r\n\t\t// In case focus went away from the export menu altogether, this will ensure\r\n\t\t// that all items will be closed.\r\n\t\t// In case we're jumping to other menu item, those delayed unselections will\r\n\t\t// be cancelled by `selectBranch`\r\n\t\tif (simple !== true && branch.ascendants) {\r\n\t\t\t$iter.each(branch.ascendants.iterator(), (ascendant) => {\r\n\t\t\t\tthis.delayUnselectBranch(ascendant, true);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Navigates the menu based on which direction kayboard key was pressed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param key A key that was pressed\r\n\t */\r\n\tpublic moveSelection(key: KeyboardKeys): void {\r\n\r\n\t\tif (this.isDisposed()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Check if there's a current selection\r\n\t\tif (!this._currentSelection) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet newSelection: $type.Optional<IExportMenuItem>;\r\n\r\n\t\tif (key == \"up\") {\r\n\t\t\t// Try moving up in current menu list, or to the last item if already\r\n\t\t\t// at the top\r\n\t\t\tnewSelection = this.getPrevSibling(this._currentSelection);\r\n\t\t}\r\n\t\telse if (key == \"down\") {\r\n\t\t\t// Try moving down in current menu list, or to the top item if already\r\n\t\t\t// at the bottom\r\n\t\t\tnewSelection = this.getNextSibling(this._currentSelection);\r\n\t\t}\r\n\t\telse if ((key == \"left\" && this.align == \"right\") || (key == \"right\" && this.align == \"left\")) {\r\n\t\t\tlet menu = this.getSubMenu(this._currentSelection);\r\n\r\n\t\t\t// Go one level-deeper\r\n\t\t\tif (menu != null) {\r\n\t\t\t\tnewSelection = menu[0];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ((key == \"right\" && this.align == \"right\") || (key == \"left\" && this.align == \"left\")) {\r\n\t\t\t// Go one level-deeper\r\n\t\t\tnewSelection = this.getParentItem(this._currentSelection);\r\n\t\t}\r\n\r\n\t\tif (newSelection && newSelection !== this._currentSelection) {\r\n\t\t\tthis.selectBranch(newSelection);\r\n\t\t\tthis.setFocus(newSelection);\r\n\t\t\tthis._currentSelection = newSelection;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all siblings of a menu item, including this same menu item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  Menu item\r\n\t * @return List of sibling menu items\r\n\t */\r\n\tpublic getSiblings(branch: IExportMenuItem): Array<IExportMenuItem> {\r\n\t\tlet parent = this.getParentItem(branch);\r\n\r\n\t\tif (parent && parent.menu) {\r\n\t\t\treturn parent.menu;\r\n\r\n\t\t} else {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns menu items parent item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  Menu item\r\n\t * @return Parent menu item\r\n\t */\r\n\tpublic getParentItem(branch: IExportMenuItem): $type.Optional<IExportMenuItem> {\r\n\t\tif (branch.ascendants && branch.ascendants.length) {\r\n\t\t\treturn branch.ascendants.getIndex(branch.ascendants.length - 1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns next sibling in the same menu branch. If there is no next sibling,\r\n\t * the first one is returned. If there is just one item, that item is\r\n\t * returned. Unsupported menu items are skipped.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  Menu item to search siblings for\r\n\t * @return Menu item\r\n\t */\r\n\tpublic getNextSibling(branch: IExportMenuItem): IExportMenuItem {\r\n\t\tlet siblings = this.getSiblings(branch);\r\n\t\tif (siblings.length > 1) {\r\n\t\t\tlet next = siblings.indexOf(branch) + 1;\r\n\t\t\tnext = siblings.length == next ? 0 : next;\r\n\t\t\treturn siblings[next].unsupported ? this.getNextSibling(siblings[next]) : siblings[next];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn branch;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns previous sibling in the same menu branch. If there is no next\r\n\t * sibling, the first one is returned. If there is just one item, that item is\r\n\t * returned. Unsupported menu items are skipped.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch  Menu item to search siblings for\r\n\t * @return Menu item\r\n\t */\r\n\tpublic getPrevSibling(branch: IExportMenuItem): IExportMenuItem {\r\n\t\tlet siblings = this.getSiblings(branch);\r\n\t\tif (siblings.length > 1) {\r\n\t\t\tlet prev = siblings.indexOf(branch) - 1;\r\n\t\t\tprev = prev == -1 ? siblings.length - 1 : prev;\r\n\t\t\treturn siblings[prev].unsupported ? this.getPrevSibling(siblings[prev]) : siblings[prev];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn branch;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to set focus on particular menu element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Menu item\r\n\t */\r\n\tpublic setFocus(branch: IExportMenuItem): void {\r\n\t\tif (branch.interactions) {\r\n\t\t\ttry {\r\n\t\t\t\t(<HTMLElement>branch.interactions.element).focus();\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\t// nothing\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to remove focus from the menu element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param branch Menu item\r\n\t */\r\n\tpublic setBlur(branch: IExportMenuItem): void {\r\n\t\tif (branch.interactions) {\r\n\t\t\ttry {\r\n\t\t\t\t(<HTMLElement>branch.interactions.element).blur();\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\t// nothing\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the whole branch of menu.\r\n\t *\r\n\t * @param  branch  branch\r\n\t */\r\n\tpublic hideBranch(branch: IExportMenuItem): void {\r\n\t\tbranch.element.style.display = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Show the branch of menu.\r\n\t *\r\n\t * @param  branch  branch\r\n\t */\r\n\tpublic showBranch(branch: IExportMenuItem): void {\r\n\t\tbranch.element.style.display = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * The main element o fthe menu - usually `<ul>`.\r\n\t *\r\n\t * @since 4.10.6\r\n\t * @return Menu element\r\n\t */\r\n\tpublic get element(): $type.Optional<HTMLElement> {\r\n\t\treturn this._element;\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}