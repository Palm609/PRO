{"ast":null,"code":"/**\r\n * FlowDiagramNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $string from \"../../core/utils/String\";\nimport * as $order from \"../../core/utils/Order\";\nimport * as $number from \"../../core/utils/Number\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport * as $object from \"../../core/utils/Object\";\nimport { LegendSettings } from \"../Legend\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar FlowDiagramNode =\n/** @class */\nfunction (_super) {\n  __extends(FlowDiagramNode, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagramNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n\n\n    _this.legendSettings = new LegendSettings();\n    _this.className = \"FlowDiagramNode\";\n    _this.isMeasured = false; // TODO can this be removed ?\n\n    new InterfaceColorSet();\n    _this.draggable = true;\n    _this.inert = true;\n    _this.setStateOnChildren = true;\n\n    _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\n\n    _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\n\n    return _this; //this.events.on(\"hit\", this.handleHit, this, false);\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  FlowDiagramNode.prototype.handleHit = function (event) {\n    if (this.isHidden || this.isHiding) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n  /**\r\n   * Shows hidden node.\r\n   *\r\n   * @param duration  Duration of reveal animation (ms)\r\n   * @return Animation\r\n   */\n\n\n  FlowDiagramNode.prototype.show = function (duration) {\n    var animation = _super.prototype.show.call(this, duration);\n\n    this.outgoingDataItems.each(function (dataItem) {\n      if (!dataItem.toNode || dataItem.toNode && !dataItem.toNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n        dataItem.link.show();\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      if (!dataItem.fromNode || dataItem.fromNode && !dataItem.fromNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n        dataItem.link.show();\n      }\n    });\n    return animation;\n  };\n  /**\r\n   * Hides node.\r\n   *\r\n   * @param duration  Duration of hiding animation (ms)\r\n   * @return Animation\r\n   */\n\n\n  FlowDiagramNode.prototype.hide = function (duration) {\n    var animation = _super.prototype.hide.call(this, duration);\n\n    this.outgoingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n      dataItem.link.hide();\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n      dataItem.link.hide();\n    });\n    return animation;\n  };\n  /**\r\n   * Marks node as invalid, for redrawal in the next update cycle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagramNode.prototype.validate = function () {\n    if (!this.isDisposed()) {\n      _super.prototype.validate.call(this);\n\n      this.invalidateLinks();\n    }\n  };\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagramNode.prototype.invalidateLinks = function () {\n    var _this = this;\n\n    this.outgoingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n\n      if (link.colorMode == \"fromNode\") {\n        link.fill = link.dataItem.fromNode.color;\n      }\n\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_1 = link.gradient.stops.getIndex(0);\n\n        if (stop_1) {\n          stop_1.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n\n      if (link.colorMode == \"toNode\") {\n        link.fill = link.dataItem.toNode.color;\n      }\n\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_2 = link.gradient.stops.getIndex(1);\n\n        if (stop_2) {\n          stop_2.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n  };\n\n  Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\n    /**\r\n     * List of incoming items (links).\r\n     *\r\n     * @readonly\r\n     * @return Incoming items\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._incomingDataItems) {\n        var incomingDataItems = new List();\n        incomingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._incomingSorted = _this._incomingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._incomingDataItems = incomingDataItems;\n      }\n\n      return this._incomingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\n    /**\r\n     * List of outgoing items (links).\r\n     *\r\n     * @readonly\r\n     * @return Outgoing items\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._outgoingDataItems) {\n        var outgoingDataItems = new List();\n        outgoingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._outgoingSorted = _this._outgoingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._outgoingDataItems = outgoingDataItems;\n      }\n\n      return this._outgoingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"name\");\n    },\n\n    /**\r\n     * A name of the node.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"name\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"total\");\n    },\n\n    /**\r\n     * Sum of all incoming+outgoing link values\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"total\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"totalIncoming\");\n    },\n\n    /**\r\n     * Sum of all incomming link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"totalIncoming\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"totalOutgoing\");\n    },\n\n    /**\r\n     * Sum of all outgoing link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"totalOutgoing\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"color\");\n    },\n\n    /**\r\n     * Node's color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.setColorProperty(\"color\", value);\n\n      if (this._background) {\n        this._background.fill = value;\n      }\n\n      this.fill = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n  FlowDiagramNode.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    column.stroke = this.fill;\n    column.copyFrom(this);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = column.fill;\n    legendDataItem.colorOrig = column.fill;\n  };\n\n  Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramNode;\n}(Container);\n\nexport { FlowDiagramNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;","map":{"version":3,"sources":["../../../../../src/.internal/charts/elements/FlowDiagramNode.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}