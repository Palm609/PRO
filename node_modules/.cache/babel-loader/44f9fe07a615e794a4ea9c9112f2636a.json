{"ast":null,"code":"import { isSymbolNode } from '../../../utils/is.js';\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\n\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  var name = symbol.name; // variable name\n\n  var subScope = Object.create(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope[name] = x;\n    return eq.evaluate(subScope);\n  };\n}","map":{"version":3,"names":["isSymbolNode","compileInlineExpression","expression","math","scope","symbol","filter","node","name","Error","subScope","Object","create","eq","compile","inlineExpression","x","evaluate"],"sources":["C:/Users/never/OneDrive/เดสก์ท็อป/ReactMumer-main/node_modules/mathjs/lib/esm/expression/transform/utils/compileInlineExpression.js"],"sourcesContent":["import { isSymbolNode } from '../../../utils/is.js';\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\n\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  var name = symbol.name; // variable name\n\n  var subScope = Object.create(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope[name] = x;\n    return eq.evaluate(subScope);\n  };\n}"],"mappings":"AAAA,SAASA,YAAT,QAA6B,sBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,UAAjC,EAA6CC,IAA7C,EAAmDC,KAAnD,EAA0D;EAC/D;EACA,IAAIC,MAAM,GAAGH,UAAU,CAACI,MAAX,CAAkB,UAAUC,IAAV,EAAgB;IAC7C,OAAOP,YAAY,CAACO,IAAD,CAAZ,IAAsB,EAAEA,IAAI,CAACC,IAAL,IAAaL,IAAf,CAAtB,IAA8C,EAAEI,IAAI,CAACC,IAAL,IAAaJ,KAAf,CAArD;EACD,CAFY,EAEV,CAFU,CAAb;;EAIA,IAAI,CAACC,MAAL,EAAa;IACX,MAAM,IAAII,KAAJ,CAAU,uDAAuDP,UAAvD,GAAoE,GAA9E,CAAN;EACD,CAR8D,CAQ7D;;;EAGF,IAAIM,IAAI,GAAGH,MAAM,CAACG,IAAlB,CAX+D,CAWvC;;EAExB,IAAIE,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcR,KAAd,CAAf;EACA,IAAIS,EAAE,GAAGX,UAAU,CAACY,OAAX,EAAT;EACA,OAAO,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;IAClCN,QAAQ,CAACF,IAAD,CAAR,GAAiBQ,CAAjB;IACA,OAAOH,EAAE,CAACI,QAAH,CAAYP,QAAZ,CAAP;EACD,CAHD;AAID"},"metadata":{},"sourceType":"module"}